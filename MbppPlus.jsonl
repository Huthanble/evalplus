{"task_id": 2, "prompt": "'''\nWrite a function to find the shared elements from the given two lists.\n'''", "test_imports": [], "test_list": ["assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))", "assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))", "assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))"], "entry_point": "similar_elements", "canonical_solution": "\ndef similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [5, 4, 3, 7]], [[11, 12, 14, 13], [17, 15, 14, 13]]], "atol": 0}
{"task_id": 3, "prompt": "'''\nWrite a python function to identify non-prime numbers.\n'''", "test_imports": [], "test_list": ["assert is_not_prime(2) == False", "assert is_not_prime(10) == True", "assert is_not_prime(35) == True", "assert is_not_prime(37) == False"], "entry_point": "is_not_prime", "canonical_solution": "\nimport math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_not_prime(1) == True\nassert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True\nassert is_not_prime(37) == False\n", "base_input": [[1], [2], [10], [35], [37]], "atol": 0}
{"task_id": 4, "prompt": "'''\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n'''", "test_imports": [], "test_list": ["assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]", "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"], "entry_point": "heap_queue_largest", "canonical_solution": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums) > n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]\n", "base_input": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 2], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 5]], "atol": 0}
{"task_id": 6, "prompt": "'''\nWrite a python function to check whether the two numbers differ at one bit position only or not.\n'''", "test_imports": [], "test_list": ["assert differ_At_One_Bit_Pos(13,9) == True", "assert differ_At_One_Bit_Pos(15,8) == False", "assert differ_At_One_Bit_Pos(2,4) == False", "assert differ_At_One_Bit_Pos(2, 3) == True", "assert differ_At_One_Bit_Pos(5, 1) == True", "assert differ_At_One_Bit_Pos(1, 5) == True"], "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)\n", "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False\nassert differ_At_One_Bit_Pos(2, 3) == True\nassert differ_At_One_Bit_Pos(5, 1) == True\nassert differ_At_One_Bit_Pos(1, 5) == True\n", "base_input": [[13, 9], [15, 8], [2, 4], [2, 3], [5, 1], [1, 5]], "atol": 0}
{"task_id": 7, "prompt": "'''\nWrite a function to find all words which are at least 4 characters long in a string.\n'''", "test_imports": [], "test_list": ["assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])", "assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])", "assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])"], "entry_point": "find_char_long", "canonical_solution": "\nimport re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n", "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\nassert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])\nassert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])\n", "base_input": [["Please move back to stream"], ["Jing Eco and Tech"], ["Jhingai wulu road Zone 3"]], "atol": 0}
{"task_id": 8, "prompt": "'''\nWrite a function to find squares of individual elements in a list.\n'''", "test_imports": [], "test_list": ["assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert square_nums([10,20,30])==([100,400,900])", "assert square_nums([12,15])==([144,225])"], "entry_point": "square_nums", "canonical_solution": "\ndef square_nums(nums):\n return [i**2 for i in nums]\n", "contract": "\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(i, (int, float)) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 30]], [[12, 15]]], "atol": 0}
{"task_id": 9, "prompt": "'''\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n'''", "test_imports": [], "test_list": ["assert find_Rotations(\"aaaa\") == 1", "assert find_Rotations(\"ab\") == 2", "assert find_Rotations(\"abc\") == 3"], "entry_point": "find_Rotations", "canonical_solution": "\ndef find_Rotations(s): \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3\n", "base_input": [["aaaa"], ["ab"], ["abc"]], "atol": 0}
{"task_id": 11, "prompt": "'''\nWrite a python function to remove first and last occurrence of a given character from the string.\n'''", "test_imports": [], "test_list": ["assert remove_Occ(\"hello\",\"l\") == \"heo\"", "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"", "assert remove_Occ(\"PHP\",\"P\") == \"H\""], "entry_point": "remove_Occ", "canonical_solution": "\ndef remove_Occ(s,ch): \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(s) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"\n", "base_input": [["hello", "l"], ["abcda", "a"], ["PHP", "P"]], "atol": 0}
{"task_id": 12, "prompt": "'''\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n'''", "test_imports": [], "test_list": ["assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]", "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]", "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"], "entry_point": "sort_matrix", "canonical_solution": "\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "contract": "\n    assert isinstance(M, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert len(M[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(M[0]) for row in M), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in M for item in row), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n", "base_input": [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[1, 2, 3], [-2, 4, -5], [1, -1, 1]]], [[[5, 8, 9], [6, 4, 3], [2, 1, 4]]]], "atol": 0}
{"task_id": 14, "prompt": "'''\nWrite a python function to find the volume of a triangular prism.\n'''", "test_imports": [], "test_list": ["assert find_Volume(10,8,6) == 240", "assert find_Volume(3,2,2) == 6", "assert find_Volume(1,2,1) == 1"], "entry_point": "find_Volume", "canonical_solution": "\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n", "contract": "\n    assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1\n", "base_input": [[10, 8, 6], [3, 2, 2], [1, 2, 1]], "atol": 0}
{"task_id": 16, "prompt": "'''\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n'''", "test_imports": [], "test_list": ["assert text_lowercase_underscore(\"aab_cbbbc\")==(True)", "assert text_lowercase_underscore(\"aab_Abbbc\")==(False)", "assert text_lowercase_underscore(\"Aaab_abbbc\")==(False)"], "entry_point": "text_lowercase_underscore", "canonical_solution": "\nimport re\ndef text_lowercase_underscore(text):\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n", "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n        assert len(text) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\nassert text_lowercase_underscore(\"aab_Abbbc\")==(False)\nassert text_lowercase_underscore(\"Aaab_abbbc\")==(False)\n", "base_input": [["aab_cbbbc"], ["aab_Abbbc"], ["Aaab_abbbc"]], "atol": 0}
{"task_id": 17, "prompt": "'''\nWrite a function that returns the perimeter of a square given its side length as input.\n'''", "test_imports": [], "test_list": ["assert square_perimeter(10)==40", "assert square_perimeter(5)==20", "assert square_perimeter(4)==16"], "entry_point": "square_perimeter", "canonical_solution": "\ndef square_perimeter(a):\n  return 4*a\n", "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16\n", "base_input": [[10], [5], [4]], "atol": 0}
{"task_id": 18, "prompt": "'''\nWrite a function to remove characters from the first string which are present in the second string.\n'''", "test_imports": [], "test_list": ["assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'", "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'", "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'"], "entry_point": "remove_dirty_chars", "canonical_solution": "\ndef remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n", "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(second_string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(string) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert len(second_string) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles'\n", "base_input": [["probasscurve", "pros"], ["digitalindia", "talent"], ["exoticmiles", "toxic"]], "atol": 0}
{"task_id": 19, "prompt": "'''\nWrite a function to find whether a given array of integers contains any duplicate element.\n'''", "test_imports": [], "test_list": ["assert test_duplicate(([1,2,3,4,5]))==False", "assert test_duplicate(([1,2,3,4, 4]))==True", "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"], "entry_point": "test_duplicate", "canonical_solution": "\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))\n", "contract": "\n    assert isinstance(arraynums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) for item in arraynums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True\n", "base_input": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 4]], [[1, 1, 2, 2, 3, 3, 4, 4, 5]]], "atol": 0}
{"task_id": 20, "prompt": "'''\nWrite a function to check if the given number is woodball or not.\n'''", "test_imports": [], "test_list": ["assert is_woodall(383) == True", "assert is_woodall(254) == False", "assert is_woodall(200) == False"], "entry_point": "is_woodall", "canonical_solution": "\ndef is_woodall(x): \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n", "contract": "\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False\n", "base_input": [[383], [254], [200]], "atol": 0}
{"task_id": 56, "prompt": "'''\nWrite a python function to check if a given number is one less than twice its reverse.\n'''", "test_imports": [], "test_list": ["assert check(70) == False", "assert check(23) == False", "assert check(73) == True"], "entry_point": "check", "canonical_solution": "\ndef check(n):    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check(70) == False\nassert check(23) == False\nassert check(73) == True\n", "base_input": [[70], [23], [73]], "atol": 0}
{"task_id": 57, "prompt": "'''\nWrite a python function to find the largest number that can be formed with the given list of digits.\n'''", "test_imports": [], "test_list": ["assert find_Max_Num([1,2,3]) == 321", "assert find_Max_Num([4,5,6,1]) == 6541", "assert find_Max_Num([1,2,3,9]) == 9321"], "entry_point": "find_Max_Num", "canonical_solution": "\ndef find_Max_Num(arr) : \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, int) and 0 <= item <= 9 for item in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([4,5,6,1]) == 6541\nassert find_Max_Num([1,2,3,9]) == 9321\n", "base_input": [[[1, 2, 3]], [[4, 5, 6, 1]], [[1, 2, 3, 9]]], "atol": 0}
{"task_id": 58, "prompt": "'''\nWrite a python function to check whether the given two integers have opposite sign or not.\n'''", "test_imports": [], "test_list": ["assert opposite_Signs(1,-2) == True", "assert opposite_Signs(3,2) == False", "assert opposite_Signs(-10,-10) == False", "assert opposite_Signs(-2,2) == True"], "entry_point": "opposite_Signs", "canonical_solution": "\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0) \n", "contract": "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False\nassert opposite_Signs(-2,2) == True\n", "base_input": [[1, -2], [3, 2], [-10, -10], [-2, 2]], "atol": 0}
{"task_id": 59, "prompt": "'''\nWrite a function to find the nth octagonal number.\n'''", "test_imports": [], "test_list": ["assert is_octagonal(5) == 65", "assert is_octagonal(10) == 280", "assert is_octagonal(15) == 645"], "entry_point": "is_octagonal", "canonical_solution": "\ndef is_octagonal(n): \n\treturn 3 * n * n - 2 * n \n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645\n", "base_input": [[5], [10], [15]], "atol": 0}
{"task_id": 61, "prompt": "'''\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\n'''", "test_imports": [], "test_list": ["assert count_Substrings('112112') == 6", "assert count_Substrings('111') == 6", "assert count_Substrings('1101112') == 12"], "entry_point": "count_Substrings", "canonical_solution": "\nfrom collections import defaultdict\ndef count_Substrings(s):\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count\n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isdigit(), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Substrings('112112') == 6\nassert count_Substrings('111') == 6\nassert count_Substrings('1101112') == 12\n", "base_input": [["112112"], ["111"], ["1101112"]], "atol": 0}
{"task_id": 62, "prompt": "'''\nWrite a python function to find smallest number in a list.\n'''", "test_imports": [], "test_list": ["assert smallest_num([10, 20, 1, 45, 99]) == 1", "assert smallest_num([1, 2, 3]) == 1", "assert smallest_num([45, 46, 50, 60]) == 45"], "entry_point": "smallest_num", "canonical_solution": "\ndef smallest_num(xs):\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n", "contract": "\n  assert isinstance(xs, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in xs), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45\n", "base_input": [[[10, 20, 1, 45, 99]], [[1, 2, 3]], [[45, 46, 50, 60]]], "atol": 0}
{"task_id": 63, "prompt": "'''\nWrite a function to find the maximum difference between available pairs in the given tuple list.\n'''", "test_imports": [], "test_list": ["assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7", "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15", "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"], "entry_point": "max_difference", "canonical_solution": "\ndef max_difference(test_list):\n  return max(abs(a - b) for a, b in test_list)\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) == 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n", "base_input": [[[[3, 5], [1, 7], [10, 3], [1, 2]]], [[[4, 6], [2, 17], [9, 13], [11, 12]]], [[[12, 35], [21, 27], [13, 23], [41, 22]]]], "atol": 0}
{"task_id": 64, "prompt": "'''\nWrite a function to sort a list of tuples using the second value of each tuple.\n'''", "test_imports": [], "test_list": ["assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]", "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])", "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"], "entry_point": "subject_marks", "canonical_solution": "\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n", "contract": "\n assert isinstance(subjectmarks, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item, tuple) and len(item) >= 2 for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(item[1], (int, float)) for item in subjectmarks), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])\n", "base_input": [[[["English", 88], ["Science", 90], ["Maths", 97], ["Social sciences", 82]]], [[["Telugu", 49], ["Hindhi", 54], ["Social", 33]]], [[["Physics", 96], ["Chemistry", 97], ["Biology", 45]]]], "atol": 0}
{"task_id": 65, "prompt": "'''\nWrite a function to flatten a list and sum all of its elements.\n'''", "test_imports": [], "test_list": ["assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21", "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106", "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"], "entry_point": "recursive_list_sum", "canonical_solution": "\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n", "contract": "\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(data_list, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(data_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210\n", "base_input": [[[1, 2, [3, 4], [5, 6]]], [[7, 10, [15, 14], [19, 41]]], [[10, 20, [30, 40], [50, 60]]]], "atol": 0}
{"task_id": 66, "prompt": "'''\nWrite a python function to count the number of positive numbers in a list.\n'''", "test_imports": [], "test_list": ["assert pos_count([1,-2,3,-4]) == 2", "assert pos_count([3,4,5,-1]) == 3", "assert pos_count([1,2,3,4]) == 4"], "entry_point": "pos_count", "canonical_solution": "\ndef pos_count(l):\n  return len([x for x in l if x > 0])\n", "contract": "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for item in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4\n", "base_input": [[[1, -2, 3, -4]], [[3, 4, 5, -1]], [[1, 2, 3, 4]]], "atol": 0}
{"task_id": 67, "prompt": "'''\nWrite a function to find the number of ways to partition a set of Bell numbers.\n'''", "test_imports": [], "test_list": ["assert bell_number(2)==2", "assert bell_number(10)==115975", "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"], "entry_point": "bell_number", "canonical_solution": "\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n <= 100, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300\n", "base_input": [[2], [10], [56]], "atol": 0}
{"task_id": 68, "prompt": "'''\nWrite a python function to check whether the given array is monotonic or not.\n'''", "test_imports": [], "test_list": ["assert is_Monotonic([6, 5, 4, 4]) == True", "assert is_Monotonic([1, 2, 2, 3]) == True", "assert is_Monotonic([1, 3, 2]) == False"], "entry_point": "is_Monotonic", "canonical_solution": "\ndef is_Monotonic(A): \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n", "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in A), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False\n", "base_input": [[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]]], "atol": 0}
{"task_id": 69, "prompt": "'''\nWrite a function to check whether a list contains the given sublist or not.\n'''", "test_imports": [], "test_list": ["assert is_sublist([2,4,3,5,7],[3,7])==False", "assert is_sublist([2,4,3,5,7],[4,3])==True", "assert is_sublist([2,4,3,5,7],[1,6])==False"], "entry_point": "is_sublist", "canonical_solution": "\ndef is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n", "contract": "\n\tassert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(s, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False\n", "base_input": [[[2, 4, 3, 5, 7], [3, 7]], [[2, 4, 3, 5, 7], [4, 3]], [[2, 4, 3, 5, 7], [1, 6]]], "atol": 0}
{"task_id": 70, "prompt": "'''\nWrite a function to find whether all the given tuples have equal length or not.\n'''", "test_imports": [], "test_list": ["assert get_equal([(11, 22, 33), (44, 55, 66)]) == True", "assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False", "assert get_equal([(1, 2), (3, 4)]) == True"], "entry_point": "get_equal", "canonical_solution": "\ndef get_equal(Input):\n  return len(set(len(item) for item in Input)) == 1\n", "contract": "\n  assert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in Input), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False\nassert get_equal([(1, 2), (3, 4)]) == True\n", "base_input": [[[[11, 22, 33], [44, 55, 66]]], [[[1, 2, 3], [4, 5, 6, 7]]], [[[1, 2], [3, 4]]]], "atol": 0}
{"task_id": 71, "prompt": "'''\nWrite a function to sort a list of elements.\n'''", "test_imports": [], "test_list": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]", "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]", "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"], "entry_point": "comb_sort", "canonical_solution": "\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]\n", "base_input": [[[5, 15, 37, 25, 79]], [[41, 32, 15, 19, 22]], [[99, 15, 13, 47]]], "atol": 0}
{"task_id": 72, "prompt": "'''\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n'''", "test_imports": [], "test_list": ["assert dif_Square(5) == True", "assert dif_Square(10) == False", "assert dif_Square(15) == True"], "entry_point": "dif_Square", "canonical_solution": "\ndef dif_Square(n): \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True\n", "base_input": [[5], [10], [15]], "atol": 0}
{"task_id": 74, "prompt": "'''\nWrite a function to check whether it follows the sequence given in the patterns array.\n'''", "test_imports": [], "test_list": ["assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False", "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False"], "entry_point": "is_samepatterns", "canonical_solution": "\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)\n", "contract": "\n    assert isinstance(colors, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(patterns, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False\n", "base_input": [[["red", "green", "green"], ["a", "b", "b"]], [["red", "green", "greenn"], ["a", "b", "b"]], [["red", "green", "greenn"], ["a", "b"]]], "atol": 0}
{"task_id": 75, "prompt": "'''\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n'''", "test_imports": [], "test_list": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]", "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]", "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]"], "entry_point": "find_tuples", "canonical_solution": "\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for tuple in test_list for item in tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  assert K > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n", "base_input": [[[[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6], [[[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5], [[[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4]], "atol": 0}
{"task_id": 77, "prompt": "'''\nWrite a python function to find whether a number is divisible by 11.\n'''", "test_imports": [], "test_list": ["assert is_Diff (12345) == False", "assert is_Diff(1212112) == True", "assert is_Diff(1212) == False"], "entry_point": "is_Diff", "canonical_solution": "\ndef is_Diff(n): \n    return n % 11 == 0 \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False\n", "base_input": [[12345], [1212112], [1212]], "atol": 0}
{"task_id": 79, "prompt": "'''\nWrite a python function to check whether the length of the word is odd or not.\n'''", "test_imports": [], "test_list": ["assert word_len(\"Hadoop\") == False", "assert word_len(\"great\") == True", "assert word_len(\"structure\") == True"], "entry_point": "word_len", "canonical_solution": "\ndef word_len(s): \n    return len(s) % 2 == 1\n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert s.isalpha(), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True\n", "base_input": [["Hadoop"], ["great"], ["structure"]], "atol": 0}
{"task_id": 80, "prompt": "'''\nWrite a function to find the nth tetrahedral number.\n'''", "test_imports": [], "test_list": ["assert tetrahedral_number(5) == 35", "assert tetrahedral_number(6) == 56", "assert tetrahedral_number(7) == 84"], "entry_point": "tetrahedral_number", "canonical_solution": "\ndef tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(6) == 56\nassert tetrahedral_number(7) == 84\n", "base_input": [[5], [6], [7]], "atol": 0}
{"task_id": 82, "prompt": "'''\nWrite a function to find the volume of a sphere.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)", "assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)", "assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)"], "entry_point": "volume_sphere", "canonical_solution": "\nimport math\ndef volume_sphere(r):\n  return (4./3.) * math.pi * (r**3)\n", "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\nassert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)\nassert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)\n", "base_input": [[10], [25], [20]], "atol": 0.0001}
{"task_id": 83, "prompt": "'''\nWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n'''", "test_imports": [], "test_list": ["assert get_Char(\"abc\") == \"f\"", "assert get_Char(\"gfg\") == \"t\"", "assert get_Char(\"ab\") == \"c\""], "entry_point": "get_Char", "canonical_solution": "\ndef get_Char(strr):  \n    summ = sum(ord(i) for i in strr)\n    return chr(summ % 26)\n", "contract": "\n    assert isinstance(strr, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_Char(\"abc\") == chr(8)\nassert get_Char(\"gfg\") == chr(22)\nassert get_Char(\"ab\") == chr(13)\n", "base_input": [["abc"], ["gfg"], ["ab"]], "atol": 0}
{"task_id": 84, "prompt": "'''\nWrite a function to find the nth number in the newman conway sequence.\n'''", "test_imports": [], "test_list": ["assert sequence(10) == 6", "assert sequence(2) == 1", "assert sequence(3) == 2"], "entry_point": "sequence", "canonical_solution": "\ndef sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2\n", "base_input": [[10], [2], [3]], "atol": 0}
{"task_id": 85, "prompt": "'''\nWrite a function to find the surface area of a sphere.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)", "assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)"], "entry_point": "surfacearea_sphere", "canonical_solution": "\nimport math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * (r**2)\n", "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)\nassert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)\n", "base_input": [[10], [15], [20]], "atol": 0.0001}
{"task_id": 86, "prompt": "'''\nWrite a function to find nth centered hexagonal number.\n'''", "test_imports": [], "test_list": ["assert centered_hexagonal_number(10) == 271", "assert centered_hexagonal_number(2) == 7", "assert centered_hexagonal_number(9) == 217"], "entry_point": "centered_hexagonal_number", "canonical_solution": "\ndef centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217\n", "base_input": [[10], [2], [9]], "atol": 0}
{"task_id": 87, "prompt": "'''\nWrite a function to merge three dictionaries into a single dictionary.\n'''", "test_imports": [], "test_list": ["assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}", "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"], "entry_point": "merge_dictionaries_three", "canonical_solution": "\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n", "contract": "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict2, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(dict3, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n", "base_input": [[{"R": "Red", "B": "Black", "P": "Pink"}, {"G": "Green", "W": "White"}, {"O": "Orange", "W": "White", "B": "Black"}], [{"R": "Red", "B": "Black", "P": "Pink"}, {"G": "Green", "W": "White"}, {"L": "lavender", "B": "Blue"}], [{"R": "Red", "B": "Black", "P": "Pink"}, {"L": "lavender", "B": "Blue"}, {"G": "Green", "W": "White"}]], "atol": 0}
{"task_id": 88, "prompt": "'''\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n'''", "test_imports": [], "test_list": ["assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})", "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})", "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})"], "entry_point": "freq_count", "canonical_solution": "\nimport collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\n", "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})\nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})\n", "base_input": [[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]], [[5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]]], "atol": 0}
{"task_id": 89, "prompt": "'''\nWrite a function to find the closest smaller number than n.\n'''", "test_imports": [], "test_list": ["assert closest_num(11) == 10", "assert closest_num(7) == 6", "assert closest_num(12) == 11"], "entry_point": "closest_num", "canonical_solution": "\ndef closest_num(N):\n  return (N - 1)\n", "contract": "\n  assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11\n", "base_input": [[11], [7], [12]], "atol": 0}
{"task_id": 90, "prompt": "'''\nWrite a python function to find the length of the longest word.\n'''", "test_imports": [], "test_list": ["assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7", "assert len_log([\"a\",\"ab\",\"abc\"]) == 3", "assert len_log([\"small\",\"big\",\"tall\"]) == 5"], "entry_point": "len_log", "canonical_solution": "\ndef len_log(list1):\n    return max(len(x) for x in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, str) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5\n", "base_input": [[["python", "PHP", "bigdata"]], [["a", "ab", "abc"]], [["small", "big", "tall"]]], "atol": 0}
{"task_id": 91, "prompt": "'''\nWrite a function to check if a string is present as a substring in a given list of string values.\n'''", "test_imports": [], "test_list": ["assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False", "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"], "entry_point": "find_substring", "canonical_solution": "\ndef find_substring(str1, sub_str):\n   return any(sub_str in s for s in str1)\n", "contract": "\n   assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n   assert all(isinstance(item, str) for item in str1), \"invalid inputs\" # $_CONTRACT_$\n   assert isinstance(sub_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True\n", "base_input": [[["red", "black", "white", "green", "orange"], "ack"], [["red", "black", "white", "green", "orange"], "abc"], [["red", "black", "white", "green", "orange"], "ange"]], "atol": 0}
{"task_id": 92, "prompt": "'''\nWrite a function to check whether the given number is undulating or not.\n'''", "test_imports": [], "test_list": ["assert is_undulating(1212121) == True", "assert is_undulating(1991) == False", "assert is_undulating(121) == True"], "entry_point": "is_undulating", "canonical_solution": "\ndef is_undulating(n): \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_undulating(1212121) == True\nassert is_undulating(1991) == False\nassert is_undulating(121) == True\n", "base_input": [[1212121], [1991], [121]], "atol": 0}
{"task_id": 93, "prompt": "'''\nWrite a function to calculate the value of 'a' to the power 'b'.\n'''", "test_imports": [], "test_list": ["assert power(3,4) == 81", "assert power(2,3) == 8", "assert power(5,5) == 3125"], "entry_point": "power", "canonical_solution": "\ndef power(a, b):\n\treturn a ** b\n", "contract": "\n\tassert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125\n", "base_input": [[3, 4], [2, 3], [5, 5]], "atol": 0}
{"task_id": 94, "prompt": "'''\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n'''", "test_imports": [], "test_list": ["assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'", "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'", "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"], "entry_point": "index_minimum", "canonical_solution": "\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n", "contract": "\n  assert isinstance(test_list, list) and len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, tuple) and len(item) >= 2 for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item[1], (int, float)) for item in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n", "base_input": [[[["Rash", 143], ["Manjeet", 200], ["Varsha", 100]]], [[["Yash", 185], ["Dawood", 125], ["Sanya", 175]]], [[["Sai", 345], ["Salman", 145], ["Ayesha", 96]]]], "atol": 0}
{"task_id": 95, "prompt": "'''\nWrite a python function to find the length of the smallest list in a list of lists.\n'''", "test_imports": [], "test_list": ["assert Find_Min_Length([[1],[1,2]]) == 1", "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2", "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"], "entry_point": "Find_Min_Length", "canonical_solution": "\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3\n", "base_input": [[[[1], [1, 2]]], [[[1, 2], [1, 2, 3], [1, 2, 3, 4]]], [[[3, 3, 3], [4, 4, 4, 4]]]], "atol": 0}
{"task_id": 96, "prompt": "'''\nWrite a python function to find the number of divisors of a given integer.\n'''", "test_imports": [], "test_list": ["assert divisor(15) == 4", "assert divisor(12) == 6", "assert divisor(9) == 3"], "entry_point": "divisor", "canonical_solution": "\ndef divisor(n):\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert divisor(15) == 4\nassert divisor(12) == 6\nassert divisor(9) == 3\n", "base_input": [[15], [12], [9]], "atol": 0}
{"task_id": 97, "prompt": "'''\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n'''", "test_imports": [], "test_list": ["assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}", "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}", "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"], "entry_point": "frequency_lists", "canonical_solution": "\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n", "contract": "\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(item) for sublist in list1 for item in sublist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}\n", "base_input": [[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]], [[[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]]], "atol": 0}
{"task_id": 98, "prompt": "'''\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)", "assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)", "assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)"], "entry_point": "multiply_num", "canonical_solution": "\ndef multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n", "contract": "\n    assert isinstance(numbers, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(numbers) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in numbers), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)\nassert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)\n", "base_input": [[[8, 2, 3, -1, 7]], [[-10, -20, -30]], [[19, 15, 18]]], "atol": 0.0001}
{"task_id": 99, "prompt": "'''\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n'''", "test_imports": [], "test_list": ["assert decimal_to_binary(8) == '1000'", "assert decimal_to_binary(18) == '10010'", "assert decimal_to_binary(7) == '111'"], "entry_point": "decimal_to_binary", "canonical_solution": "\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111'\n", "base_input": [[8], [18], [7]], "atol": 0}
{"task_id": 100, "prompt": "'''\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n'''", "test_imports": [], "test_list": ["assert next_smallest_palindrome(99)==101", "assert next_smallest_palindrome(1221)==1331", "assert next_smallest_palindrome(120)==121"], "entry_point": "next_smallest_palindrome", "canonical_solution": "\ndef next_smallest_palindrome(num):\n    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))\n", "contract": "\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121\n", "base_input": [[99], [1221], [120]], "atol": 0}
{"task_id": 101, "prompt": "'''\nWrite a function to find the kth element in the given array using 1-based indexing.\n'''", "test_imports": [], "test_list": ["assert kth_element([12,3,5,7,19], 2) == 3", "assert kth_element([17,24,8,23], 3) == 8", "assert kth_element([16,21,25,36,4], 4) == 36"], "entry_point": "kth_element", "canonical_solution": "\ndef kth_element(arr, k):\n  return arr[k-1]\n", "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$ \n  assert len(arr) >= k >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([17,24,8,23], 3) == 8\nassert kth_element([16,21,25,36,4], 4) == 36\n", "base_input": [[[12, 3, 5, 7, 19], 2], [[17, 24, 8, 23], 3], [[16, 21, 25, 36, 4], 4]], "atol": 0}
{"task_id": 102, "prompt": "'''\nWrite a function to convert a snake case string to camel case string.\n'''", "test_imports": [], "test_list": ["assert snake_to_camel('python_program')=='PythonProgram'", "assert snake_to_camel('python_language')==('PythonLanguage')", "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"], "entry_point": "snake_to_camel", "canonical_solution": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "contract": "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(word) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')\n", "base_input": [["python_program"], ["python_language"], ["programming_language"]], "atol": 0}
{"task_id": 103, "prompt": "'''\nWrite a function to find the Eulerian number a(n, m).\n'''", "test_imports": [], "test_list": ["assert eulerian_num(3, 1) == 4", "assert eulerian_num(4, 1) == 11", "assert eulerian_num(5, 3) == 26"], "entry_point": "eulerian_num", "canonical_solution": "\ndef eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert m >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26\n", "base_input": [[3, 1], [4, 1], [5, 3]], "atol": 0}
{"task_id": 104, "prompt": "'''\nWrite a function to sort each sublist of strings in a given list of lists.\n'''", "test_imports": [], "test_list": ["assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]", "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"], "entry_point": "sort_sublists", "canonical_solution": "\ndef sort_sublists(input_list):\n    return [sorted(x) for x in input_list]\n", "contract": "\n    assert isinstance(input_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(all(isinstance(y, str) for y in x) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]\n", "base_input": [[[["green", "orange"], ["black", "white"], ["white", "black", "orange"]]], [[[" red ", "green"], ["blue ", " black"], [" orange", "brown"]]], [[["zilver", "gold"], ["magnesium", "aluminium"], ["steel", "bronze"]]]], "atol": 0}
{"task_id": 105, "prompt": "'''\nWrite a python function to count true booleans in the given list.\n'''", "test_imports": [], "test_list": ["assert count([True,False,True]) == 2", "assert count([False,False]) == 0", "assert count([True,True,True]) == 3"], "entry_point": "count", "canonical_solution": "\ndef count(lst):   \n    return sum(lst) \n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, bool) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3\n", "base_input": [[[true, false, true]], [[false, false]], [[true, true, true]]], "atol": 0}
{"task_id": 106, "prompt": "'''\nWrite a function to append the given list to the given tuples.\n'''", "test_imports": [], "test_list": ["assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)", "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)", "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"], "entry_point": "add_lists", "canonical_solution": "\ndef add_lists(test_list, test_tup):\n  return test_tup + tuple(test_list)\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n", "base_input": [[[5, 6, 7], [9, 10]], [[6, 7, 8], [10, 11]], [[7, 8, 9], [11, 12]]], "atol": 0}
{"task_id": 108, "prompt": "'''\nWrite a function to merge three lists into a single sorted list.\n'''", "test_imports": [], "test_list": ["assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]", "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]", "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"], "entry_point": "merge_sorted_list", "canonical_solution": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  return sorted(num1 + num2 + num3)\n", "contract": "\n  assert isinstance(num1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num3, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in num3), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n", "base_input": [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], [[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]]], "atol": 0}
{"task_id": 109, "prompt": "'''\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n'''", "test_imports": [], "test_list": ["assert odd_Equivalent(\"011001\",6) == 3", "assert odd_Equivalent(\"11011\",5) == 4", "assert odd_Equivalent(\"1010\",4) == 2"], "entry_point": "odd_Equivalent", "canonical_solution": "\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in s]), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2\n", "base_input": [["011001", 6], ["11011", 5], ["1010", 4]], "atol": 0}
{"task_id": 111, "prompt": "'''\nWrite a function to find the common elements in given nested lists.\n'''", "test_imports": [], "test_list": ["assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])", "assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])", "assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])"], "entry_point": "common_in_nested_lists", "canonical_solution": "\ndef common_in_nested_lists(nestedlist):\n    return list(set.intersection(*map(set, nestedlist)))\n", "contract": "\n    assert isinstance(nestedlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, list) for item in nestedlist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\nassert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])\nassert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])\n", "base_input": [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]], [[[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]]], "atol": 0}
{"task_id": 113, "prompt": "'''\nWrite a function to check if a string represents an integer or not.\n'''", "test_imports": [], "test_list": ["assert check_integer(\"python\")==False", "assert check_integer(\"1\")==True", "assert check_integer(\"12345\")==True"], "entry_point": "check_integer", "canonical_solution": "\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n", "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True\n", "base_input": [["python"], ["1"], ["12345"]], "atol": 0}
{"task_id": 115, "prompt": "'''\nWrite a function to check whether all dictionaries in a list are empty or not.\n'''", "test_imports": [], "test_list": ["assert empty_dit([{},{},{}])==True", "assert empty_dit([{1,2},{},{}])==False", "assert empty_dit({})==True"], "entry_point": "empty_dit", "canonical_solution": "\ndef empty_dit(list1):\n return all(len(d) == 0 for d in list1 if isinstance(d, dict))\n", "contract": "\n assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==True\nassert empty_dit([{}])==True\n", "base_input": [[[[], [], []]], [[[1, 2], [], []]], [[[]]]], "atol": 0}
{"task_id": 116, "prompt": "'''\nWrite a function to convert a given tuple of positive integers into a single integer.\n'''", "test_imports": [], "test_list": ["assert tuple_to_int((1,2,3))==123", "assert tuple_to_int((4,5,6))==456", "assert tuple_to_int((5,6,7))==567"], "entry_point": "tuple_to_int", "canonical_solution": "\ndef tuple_to_int(nums):\n    return int(''.join(map(str,nums)))\n", "contract": "\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x > 0 for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567\n", "base_input": [[[1, 2, 3]], [[4, 5, 6]], [[5, 6, 7]]], "atol": 0}
{"task_id": 117, "prompt": "'''\nWrite a function to convert all possible convertible elements in a list of lists to floats.\n'''", "test_imports": [], "test_list": ["assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]", "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]", "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"], "entry_point": "list_to_float", "canonical_solution": "\ndef list_to_float(test_list):\n  res = []\n  for l in test_list:\n    t = []\n    for e in l:\n      try:\n        t.append(float(e))\n      except:\n        t.append(e)\n    res.append(t)\n  return res\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, list) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert list_to_float( [[\"3\", \"4\"], [\"1\", \"26.45\"], [\"7.32\", \"8\"], [\"4\", \"8\"]] ) == [[3.0, 4.0], [1.0, 26.45], [7.32, 8.0], [4.0, 8.0]]\nassert list_to_float( [[\"4\", \"4\"], [\"2\", \"27\"], [\"4.12\", \"9\"], [\"7\", \"11\"]] ) == [[4.0, 4.0], [2.0, 27.0], [4.12, 9.0], [7.0, 11.0]]\nassert list_to_float( [[\"6\", \"78\"], [\"5\", \"26.45\"], [\"1.33\", \"4\"], [\"82\", \"13\"]] ) == [[6.0, 78.0], [5.0, 26.45], [1.33, 4.0], [82.0, 13.0]]\n", "base_input": [[[["3", "4"], ["1", "26.45"], ["7.32", "8"], ["4", "8"]]], [[["4", "4"], ["2", "27"], ["4.12", "9"], ["7", "11"]]], [[["6", "78"], ["5", "26.45"], ["1.33", "4"], ["82", "13"]]]], "atol": 0}
{"task_id": 118, "prompt": "'''\nWrite a function to convert a string to a list of strings split on the space character.\n'''", "test_imports": [], "test_list": ["assert string_to_list(\"python programming\")==['python','programming']", "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']", "assert string_to_list(\"write a program\")==['write','a','program']"], "entry_point": "string_to_list", "canonical_solution": "\ndef string_to_list(string): \n    return string.split(\" \")\n", "contract": "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']\n", "base_input": [["python programming"], ["lists tuples strings"], ["write a program"]], "atol": 0}
{"task_id": 119, "prompt": "'''\nWrite a python function to find the element that appears only once in a sorted array.\n'''", "test_imports": [], "test_list": ["assert search([1,1,2,2,3]) == 3", "assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8", "assert search([1,2,2,3,3,4,4]) == 1"], "entry_point": "search", "canonical_solution": "\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8]) == 8\nassert search([1,2,2,3,3,4,4]) == 1\n", "base_input": [[[1, 1, 2, 2, 3]], [[1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]], [[1, 2, 2, 3, 3, 4, 4]]], "atol": 0}
{"task_id": 120, "prompt": "'''\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n'''", "test_imports": [], "test_list": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36", "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200", "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"], "entry_point": "max_product_tuple", "canonical_solution": "\ndef max_product_tuple(list1):\n    return max(abs(x * y) for x, y in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[0], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]), 36, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(10,20), (15,2), (5,10)] ), 200, rel_tol=0.001)\nassert math.isclose(max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] ), 484, rel_tol=0.001)\n", "base_input": [[[[2, 7], [2, 6], [1, 8], [4, 9]]], [[[10, 20], [15, 2], [5, 10]]], [[[11, 44], [10, 15], [20, 5], [12, 9]]]], "atol": 0.0001}
{"task_id": 123, "prompt": "'''\nWrite a function to sum all amicable numbers from 1 to a specified number.\n'''", "test_imports": [], "test_list": ["assert amicable_numbers_sum(999)==504", "assert amicable_numbers_sum(9999)==31626", "assert amicable_numbers_sum(99)==0"], "entry_point": "amicable_numbers_sum", "canonical_solution": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "contract": "\n    assert isinstance(limit, int), \"invalid inputs\" # $_CONTRACT_$\n    assert limit >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0\n", "base_input": [[999], [9999], [99]], "atol": 0}
{"task_id": 124, "prompt": "'''\nWrite a function to get the angle of a complex number.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)", "assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)", "assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)"], "entry_point": "angle_complex", "canonical_solution": "\nimport cmath\ndef angle_complex(a,b):\n  angle=cmath.phase(a+b)\n  return angle\n", "contract": "\n  assert isinstance(a, (int, float)) or isinstance(a, float), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, complex) or isinstance(b, float), \"invalid inputs\" # $_CONTRACT_$\n  assert b.real == 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\nassert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)\nassert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)\n", "base_input": [["0", "1j"], ["2", "1j"], ["0", "2j"]], "atol": 0.0001}
{"task_id": 125, "prompt": "'''\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n'''", "test_imports": [], "test_list": ["assert find_length(\"11000010001\") == 6", "assert find_length(\"10111\") == 1", "assert find_length(\"11011101100101\") == 2"], "entry_point": "find_length", "canonical_solution": "\ndef find_length(string): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n", "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n\tassert all([c in '01' for c in string]), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_length(\"11000010001\") == 6\nassert find_length(\"10111\") == 1\nassert find_length(\"11011101100101\") == 2\n", "base_input": [["11000010001"], ["10111"], ["11011101100101"]], "atol": 0}
{"task_id": 126, "prompt": "'''\nWrite a python function to find the sum of common divisors of two given numbers.\n'''", "test_imports": [], "test_list": ["assert sum(10,15) == 6", "assert sum(100,150) == 93", "assert sum(4,6) == 3"], "entry_point": "sum", "canonical_solution": "\nimport math\ndef sum(a,b): \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n", "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n    assert a > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3\n", "base_input": [[10, 15], [100, 150], [4, 6]], "atol": 0}
{"task_id": 127, "prompt": "'''\nWrite a function to multiply two integers.\n'''", "test_imports": [], "test_list": ["assert multiply_int(10,20)==200", "assert multiply_int(5,10)==50", "assert multiply_int(4,8)==32"], "entry_point": "multiply_int", "canonical_solution": "\ndef multiply_int(x, y):\n    return x * y\n", "contract": "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32\n", "base_input": [[10, 20], [5, 10], [4, 8]], "atol": 0}
{"task_id": 128, "prompt": "'''\nWrite a function to find words that are longer than n characters from a given list of words.\n'''", "test_imports": [], "test_list": ["assert long_words(3,\"python is a programming language\")==['python','programming','language']", "assert long_words(2,\"writing a program\")==['writing','program']", "assert long_words(5,\"sorting list\")==['sorting']"], "entry_point": "long_words", "canonical_solution": "\ndef long_words(n, s):\n    return list(filter(lambda x: len(x) > n, s.split(' ')))\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']\n", "base_input": [[3, "python is a programming language"], [2, "writing a program"], [5, "sorting list"]], "atol": 0}
{"task_id": 129, "prompt": "'''\nWrite a function to calculate whether the matrix is a magic square.\n'''", "test_imports": [], "test_list": ["assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True", "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"], "entry_point": "magic_square_test", "canonical_solution": "\ndef magic_square_test(my_matrix):\n    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True\n", "contract": "\n    assert isinstance(my_matrix, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(row, list) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert len(my_matrix[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(row) == len(my_matrix[0]) for row in my_matrix), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for row in my_matrix for item in row), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n", "base_input": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 7]]]], "atol": 0}
{"task_id": 130, "prompt": "'''\nWrite a function to find the item with maximum frequency in a given list.\n'''", "test_imports": [], "test_list": ["assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2", "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8", "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20"], "entry_point": "max_occurrences", "canonical_solution": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float, str)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20\n", "base_input": [[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]], [[10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]]], "atol": 0}
{"task_id": 131, "prompt": "'''\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n'''", "test_imports": [], "test_list": ["assert reverse_vowels(\"Python\") == \"Python\"", "assert reverse_vowels(\"USA\") == \"ASU\"", "assert reverse_vowels(\"ab\") == \"ab\""], "entry_point": "reverse_vowels", "canonical_solution": "\ndef reverse_vowels(str1):\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n", "contract": "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"\n", "base_input": [["Python"], ["USA"], ["ab"]], "atol": 0}
{"task_id": 132, "prompt": "'''\nWrite a function to convert a tuple to a string.\n'''", "test_imports": [], "test_list": ["assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")", "assert tup_string(('p','y','t','h','o','n'))==(\"python\")", "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"], "entry_point": "tup_string", "canonical_solution": "\ndef tup_string(tup1):\n  return ''.join(tup1)\n", "contract": "\n  assert isinstance(tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, str) for item in tup1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")\n", "base_input": [[["e", "x", "e", "r", "c", "i", "s", "e", "s"]], [["p", "y", "t", "h", "o", "n"]], [["p", "r", "o", "g", "r", "a", "m"]]], "atol": 0}
{"task_id": 133, "prompt": "'''\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n'''", "test_imports": [], "test_list": ["assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32", "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52", "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"], "entry_point": "sum_negativenum", "canonical_solution": "\ndef sum_negativenum(nums):\n  return sum(x for x in nums if x < 0)\n", "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894\n", "base_input": [[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[10, 15, -14, 13, -18, 12, -20]], [[19, -65, 57, 39, 152, -639, 121, 44, 90, -190]]], "atol": 0}
{"task_id": 135, "prompt": "'''\nWrite a function to find the nth hexagonal number.\n'''", "test_imports": [], "test_list": ["assert hexagonal_num(10) == 190", "assert hexagonal_num(5) == 45", "assert hexagonal_num(7) == 91"], "entry_point": "hexagonal_num", "canonical_solution": "\ndef hexagonal_num(n): \n\treturn n * (2 * n - 1) \n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91\n", "base_input": [[10], [5], [7]], "atol": 0}
{"task_id": 137, "prompt": "'''\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)", "assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)", "assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)"], "entry_point": "zero_count", "canonical_solution": "\ndef zero_count(nums):\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\nassert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)\nassert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)\n", "base_input": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17]]], "atol": 0.0001}
{"task_id": 138, "prompt": "'''\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n'''", "test_imports": [], "test_list": ["assert is_Sum_Of_Powers_Of_Two(10) == True", "assert is_Sum_Of_Powers_Of_Two(7) == False", "assert is_Sum_Of_Powers_Of_Two(14) == True"], "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "\ndef is_Sum_Of_Powers_Of_Two(n): \n    return n > 0 and n % 2 == 0\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True\n", "base_input": [[10], [7], [14]], "atol": 0}
{"task_id": 139, "prompt": "'''\nWrite a function to find the circumference of a circle.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)", "assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)", "assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)"], "entry_point": "circle_circumference", "canonical_solution": "\nimport math\ndef circle_circumference(r):\n  return 2 * math.pi * r\n", "contract": "\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\nassert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)\nassert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)\n", "base_input": [[10], [5], [4]], "atol": 0.0001}
{"task_id": 140, "prompt": "'''\nWrite a function to flatten the list of lists into a single set of numbers.\n'''", "test_imports": [], "test_list": ["assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])", "assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])", "assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])"], "entry_point": "extract_singly", "canonical_solution": "\ndef extract_singly(test_list):\n  return set([item for sublist in test_list for item in sublist])\n", "contract": "\n  assert isinstance(test_list, (list, tuple)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (list, tuple)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(all(isinstance(y, (int, float)) for y in x) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == set([3, 4, 5, 7, 1])\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == set([1, 2, 3, 4, 7, 8])\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == set([7, 8, 9, 10, 11, 12])\n", "base_input": [[[[3, 4, 5], [4, 5, 7], [1, 4]]], [[[1, 2, 3], [4, 2, 3], [7, 8]]], [[[7, 8, 9], [10, 11, 12], [10, 11]]]], "atol": 0}
{"task_id": 141, "prompt": "'''\nWrite a function to sort a list of elements.\n'''", "test_imports": [], "test_list": ["assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]", "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]", "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"], "entry_point": "pancake_sort", "canonical_solution": "\ndef pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n", "base_input": [[[15, 79, 25, 38, 69]], [[98, 12, 54, 36, 85]], [[41, 42, 32, 12, 23]]], "atol": 0}
{"task_id": 142, "prompt": "'''\nWrite a function to count number items that are identical in the same position of three given lists.\n'''", "test_imports": [], "test_list": ["assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3", "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4", "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"], "entry_point": "count_samepair", "canonical_solution": "\ndef count_samepair(list1,list2,list3):\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]], [[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]], [[1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8]]], "atol": 0}
{"task_id": 143, "prompt": "'''\nWrite a function to find number of lists present in the given tuple.\n'''", "test_imports": [], "test_list": ["assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2", "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3", "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"], "entry_point": "find_lists", "canonical_solution": "\ndef find_lists(inputs):\n\treturn sum(isinstance(x, list) for x in inputs)\n", "contract": "\n\tassert isinstance(inputs, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1], )) == 1\n", "base_input": [[[[1, 2, 3, 4], [5, 6, 7, 8]]], [[[1, 2], [3, 4], [5, 6]]], [[[9, 8, 7, 6, 5, 4, 3, 2, 1]]]], "atol": 0}
{"task_id": 145, "prompt": "'''\nWrite a python function to find the maximum difference between any two elements in a given array.\n'''", "test_imports": [], "test_list": ["assert max_Abs_Diff((2,1,5,3)) == 4", "assert max_Abs_Diff((9,3,2,5,1)) == 8", "assert max_Abs_Diff((3,2,1)) == 2"], "entry_point": "max_Abs_Diff", "canonical_solution": "\ndef max_Abs_Diff(arr): \n    return max(arr) - min(arr)\n", "contract": "\n    assert isinstance(arr, (tuple, list)), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((9,3,2,5,1)) == 8\nassert max_Abs_Diff((3,2,1)) == 2\n", "base_input": [[[2, 1, 5, 3]], [[9, 3, 2, 5, 1]], [[3, 2, 1]]], "atol": 0}
{"task_id": 160, "prompt": "'''\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n'''", "test_imports": [], "test_list": ["assert find_solution(2, 3, 7) == (2, 1)", "assert find_solution(4, 2, 7) == None", "assert find_solution(1, 13, 17) == (4, 1)"], "entry_point": "find_solution", "canonical_solution": "\ndef find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None\n", "contract": "\n\tassert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(4, 2, 7) == None\nassert find_solution(1, 13, 17) == (4, 1)\n", "base_input": [[2, 3, 7], [4, 2, 7], [1, 13, 17]], "atol": 0}
{"task_id": 161, "prompt": "'''\nWrite a function to remove all elements from a given list present in another list.\n'''", "test_imports": [], "test_list": ["assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]", "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]"], "entry_point": "remove_elements", "canonical_solution": "\ndef remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]]], "atol": 0}
{"task_id": 162, "prompt": "'''\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n'''", "test_imports": [], "test_list": ["assert sum_series(6) == 12", "assert sum_series(10) == 30", "assert sum_series(9) == 25"], "entry_point": "sum_series", "canonical_solution": "\ndef sum_series(n):\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))\n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_series(0) == 0\nassert sum_series(6) == 12\nassert sum_series(10) == 30\nassert sum_series(9) == 25\n", "base_input": [[0], [6], [10], [9]], "atol": 0}
{"task_id": 163, "prompt": "'''\nWrite a function to calculate the area of a regular polygon given the length and number of its sides.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)", "assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)", "assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)"], "entry_point": "area_polygon", "canonical_solution": "\nfrom math import tan, pi\ndef area_polygon(s, l):\n  return s * (l ** 2) / (4 * tan(pi / s))\n", "contract": "\n  assert isinstance(s, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n  assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)\nassert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)\nassert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)\n", "base_input": [[4, 20], [10, 15], [9, 7]], "atol": 0.0001}
{"task_id": 164, "prompt": "'''\nWrite a function to determine if the sum of the divisors of two integers are the same.\n'''", "test_imports": [], "test_list": ["assert are_equivalent(36, 57) == False", "assert are_equivalent(2, 4) == False", "assert are_equivalent(23, 47) == True"], "entry_point": "are_equivalent", "canonical_solution": "\nimport math \ndef div_sum(n): \n  total = 1\n  i = 2\n  while i * i <= n:\n    if (n % i == 0):\n      total = total + i + n / i\n    i += 1\n  return total\ndef are_equivalent(num1, num2): \n  return div_sum(num1) == div_sum(num2); \n", "contract": "\n  assert isinstance(num1, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(num2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert num1 > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert num2 > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert are_equivalent(36, 57) == False\nassert are_equivalent(2, 4) == False\nassert are_equivalent(23, 47) == True\n", "base_input": [[36, 57], [2, 4], [23, 47]], "atol": 0}
{"task_id": 165, "prompt": "'''\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n'''", "test_imports": [], "test_list": ["assert count_char_position(\"xbcefg\") == 2", "assert count_char_position(\"ABcED\") == 3", "assert count_char_position(\"AbgdeF\") == 5"], "entry_point": "count_char_position", "canonical_solution": "\ndef count_char_position(str1): \n    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x.isalpha() for x in str1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5\n", "base_input": [["xbcefg"], ["ABcED"], ["AbgdeF"]], "atol": 0}
{"task_id": 166, "prompt": "'''\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n'''", "test_imports": [], "test_list": ["assert find_even_pair([5, 4, 7, 2, 1]) == 4", "assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9", "assert find_even_pair([1, 2, 3]) == 1"], "entry_point": "find_even_pair", "canonical_solution": "\ndef find_even_pair(A): \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])\n", "contract": "\n  assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9\nassert find_even_pair([1, 2, 3]) == 1\n", "base_input": [[[5, 4, 7, 2, 1]], [[7, 2, 8, 1, 0, 5, 11]], [[1, 2, 3]]], "atol": 0}
{"task_id": 167, "prompt": "'''\nWrite a python function to find the smallest power of 2 greater than or equal to n.\n'''", "test_imports": [], "test_list": ["assert next_power_of_2(0) == 1", "assert next_power_of_2(5) == 8", "assert next_power_of_2(17) == 32"], "entry_point": "next_power_of_2", "canonical_solution": "\ndef next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res; \n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert next_power_of_2(0) == 1\nassert next_power_of_2(5) == 8\nassert next_power_of_2(17) == 32\n", "base_input": [[0], [5], [17]], "atol": 0}
{"task_id": 168, "prompt": "'''\nWrite a function to count the number of occurrences of a number in a given list.\n'''", "test_imports": [], "test_list": ["assert frequency([1,2,3], 4) == 0", "assert frequency([1,2,2,3,3,3,4], 3) == 3", "assert frequency([0,1,2,3,1,2], 1) == 2"], "entry_point": "frequency", "canonical_solution": "\ndef frequency(a,x): \n    return a.count(x)\n", "contract": "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert frequency([1,2,3], 4) == 0\nassert frequency([1,2,2,3,3,3,4], 3) == 3\nassert frequency([0,1,2,3,1,2], 1) == 2\n", "base_input": [[[1, 2, 3], 4], [[1, 2, 2, 3, 3, 3, 4], 3], [[0, 1, 2, 3, 1, 2], 1]], "atol": 0}
{"task_id": 170, "prompt": "'''\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\n'''", "test_imports": [], "test_list": ["assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16", "assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38"], "entry_point": "sum_range_list", "canonical_solution": "\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m : n + 1])\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= m < len(list1), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n < len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n", "base_input": [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10]], "atol": 0}
{"task_id": 171, "prompt": "'''\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n'''", "test_imports": [], "test_list": ["assert perimeter_pentagon(5) == 25", "assert perimeter_pentagon(10) == 50", "assert perimeter_pentagon(15) == 75"], "entry_point": "perimeter_pentagon", "canonical_solution": "\ndef perimeter_pentagon(a):\n  return 5 * a\n", "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50\nassert perimeter_pentagon(15) == 75\n", "base_input": [[5], [10], [15]], "atol": 0}
{"task_id": 172, "prompt": "'''\nWrite a function to count the number of occurence of the string 'std' in a given string.\n'''", "test_imports": [], "test_list": ["assert count_occurance(\"letstdlenstdporstd\") == 3", "assert count_occurance(\"truststdsolensporsd\") == 1", "assert count_occurance(\"makestdsostdworthit\") == 2", "assert count_occurance(\"stds\") == 1", "assert count_occurance(\"\") == 0"], "entry_point": "count_occurance", "canonical_solution": "\ndef count_occurance(s):\n  return s.count('std')\n", "contract": "\n  assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2\nassert count_occurance(\"stds\") == 1\nassert count_occurance(\"\") == 0\n", "base_input": [["letstdlenstdporstd"], ["truststdsolensporsd"], ["makestdsostdworthit"], ["stds"], [""]], "atol": 0}
{"task_id": 222, "prompt": "'''\nWrite a function to check if all the elements in tuple have same data type or not.\n'''", "test_imports": [], "test_list": ["assert check_type((5, 6, 7, 3, 5, 6) ) == True", "assert check_type((1, 2, \"4\") ) == False", "assert check_type((3, 2, 1, 4, 5) ) == True"], "entry_point": "check_type", "canonical_solution": "\ndef check_type(test_tuple):\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)\n", "contract": "\n    assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(test_tuple) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True\n", "base_input": [[[5, 6, 7, 3, 5, 6]], [[1, 2, "4"]], [[3, 2, 1, 4, 5]]], "atol": 0}
{"task_id": 223, "prompt": "'''\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n'''", "test_imports": [], "test_list": ["assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True", "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False", "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "assert is_majority([1, 1, 2, 2], 5, 1) == False"], "entry_point": "is_majority", "canonical_solution": "\nfrom bisect import bisect_left, bisect_right\ndef is_majority(arr, n, x):\n\tif x not in arr:\n\t\treturn False\n\tl = bisect_left(arr, x)\n\tr = bisect_right(arr, x)\n\treturn r - l > n / 2\n", "contract": "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in arr), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(a <= b for a, b in zip(arr[:n], arr[1:n])), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) <= n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True\n", "base_input": [[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 2, 4, 4, 4, 6, 6], 8, 4], [[1, 1, 1, 2, 2], 5, 1]], "atol": 0}
{"task_id": 224, "prompt": "'''\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n'''", "test_imports": [], "test_list": ["assert count_Set_Bits(2) == 1", "assert count_Set_Bits(4) == 1", "assert count_Set_Bits(6) == 2"], "entry_point": "count_Set_Bits", "canonical_solution": "\ndef count_Set_Bits(n): \n    return bin(n)[2:].count('1')\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2\n", "base_input": [[2], [4], [6]], "atol": 0}
{"task_id": 226, "prompt": "'''\nWrite a python function to remove the characters which have odd index values of a given string.\n'''", "test_imports": [], "test_list": ["assert odd_values_string('abcdef') == 'ace'", "assert odd_values_string('python') == 'pto'", "assert odd_values_string('data') == 'dt'", "assert odd_values_string('lambs') == 'lms'"], "entry_point": "odd_values_string", "canonical_solution": "\ndef odd_values_string(str1):\n    return ''.join(str1[i] for i in range(0, len(str1), 2))\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'\nassert odd_values_string('lambs') == 'lms'\n", "base_input": [["abcdef"], ["python"], ["data"], ["lambs"]], "atol": 0}
{"task_id": 227, "prompt": "'''\nWrite a function to find minimum of three numbers.\n'''", "test_imports": [], "test_list": ["assert min_of_three(10,20,0)==0", "assert min_of_three(19,15,18)==15", "assert min_of_three(-10,-20,-30)==-30"], "entry_point": "min_of_three", "canonical_solution": "\ndef min_of_three(a,b,c): \n  return min(a, b, c)\n", "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30\n", "base_input": [[10, 20, 0], [19, 15, 18], [-10, -20, -30]], "atol": 0}
{"task_id": 228, "prompt": "'''\nWrite a python function to check whether all the bits are unset in the given range or not.\n'''", "test_imports": [], "test_list": ["assert all_Bits_Set_In_The_Given_Range(4,1,2) == True", "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True", "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"], "entry_point": "all_Bits_Set_In_The_Given_Range", "canonical_solution": "\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \n    new_num = n & num\n    return new_num == 0 \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 < r, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 < l <= r, \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False\n", "base_input": [[4, 1, 2], [17, 2, 4], [39, 4, 6]], "atol": 0}
{"task_id": 229, "prompt": "'''\nWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n'''", "test_imports": [], "test_list": ["assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]", "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]", "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"], "entry_point": "re_arrange_array", "canonical_solution": "\ndef re_arrange_array(arr, n):\n  negatives = [x for x in arr[:n] if x < 0]\n  positives = [x for x in arr[:n] if x >= 0]\n  return negatives + positives + arr[n:]\n", "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 2, 4, 5, 6, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n", "base_input": [[[-1, 2, -3, 4, 5, 6, -7, 8, 9], 9], [[12, -14, -26, 13, 15], 5], [[10, 24, 36, -42, -39, -78, 85], 7]], "atol": 0}
{"task_id": 230, "prompt": "'''\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n'''", "test_imports": [], "test_list": ["assert replace_blank(\"hello people\",'@')==(\"hello@people\")", "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")", "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"], "entry_point": "replace_blank", "canonical_solution": "\ndef replace_blank(str1, char):\n    return str1.replace(' ', char)\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(char, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(char) == 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")\n", "base_input": [["hello people", "@"], ["python program language", "$"], ["blank space", "-"]], "atol": 0}
{"task_id": 232, "prompt": "'''\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n'''", "test_imports": [], "test_list": ["assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])", "assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])"], "entry_point": "larg_nnum", "canonical_solution": "\nimport heapq\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n,list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])\n", "base_input": [[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2], [[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5], [[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3]], "atol": 0}
{"task_id": 233, "prompt": "'''\nWrite a function to find the lateral surface area of a cylinder.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)", "assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)"], "entry_point": "lateralsuface_cylinder", "canonical_solution": "\nimport math\ndef lateralsuface_cylinder(r, h):\n  return 2 * math.pi * r * h\n", "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)\nassert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)\n", "base_input": [[10, 5], [4, 5], [4, 10]], "atol": 0.0001}
{"task_id": 234, "prompt": "'''\nWrite a function to find the volume of a cube given its side length.\n'''", "test_imports": [], "test_list": ["assert volume_cube(3)==27", "assert volume_cube(2)==8", "assert volume_cube(5)==125"], "entry_point": "volume_cube", "canonical_solution": "\ndef volume_cube(l):\n  return l ** 3\n", "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125\n", "base_input": [[3], [2], [5]], "atol": 0}
{"task_id": 235, "prompt": "'''\nWrite a python function to set all even bits of a given number.\n'''", "test_imports": [], "test_list": ["assert even_bit_set_number(10) == 10", "assert even_bit_set_number(20) == 30", "assert even_bit_set_number(30) == 30"], "entry_point": "even_bit_set_number", "canonical_solution": "\ndef even_bit_set_number(n): \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30\n", "base_input": [[10], [20], [30]], "atol": 0}
{"task_id": 237, "prompt": "'''\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n'''", "test_imports": [], "test_list": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}", "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}", "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"], "entry_point": "check_occurences", "canonical_solution": "\nfrom collections import Counter \ndef check_occurences(test_list):\n  return dict(Counter(tuple(sorted(t)) for t in test_list))\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n", "base_input": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]], [[[4, 2], [2, 4], [3, 6], [6, 3], [7, 4]]], [[[13, 2], [11, 23], [12, 25], [25, 12], [16, 23]]]], "atol": 0}
{"task_id": 238, "prompt": "'''\nWrite a python function to count the number of non-empty substrings of a given string.\n'''", "test_imports": [], "test_list": ["assert number_of_substrings(\"abc\") == 6", "assert number_of_substrings(\"abcd\") == 10", "assert number_of_substrings(\"abcde\") == 15"], "entry_point": "number_of_substrings", "canonical_solution": "\ndef number_of_substrings(str1): \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2\n", "contract": "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15\n", "base_input": [["abc"], ["abcd"], ["abcde"]], "atol": 0}
{"task_id": 239, "prompt": "'''\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n'''", "test_imports": [], "test_list": ["assert get_total_number_of_sequences(10, 4) == 4", "assert get_total_number_of_sequences(5, 2) == 6", "assert get_total_number_of_sequences(16, 3) == 84"], "entry_point": "get_total_number_of_sequences", "canonical_solution": "\ndef get_total_number_of_sequences(m, n):\n\tT=[[0 for _ in range(n + 1)] for _ in range(m + 1)] \n\tfor i in range(m + 1): \n\t\tfor j in range(n + 1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j] = 0\n\t\t\telif i<j: \n\t\t\t\tT[i][j] = 0\n\t\t\telif j==1: \n\t\t\t\tT[i][j] = i \n\t\t\telse: \n\t\t\t\tT[i][j] = T[i-1][j] + T[i//2][j-1] \n\treturn T[m][n]\n", "contract": "\n\tassert isinstance(m, int) and m > 0, \"invalid inputs\" # $_CONTRACT_$ \n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84\n", "base_input": [[10, 4], [5, 2], [16, 3]], "atol": 0}
{"task_id": 240, "prompt": "'''\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n'''", "test_imports": [], "test_list": ["assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]", "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]", "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"], "entry_point": "replace_list", "canonical_solution": "\ndef replace_list(list1, list2):\n    return list1[:-1] + list2\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]\n", "base_input": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5], [5, 6, 7, 8]], [["red", "blue", "green"], ["yellow"]]], "atol": 0}
{"task_id": 242, "prompt": "'''\nWrite a function to count the total number of characters in a string.\n'''", "test_imports": [], "test_list": ["assert count_charac(\"python programming\")==18", "assert count_charac(\"language\")==8", "assert count_charac(\"words\")==5"], "entry_point": "count_charac", "canonical_solution": "\ndef count_charac(str1):\n    return len(str1)\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5\n", "base_input": [["python programming"], ["language"], ["words"]], "atol": 0}
{"task_id": 244, "prompt": "'''\nWrite a python function to find the next perfect square greater than a given number.\n'''", "test_imports": [], "test_list": ["assert next_Perfect_Square(35) == 36", "assert next_Perfect_Square(6) == 9", "assert next_Perfect_Square(9) == 16"], "entry_point": "next_Perfect_Square", "canonical_solution": "\nimport math  \ndef next_Perfect_Square(N): \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN \n", "contract": "\n    assert isinstance(N, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16\n", "base_input": [[35], [6], [9]], "atol": 0}
{"task_id": 245, "prompt": "'''\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n'''", "test_imports": [], "test_list": ["assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194", "assert max_sum([80, 60, 30, 40, 20, 10]) == 210", "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138"], "entry_point": "max_sum", "canonical_solution": "\ndef max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum\n", "contract": "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\nassert max_sum([80, 60, 30, 40, 20, 10]) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138\n", "base_input": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]], [[80, 60, 30, 40, 20, 10]], [[2, 3, 14, 16, 21, 23, 29, 30]]], "atol": 0}
{"task_id": 246, "prompt": "'''\nWrite a function for computing square roots using the babylonian method.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)", "assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)"], "entry_point": "babylonian_squareroot", "canonical_solution": "\ndef babylonian_squareroot(number):\n    if(number == 0):\n        return 0\n    g = number/2.0\n    g2 = g + 1\n    while(g != g2):\n        n = number/ g\n        g2 = g\n        g = (g + n)/2\n    return g\n", "contract": "\n    assert isinstance(number, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)\nassert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)\n", "base_input": [[10], [2], [9]], "atol": 0.0001}
{"task_id": 247, "prompt": "'''\nWrite a function to find the length of the longest palindromic subsequence in the given string.\n'''", "test_imports": [], "test_list": ["assert lps(\"TENS FOR TENS\") == 5", "assert lps(\"CARDIO FOR CARDS\") == 7", "assert lps(\"PART OF THE JOURNEY IS PART\") == 9"], "entry_point": "lps", "canonical_solution": "\ndef lps(str1): \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]\n", "contract": "\n\tassert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9\n", "base_input": [["TENS FOR TENS"], ["CARDIO FOR CARDS"], ["PART OF THE JOURNEY IS PART"]], "atol": 0}
{"task_id": 248, "prompt": "'''\nWrite a function that takes in an integer n and calculates the harmonic sum of n-1.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)", "assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)", "assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)"], "entry_point": "harmonic_sum", "canonical_solution": "\ndef harmonic_sum(n):\n  return sum(1/(i + 1) for i in range(n))\n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)\nassert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)\nassert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)\n", "base_input": [[7], [4], [19]], "atol": 0.0001}
{"task_id": 249, "prompt": "'''\nWrite a function to find the intersection of two arrays.\n'''", "test_imports": [], "test_list": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]", "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"], "entry_point": "intersection_array", "canonical_solution": "\ndef intersection_array(array_nums1,array_nums2):\n    return list(set(array_nums1) & set(array_nums2))\n", "contract": "\n    assert isinstance(array_nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(array_nums2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])) == set([1, 2, 8, 9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])) == set([3,5,7,9])\nassert set(intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])) == set([10])\n", "base_input": [[[1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]], [[1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]], [[1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]]], "atol": 0}
{"task_id": 250, "prompt": "'''\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n'''", "test_imports": [], "test_list": ["assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3", "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"], "entry_point": "count_X", "canonical_solution": "\ndef count_X(tup, x): \n    return tup.count(x)\n", "contract": "\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4\n", "base_input": [[[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4], [[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10], [[10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8]], "atol": 0}
{"task_id": 251, "prompt": "'''\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n'''", "test_imports": [], "test_list": ["assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']", "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']", "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']"], "entry_point": "insert_element", "canonical_solution": "\ndef insert_element(list1, element):\n    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']\nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']\n", "base_input": [[["Red", "Green", "Black"], "c"], [["python", "java"], "program"], [["happy", "sad"], "laugh"]], "atol": 0}
{"task_id": 252, "prompt": "'''\nWrite a python function to convert complex numbers to polar coordinates.\n'''", "test_imports": [], "test_list": ["assert convert(1) == (1.0, 0.0)", "assert convert(4) == (4.0,0.0)", "assert convert(5) == (5.0,0.0)"], "entry_point": "convert", "canonical_solution": "\nimport cmath  \ndef convert(numbers):    \n  return cmath.polar(numbers)  \n", "contract": "\n  assert isinstance(numbers, (int, float, complex)), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)\n", "base_input": [[1], [4], [5]], "atol": 0}
{"task_id": 253, "prompt": "'''\nWrite a python function that returns the number of integer elements in a given list.\n'''", "test_imports": [], "test_list": ["assert count_integer([1,2,'abc',1.2]) == 2", "assert count_integer([1,2,3]) == 3", "assert count_integer([1,1.2,4,5.1]) == 2"], "entry_point": "count_integer", "canonical_solution": "\ndef count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2\n", "base_input": [[[1, 2, "abc", 1.2]], [[1, 2, 3]], [[1, 1.2, 4, 5.1]]], "atol": 0}
{"task_id": 255, "prompt": "'''\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n'''", "test_imports": [], "test_list": ["assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]", "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"], "entry_point": "combinations_colors", "canonical_solution": "\nfrom itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))\n", "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n", "base_input": [[["Red", "Green", "Blue"], 1], [["Red", "Green", "Blue"], 2], [["Red", "Green", "Blue"], 3]], "atol": 0}
{"task_id": 256, "prompt": "'''\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n'''", "test_imports": [], "test_list": ["assert count_Primes_nums(5) == 2", "assert count_Primes_nums(10) == 4", "assert count_Primes_nums(100) == 25"], "entry_point": "count_Primes_nums", "canonical_solution": "\ndef count_Primes_nums(n):\n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))\n", "contract": "\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$  \n", "assertion": "\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25\n", "base_input": [[5], [10], [100]], "atol": 0}
{"task_id": 257, "prompt": "'''\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\n'''", "test_imports": [], "test_list": ["assert swap_numbers(10,20)==(20,10)", "assert swap_numbers(15,17)==(17,15)", "assert swap_numbers(100,200)==(200,100)"], "entry_point": "swap_numbers", "canonical_solution": "\ndef swap_numbers(a,b):\n    return (b, a)\n", "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)\n", "base_input": [[10, 20], [15, 17], [100, 200]], "atol": 0}
{"task_id": 259, "prompt": "'''\nWrite a function to maximize the given two tuples.\n'''", "test_imports": [], "test_list": ["assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))", "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))", "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"], "entry_point": "maximize_elements", "canonical_solution": "\ndef maximize_elements(test_tup1, test_tup2):\n  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == 2 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(a, (int, float)) and isinstance(b, (int, float)) for a, b in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n", "base_input": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]], [[[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]], [[[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]]], "atol": 0}
{"task_id": 260, "prompt": "'''\nWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n'''", "test_imports": [], "test_list": ["assert newman_prime(3) == 7", "assert newman_prime(4) == 17", "assert newman_prime(5) == 41"], "entry_point": "newman_prime", "canonical_solution": "\ndef newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert newman_prime(3) == 7\nassert newman_prime(4) == 17\nassert newman_prime(5) == 41\n", "base_input": [[3], [4], [5]], "atol": 0}
{"task_id": 261, "prompt": "'''\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n'''", "test_imports": [], "test_list": ["assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)", "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)", "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"], "entry_point": "division_elements", "canonical_solution": "\ndef division_elements(test_tup1, test_tup2):\n  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) and ele != 0 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)\n", "base_input": [[[10, 4, 6, 9], [5, 2, 3, 3]], [[12, 6, 8, 16], [6, 3, 4, 4]], [[20, 14, 36, 18], [5, 7, 6, 9]]], "atol": 0}
{"task_id": 262, "prompt": "'''\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n'''", "test_imports": [], "test_list": ["assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])", "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])", "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"], "entry_point": "split_two_parts", "canonical_solution": "\ndef split_two_parts(list1, L):\n    return list1[:L], list1[L:]\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(L, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= L <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n", "base_input": [[[1, 1, 2, 3, 4, 4, 5, 1], 3], [["a", "b", "c", "d"], 2], [["p", "y", "t", "h", "o", "n"], 4]], "atol": 0}
{"task_id": 264, "prompt": "'''\nWrite a function to calculate a dog's age in dog's years.\n'''", "test_imports": [], "test_list": ["assert dog_age(12)==61", "assert dog_age(15)==73", "assert dog_age(24)==109"], "entry_point": "dog_age", "canonical_solution": "\ndef dog_age(h_age):\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age\n", "contract": "\n\tassert isinstance(h_age, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert h_age >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109\n", "base_input": [[12], [15], [24]], "atol": 0}
{"task_id": 265, "prompt": "'''\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n'''", "test_imports": [], "test_list": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]", "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]", "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"], "entry_point": "list_split", "canonical_solution": "\ndef list_split(S, step):\n    return [S[i::step] for i in range(step)]\n", "contract": "\n    assert isinstance(S, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(step, int), \"invalid inputs\" # $_CONTRACT_$\n    assert step > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]\nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n", "base_input": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3], [["python", "java", "C", "C++", "DBMS", "SQL"], 2]], "atol": 0}
{"task_id": 266, "prompt": "'''\nWrite a function to find the lateral surface area of a cube given its side length.\n'''", "test_imports": [], "test_list": ["assert lateralsurface_cube(5)==100", "assert lateralsurface_cube(9)==324", "assert lateralsurface_cube(10)==400"], "entry_point": "lateralsurface_cube", "canonical_solution": "\ndef lateralsurface_cube(l):\n  return 4 * l * l\n", "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400\n", "base_input": [[5], [9], [10]], "atol": 0}
{"task_id": 267, "prompt": "'''\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n'''", "test_imports": [], "test_list": ["assert square_Sum(2) == 10", "assert square_Sum(3) == 35", "assert square_Sum(4) == 84"], "entry_point": "square_Sum", "canonical_solution": "\ndef square_Sum(n):  \n    return n * (4 * n * n - 1) / 3\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84\n", "base_input": [[2], [3], [4]], "atol": 0}
{"task_id": 268, "prompt": "'''\nWrite a function to find the n'th star number.\n'''", "test_imports": [], "test_list": ["assert find_star_num(3) == 37", "assert find_star_num(4) == 73", "assert find_star_num(5) == 121"], "entry_point": "find_star_num", "canonical_solution": "\ndef find_star_num(n): \n\treturn 6 * n * (n - 1) + 1 \n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121\n", "base_input": [[3], [4], [5]], "atol": 0}
{"task_id": 269, "prompt": "'''\nWrite a function to find the ascii value of a character.\n'''", "test_imports": [], "test_list": ["assert ascii_value('A')==65", "assert ascii_value('R')==82", "assert ascii_value('S')==83"], "entry_point": "ascii_value", "canonical_solution": "\ndef ascii_value(k):\n  return ord(k)\n", "contract": "\n  assert isinstance(k, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(k)==1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83\n", "base_input": [["A"], ["R"], ["S"]], "atol": 0}
{"task_id": 270, "prompt": "'''\nWrite a python function to find the sum of even numbers at even positions of a list.\n'''", "test_imports": [], "test_list": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30", "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26", "assert sum_even_and_even_index([5, 6, 12, 1]) == 12"], "entry_point": "sum_even_and_even_index", "canonical_solution": "\ndef sum_even_and_even_index(arr):  \n    return sum(x for x in arr[::2] if x % 2 == 0)\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\nassert sum_even_and_even_index([5, 6, 12, 1]) == 12\n", "base_input": [[[5, 6, 12, 1, 18, 8]], [[3, 20, 17, 9, 2, 10, 18, 13, 6, 18]], [[5, 6, 12, 1]]], "atol": 0}
{"task_id": 271, "prompt": "'''\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n'''", "test_imports": [], "test_list": ["assert even_Power_Sum(2) == 1056", "assert even_Power_Sum(3) == 8832", "assert even_Power_Sum(1) == 32"], "entry_point": "even_Power_Sum", "canonical_solution": "\ndef even_Power_Sum(n): \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32\n", "base_input": [[2], [3], [1]], "atol": 0}
{"task_id": 272, "prompt": "'''\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n'''", "test_imports": [], "test_list": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]", "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]", "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"], "entry_point": "rear_extract", "canonical_solution": "\ndef rear_extract(test_list):\n  return [x[-1] for x in test_list]\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) and len(x) > 0 for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n", "base_input": [[[[1, "Rash", 21], [2, "Varsha", 20], [3, "Kil", 19]]], [[[1, "Sai", 36], [2, "Ayesha", 25], [3, "Salman", 45]]], [[[1, "Sudeep", 14], [2, "Vandana", 36], [3, "Dawood", 56]]]], "atol": 0}
{"task_id": 273, "prompt": "'''\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n'''", "test_imports": [], "test_list": ["assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)", "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)", "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"], "entry_point": "substract_elements", "canonical_solution": "\ndef substract_elements(test_tup1, test_tup2):\n  return tuple(x - y for x, y in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n", "base_input": [[[10, 4, 5], [2, 5, 18]], [[11, 2, 3], [24, 45, 16]], [[7, 18, 9], [10, 11, 12]]], "atol": 0}
{"task_id": 274, "prompt": "'''\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n'''", "test_imports": [], "test_list": ["assert even_binomial_Coeff_Sum(4) == 8", "assert even_binomial_Coeff_Sum(6) == 32", "assert even_binomial_Coeff_Sum(2) == 2"], "entry_point": "even_binomial_Coeff_Sum", "canonical_solution": "\nimport math  \ndef even_binomial_Coeff_Sum( n): \n    return 1 << (n - 1)\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2\n", "base_input": [[4], [6], [2]], "atol": 0}
{"task_id": 276, "prompt": "'''\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)", "assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)"], "entry_point": "volume_cylinder", "canonical_solution": "\nimport math\ndef volume_cylinder(r,h):\n  return math.pi * r * r * h\n", "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)\nassert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)\n", "base_input": [[10, 5], [4, 5], [4, 10]], "atol": 0.0001}
{"task_id": 277, "prompt": "'''\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n'''", "test_imports": [], "test_list": ["assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}", "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"], "entry_point": "dict_filter", "canonical_solution": "\ndef dict_filter(dict1, n):\n    return {key : value for (key, value) in dict1.items() if value >=n}\n", "contract": "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}\n", "base_input": [[{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 170], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 180], [{"Cierra Vega": 175, "Alden Cantrell": 180, "Kierra Gentry": 165, "Pierre Cox": 190}, 190]], "atol": 0}
{"task_id": 278, "prompt": "'''\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\n'''", "test_imports": [], "test_list": ["assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3", "assert count_first_elements((2, 9, (5, 7), 11) ) == 2", "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"], "entry_point": "count_first_elements", "canonical_solution": "\ndef count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return count\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4\n", "base_input": [[[1, 5, 7, [4, 6], 10]], [[2, 9, [5, 7], 11]], [[11, 15, 5, 8, [2, 3], 8]]], "atol": 0}
{"task_id": 279, "prompt": "'''\nWrite a function to find the nth decagonal number.\n'''", "test_imports": [], "test_list": ["assert is_num_decagonal(3) == 27", "assert is_num_decagonal(7) == 175", "assert is_num_decagonal(10) == 370"], "entry_point": "is_num_decagonal", "canonical_solution": "\ndef is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n \n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370\n", "base_input": [[3], [7], [10]], "atol": 0}
{"task_id": 280, "prompt": "'''\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n'''", "test_imports": [], "test_list": ["assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)", "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)", "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"], "entry_point": "sequential_search", "canonical_solution": "\ndef sequential_search(dlist, item):\n    return item in dlist, (dlist.index(item) if item in dlist else -1)\n", "contract": "\n    assert isinstance(dlist, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n", "base_input": [[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[12, 32, 45, 62, 35, 47, 44, 61], 61], [[9, 10, 17, 19, 22, 39, 48, 56], 48]], "atol": 0}
{"task_id": 281, "prompt": "'''\nWrite a python function to check if the elements of a given list are unique or not.\n'''", "test_imports": [], "test_list": ["assert all_unique([1,2,3]) == True", "assert all_unique([1,2,1,2]) == False", "assert all_unique([1,2,3,4,5]) == True"], "entry_point": "all_unique", "canonical_solution": "\ndef all_unique(test_list):\n    return len(test_list) == len(set(test_list))\n", "contract": "\n    assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True\n", "base_input": [[[1, 2, 3]], [[1, 2, 1, 2]], [[1, 2, 3, 4, 5]]], "atol": 0}
{"task_id": 282, "prompt": "'''\nWrite a function to subtract two lists element-wise.\n'''", "test_imports": [], "test_list": ["assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]", "assert sub_list([1,2],[3,4])==[-2,-2]", "assert sub_list([90,120],[50,70])==[40,50]"], "entry_point": "sub_list", "canonical_solution": "\ndef sub_list(nums1,nums2):\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n", "contract": "\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(num, (int, float)) for num in nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]\n", "base_input": [[[1, 2, 3], [4, 5, 6]], [[1, 2], [3, 4]], [[90, 120], [50, 70]]], "atol": 0}
{"task_id": 283, "prompt": "'''\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n'''", "test_imports": [], "test_list": ["assert validate(1234) == True", "assert validate(51241) == False", "assert validate(321) == True"], "entry_point": "validate", "canonical_solution": "\ndef validate(n): \n    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True\n", "base_input": [[1234], [51241], [321]], "atol": 0}
{"task_id": 284, "prompt": "'''\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n'''", "test_imports": [], "test_list": ["assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False", "assert check_element([1,2,3,4],7)==False", "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"], "entry_point": "check_element", "canonical_solution": "\ndef check_element(list1, element):\n  return all(v == element for v in list1)\n", "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, type(element)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\n", "base_input": [[["green", "orange", "black", "white"], "blue"], [[1, 2, 3, 4], 7], [["green", "green", "green", "green"], "green"]], "atol": 0}
{"task_id": 285, "prompt": "'''\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n'''", "test_imports": [], "test_list": ["assert text_match_two_three(\"ac\")==(False)", "assert text_match_two_three(\"dc\")==(False)", "assert text_match_two_three(\"abbbba\")==(True)"], "entry_point": "text_match_two_three", "canonical_solution": "\nimport re\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None\n", "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_two_three(\"ac\")==(False)\nassert text_match_two_three(\"dc\")==(False)\nassert text_match_two_three(\"abbbba\")==(True)\n", "base_input": [["ac"], ["dc"], ["abbbba"]], "atol": 0}
{"task_id": 286, "prompt": "'''\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n'''", "test_imports": [], "test_list": ["assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30", "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59", "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"], "entry_point": "max_sub_array_sum_repeated", "canonical_solution": "\ndef max_sub_array_sum_repeated(a, n, k): \n\tmodifed = a * k\n\tpre = 0\t# dp[i-1]\n\tres = modifed[0]\n\tfor n in modifed:\n\t\tpre = max(pre + n, n)\n\t\tres = max(pre, res)\n\treturn res\n", "contract": "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int) and n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int) and k >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1\n", "base_input": [[[10, 20, -30, -1], 4, 3], [[-1, 10, 20], 3, 2], [[-1, -2, -3], 3, 3]], "atol": 0}
{"task_id": 287, "prompt": "'''\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n'''", "test_imports": [], "test_list": ["assert square_Sum(2) == 20", "assert square_Sum(3) == 56", "assert square_Sum(4) == 120"], "entry_point": "square_Sum", "canonical_solution": "\ndef square_Sum(n):  \n    return 2 * n * (n + 1) * (2 * n + 1) /3\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120\n", "base_input": [[2], [3], [4]], "atol": 0}
{"task_id": 290, "prompt": "'''\nWrite a function to find the list of maximum length in a list of lists.\n'''", "test_imports": [], "test_list": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])", "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"], "entry_point": "max_length", "canonical_solution": "\ndef max_length(list1):\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])\n", "base_input": [[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1], [5, 7], [10, 12, 14, 15]]], [[[5], [15, 20, 25]]]], "atol": 0}
{"task_id": 291, "prompt": "'''\nWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n'''", "test_imports": [], "test_list": ["assert count_no_of_ways(2, 4) == 16", "assert count_no_of_ways(3, 2) == 6", "assert count_no_of_ways(4, 4) == 228"], "entry_point": "count_no_of_ways", "canonical_solution": "\ndef count_no_of_ways(n, k): \n\tmod = 1000000007\n\tif n == 1:\n\t\treturn k\n\ta = k \n\tb = k * k\t \n\tfor _ in range(2, n):\n\t\ta, b = b, ((k - 1) * (a + b)) % mod\n\treturn b\n", "contract": "\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int) and k > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228\n", "base_input": [[2, 4], [3, 2], [4, 4]], "atol": 0}
{"task_id": 292, "prompt": "'''\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n'''", "test_imports": [], "test_list": ["assert find(10,3) == 3", "assert find(4,2) == 2", "assert find(20,5) == 4"], "entry_point": "find", "canonical_solution": "\ndef find(n,m):  \n    return n // m \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n    assert m != 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4\n", "base_input": [[10, 3], [4, 2], [20, 5]], "atol": 0}
{"task_id": 293, "prompt": "'''\nWrite a function to find the third side of a right angled triangle.\n'''", "test_imports": [], "test_list": ["assert otherside_rightangle(7,8)==10.63014581273465", "assert otherside_rightangle(3,4)==5", "assert otherside_rightangle(7,15)==16.55294535724685"], "entry_point": "otherside_rightangle", "canonical_solution": "\nimport math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w * w + h * h)\n", "contract": "\n  assert isinstance(w, (int, float)) and w > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)) and h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(otherside_rightangle(7,8), 10.63014581273465, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(3,4), 5, rel_tol=0.001)\nassert math.isclose(otherside_rightangle(7,15), 16.55294535724685, rel_tol=0.001)\n", "base_input": [[7, 8], [3, 4], [7, 15]], "atol": 0.0001}
{"task_id": 294, "prompt": "'''\nWrite a function to find the maximum value in a given heterogeneous list.\n'''", "test_imports": [], "test_list": ["assert max_val(['Python', 3, 2, 4, 5, 'version'])==5", "assert max_val(['Python', 15, 20, 25])==25", "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"], "entry_point": "max_val", "canonical_solution": "\ndef max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val\n", "contract": "\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50\n", "base_input": [[["Python", 3, 2, 4, 5, "version"]], [["Python", 15, 20, 25]], [["Python", 30, 20, 40, 50, "version"]]], "atol": 0}
{"task_id": 295, "prompt": "'''\nWrite a function to return the sum of all divisors of a number.\n'''", "test_imports": [], "test_list": ["assert sum_div(8)==7", "assert sum_div(12)==16", "assert sum_div(7)==1"], "entry_point": "sum_div", "canonical_solution": "\ndef sum_div(number):\n    res = 1\n    i = 2\n    while i * i <= number:\n        if number % i == 0:\n            res += i\n            if i * i != number:\n                res += number / i\n        i += 1\n    return res\n", "contract": "\n    assert isinstance(number, int) and number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1\n", "base_input": [[8], [12], [7]], "atol": 0}
{"task_id": 296, "prompt": "'''\nWrite a python function to count inversions in an array.\n'''", "test_imports": [], "test_list": ["assert get_Inv_Count([1,20,6,4,5]) == 5", "assert get_Inv_Count([1,2,1]) == 1", "assert get_Inv_Count([1,2,5,6,1]) == 3"], "entry_point": "get_Inv_Count", "canonical_solution": "\ndef get_Inv_Count(arr): \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count \n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,1]) == 1\nassert get_Inv_Count([1,2,5,6,1]) == 3\n", "base_input": [[[1, 20, 6, 4, 5]], [[1, 2, 1]], [[1, 2, 5, 6, 1]]], "atol": 0}
{"task_id": 297, "prompt": "'''\nWrite a function to flatten a given nested list structure.\n'''", "test_imports": [], "test_list": ["assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]", "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]", "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"], "entry_point": "flatten_list", "canonical_solution": "\ndef flatten_list(list1):\n\tresult = []\n\tfor item in list1:\n\t\tif isinstance(item, list):\n\t\t\tresult.extend(flatten_list(item))\n\t\telse:\n\t\t\tresult.append(item)\n\treturn result\n", "contract": "\n\tdef list_check(l): # $_CONTRACT_$\n\t\tif not isinstance(l, list): # $_CONTRACT_$\n\t\t\treturn isinstance(l, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(list_check(item) for item in l) # $_CONTRACT_$\n\tassert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert list_check(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n", "base_input": [[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]], [[[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], "atol": 0}
{"task_id": 299, "prompt": "'''\nWrite a function to calculate the maximum aggregate from the list of tuples.\n'''", "test_imports": [], "test_list": ["assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)", "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)", "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"], "entry_point": "max_aggregate", "canonical_solution": "\nfrom collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])\n", "contract": "\n    assert isinstance(stdata, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x[1], (int, float)) for x in stdata), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)\n", "base_input": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]], [[["Juan Whelan", 50], ["Sabah Colley", 48], ["Peter Nichols", 37], ["Juan Whelan", 22], ["Sabah Colley", 14]]], [[["Juan Whelan", 10], ["Sabah Colley", 20], ["Peter Nichols", 30], ["Juan Whelan", 40], ["Sabah Colley", 50]]]], "atol": 0}
{"task_id": 300, "prompt": "'''\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)", "assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)"], "entry_point": "count_binary_seq", "canonical_solution": "\ndef count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res \n", "contract": "\n\tassert isinstance(n, int) and n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)\n", "base_input": [[1], [2], [3]], "atol": 0.0001}
{"task_id": 301, "prompt": "'''\nWrite a function to find the depth of a dictionary.\n'''", "test_imports": [], "test_list": ["assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4", "assert dict_depth({'a':1, 'b': {'c':'python'}})==2", "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"], "entry_point": "dict_depth", "canonical_solution": "\ndef dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    return dict_depth_aux(d)\n", "contract": "\n    assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3\n", "base_input": [[{"a": 1, "b": {"c": {"d": {}}}}], [{"a": 1, "b": {"c": "python"}}], [{"1": "Sun", "2": {"3": {"4": "Mon"}}}]], "atol": 0}
{"task_id": 304, "prompt": "'''\nWrite a python function to find element at a given index after number of rotations.\n'''", "test_imports": [], "test_list": ["assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3", "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3", "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"], "entry_point": "find_Element", "canonical_solution": "\ndef find_Element(arr,ranges,rotations,index) :  \n    for i in range(rotations - 1,-1,-1 ) : \n        left = ranges[i][0] \n        right = ranges[i][1] \n        if (left <= index and right >= index) : \n            if (index == left) : \n                index = right \n            else : \n                index = index - 1 \n    return arr[index] \n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ranges, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) and len(x) == 2 for x in ranges), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for ra in ranges for x in ra), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(rotations, int), \"invalid inputs\" # $_CONTRACT_$\n    assert rotations >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(index, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= index < len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n", "base_input": [[[1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1], [[1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2], [[1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1]], "atol": 0}
{"task_id": 305, "prompt": "'''\nWrite a function to return two words from a list of words starting with letter 'p'.\n'''", "test_imports": [], "test_list": ["assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')", "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')", "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"], "entry_point": "start_withp", "canonical_solution": "\nimport re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()\n", "contract": "\n    assert isinstance(words, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in words), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')\n", "base_input": [[["Python PHP", "Java JavaScript", "c c++"]], [["Python Programming", "Java Programming"]], [["Pqrst Pqr", "qrstuv"]]], "atol": 0}
{"task_id": 306, "prompt": "'''\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n'''", "test_imports": [], "test_list": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11", "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7", "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"], "entry_point": "max_sum_increasing_subseq", "canonical_solution": "\ndef max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]\n", "contract": "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n == len(a), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(index, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 <= index < n, \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert index < k < n, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n", "base_input": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[1, 101, 2, 3, 100, 4, 5], 7, 2, 5], [[11, 15, 19, 21, 26, 28, 31], 7, 2, 4]], "atol": 0}
{"task_id": 307, "prompt": "'''\nWrite a function to get a colon of a tuple.\n'''", "test_imports": [], "test_list": ["assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))", "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"], "entry_point": "colon_tuplex", "canonical_solution": "\nfrom copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n  tuplex_colon = deepcopy(tuplex)\n  tuplex_colon[m].append(n)\n  return tuplex_colon\n", "contract": "\n  assert isinstance(tuplex, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m < len(tuplex), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(tuplex[m], list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True)\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)\n", "base_input": [[["HELLO", 5, [], true], 2, 50], [["HELLO", 5, [], true], 2, 100], [["HELLO", 5, [], true], 2, 500]], "atol": 0}
{"task_id": 308, "prompt": "'''\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n'''", "test_imports": [], "test_list": ["assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]", "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"], "entry_point": "large_product", "canonical_solution": "\ndef large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result\n", "contract": "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= N <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]\n", "base_input": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4], [[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5]], "atol": 0}
{"task_id": 309, "prompt": "'''\nWrite a python function to find the maximum of two numbers.\n'''", "test_imports": [], "test_list": ["assert maximum(5,10) == 10", "assert maximum(-1,-2) == -1", "assert maximum(9,7) == 9"], "entry_point": "maximum", "canonical_solution": "\ndef maximum(a,b):   \n    return max(a, b)\n", "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9\n", "base_input": [[5, 10], [-1, -2], [9, 7]], "atol": 0}
{"task_id": 310, "prompt": "'''\nWrite a function to convert a given string to a tuple of characters.\n'''", "test_imports": [], "test_list": ["assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')", "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')", "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"], "entry_point": "string_to_tuple", "canonical_solution": "\ndef string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')\n", "base_input": [["python 3.0"], ["item1"], ["15.10"]], "atol": 0}
{"task_id": 311, "prompt": "'''\nWrite a python function to set the left most unset bit.\n'''", "test_imports": [], "test_list": ["assert set_left_most_unset_bit(10) == 14", "assert set_left_most_unset_bit(12) == 14", "assert set_left_most_unset_bit(15) == 15"], "entry_point": "set_left_most_unset_bit", "canonical_solution": "\ndef set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos))) \n", "contract": "\n    assert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15\n", "base_input": [[10], [12], [15]], "atol": 0}
{"task_id": 312, "prompt": "'''\nWrite a function to find the volume of a cone.\n'''", "test_imports": ["import math"], "test_list": ["assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)", "assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)", "assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)"], "entry_point": "volume_cone", "canonical_solution": "\nimport math\ndef volume_cone(r,h):\n  return (1.0 / 3) * math.pi * r * r * h\n", "contract": "\n  assert isinstance(r, (int, float)) and r > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "import math\n\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\nassert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)\nassert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)\n", "base_input": [[5, 12], [10, 15], [19, 17]], "atol": 0.0001}
{"task_id": 388, "prompt": "'''\nWrite a python function to find the highest power of 2 that is less than or equal to n.\n'''", "test_imports": [], "test_list": ["assert highest_Power_of_2(10) == 8", "assert highest_Power_of_2(19) == 16", "assert highest_Power_of_2(32) == 32"], "entry_point": "highest_Power_of_2", "canonical_solution": "\ndef highest_Power_of_2(n): \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32\n", "base_input": [[10], [19], [32]], "atol": 0}
{"task_id": 389, "prompt": "'''\nWrite a function to find the n'th lucas number.\n'''", "test_imports": [], "test_list": ["assert find_lucas(9) == 76", "assert find_lucas(4) == 7", "assert find_lucas(3) == 4"], "entry_point": "find_lucas", "canonical_solution": "\ndef find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2) \n", "contract": "\n\tassert isinstance(n, int) and n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4\n", "base_input": [[9], [4], [3]], "atol": 0}
{"task_id": 390, "prompt": "'''\nWrite a function to apply a given format string to all of the elements in a list.\n'''", "test_imports": [], "test_list": ["assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']", "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']", "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"], "entry_point": "add_string", "canonical_solution": "\ndef add_string(list_, string):\n    return [string.format(i) for i in  list_]\n", "contract": "\n    assert isinstance(list_, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']\n", "base_input": [[[1, 2, 3, 4], "temp{0}"], [["a", "b", "c", "d"], "python{0}"], [[5, 6, 7, 8], "string{0}"]], "atol": 0}
{"task_id": 391, "prompt": "'''\nWrite a function to convert more than one list to nested dictionary.\n'''", "test_imports": [], "test_list": ["assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]", "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]", "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"], "entry_point": "convert_list_dictionary", "canonical_solution": "\ndef convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result\n", "contract": "\n     assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n     assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]\n", "base_input": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [85, 98, 89, 92]], [["abc", "def", "ghi", "jkl"], ["python", "program", "language", "programs"], [100, 200, 300, 400]], [["A1", "A2", "A3", "A4"], ["java", "C", "C++", "DBMS"], [10, 20, 30, 40]]], "atol": 0}
{"task_id": 392, "prompt": "'''\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n'''", "test_imports": [], "test_list": ["assert get_max_sum(60) == 106", "assert get_max_sum(10) == 12", "assert get_max_sum(2) == 2"], "entry_point": "get_max_sum", "canonical_solution": "\ndef get_max_sum (n):\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2\n", "base_input": [[60], [10], [2]], "atol": 0}
{"task_id": 393, "prompt": "'''\nWrite a function to find the list with maximum length.\n'''", "test_imports": [], "test_list": ["assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])", "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])", "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"], "entry_point": "max_length_list", "canonical_solution": "\ndef max_length_list(input_list):\n    if not input_list:\n        return (0, [])\n    return max([(len(x), x) for x in input_list], key=lambda x: x[0])\n", "contract": "\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in input_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])\n", "base_input": [[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]]], [[[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]]], "atol": 0}
{"task_id": 394, "prompt": "'''\nWrite a function to check if given tuple contains no duplicates.\n'''", "test_imports": [], "test_list": ["assert check_distinct((1, 4, 5, 6, 1, 4)) == False", "assert check_distinct((1, 4, 5, 6)) == True", "assert check_distinct((2, 3, 4, 5, 6)) == True"], "entry_point": "check_distinct", "canonical_solution": "\ndef check_distinct(test_tup):\n  return len(test_tup) == len(set(test_tup))\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True\n", "base_input": [[[1, 4, 5, 6, 1, 4]], [[1, 4, 5, 6]], [[2, 3, 4, 5, 6]]], "atol": 0}
{"task_id": 395, "prompt": "'''\nWrite a python function to find the first non-repeated character in a given string.\n'''", "test_imports": [], "test_list": ["assert first_non_repeating_character(\"abcabc\") == None", "assert first_non_repeating_character(\"abc\") == \"a\"", "assert first_non_repeating_character(\"ababc\") == \"c\""], "entry_point": "first_non_repeating_character", "canonical_solution": "\ndef first_non_repeating_character(str1):\n  for ch in str1:\n    if str1.count(ch) == 1:\n      return ch\n  return None\n", "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(str1) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"\n", "base_input": [["abcabc"], ["abc"], ["ababc"]], "atol": 0}
{"task_id": 396, "prompt": "'''\nWrite a function to check whether the given string starts and ends with the same character or not.\n'''", "test_imports": [], "test_list": ["assert check_char(\"abba\") == \"Valid\"", "assert check_char(\"a\") == \"Valid\"", "assert check_char(\"abcd\") == \"Invalid\""], "entry_point": "check_char", "canonical_solution": "\nimport re  \ndef check_char(string): \n\tregex = r'^[a-z]$|^([a-z]).*\\1$'\n\treturn re.search(regex, string) is not None\n", "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_char(\"abba\") == True\nassert check_char(\"a\") == True\nassert check_char(\"abcd\") == False\n", "base_input": [["abba"], ["a"], ["abcd"]], "atol": 0}
{"task_id": 397, "prompt": "'''\nWrite a function to find the median of three numbers.\n'''", "test_imports": [], "test_list": ["assert median_numbers(25,55,65)==55.0", "assert median_numbers(20,10,30)==20.0", "assert median_numbers(15,45,75)==45.0"], "entry_point": "median_numbers", "canonical_solution": "\ndef median_numbers(a,b,c):\n    return sorted([a,b,c])[1]\n", "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0\n", "base_input": [[25, 55, 65], [20, 10, 30], [15, 45, 75]], "atol": 0}
{"task_id": 398, "prompt": "'''\nWrite a function to compute the sum of digits of each number of a given list.\n'''", "test_imports": [], "test_list": ["assert sum_of_digits([10,2,56])==14", "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19", "assert sum_of_digits([10,20,-4,5,-70])==19"], "entry_point": "sum_of_digits", "canonical_solution": "\ndef sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19\n", "base_input": [[[10, 2, 56]], [[[10, 20, 4, 5, "b", 70, "a"]]], [[10, 20, -4, 5, -70]]], "atol": 0}
{"task_id": 399, "prompt": "'''\nWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n'''", "test_imports": [], "test_list": ["assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)", "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)", "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"], "entry_point": "bitwise_xor", "canonical_solution": "\ndef bitwise_xor(test_tup1, test_tup2):\n  return tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, int) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, int) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n", "base_input": [[[10, 4, 6, 9], [5, 2, 3, 3]], [[11, 5, 7, 10], [6, 3, 4, 4]], [[12, 6, 8, 11], [7, 4, 5, 6]]], "atol": 0}
{"task_id": 400, "prompt": "'''\nWrite a function to extract the number of unique tuples in the given list.\n'''", "test_imports": [], "test_list": ["assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3", "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4", "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"], "entry_point": "extract_freq", "canonical_solution": "\ndef extract_freq(test_list):\n  return len(set(tuple(sorted(l)) for l in test_list))\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4\n", "base_input": [[[[3, 4], [1, 2], [4, 3], [5, 6]]], [[[4, 15], [2, 3], [5, 4], [6, 7]]], [[[5, 16], [2, 3], [6, 5], [6, 9]]]], "atol": 0}
{"task_id": 401, "prompt": "'''\nWrite a function to perform index wise addition of tuple elements in the given two nested tuples.\n'''", "test_imports": [], "test_list": ["assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))", "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))", "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"], "entry_point": "add_nested_tuples", "canonical_solution": "\ndef add_nested_tuples(test_tup1, test_tup2):\n  return tuple(tuple(a + b for a, b in zip(tup1, tup2))\n    for tup1, tup2 in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n", "base_input": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]], [[[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]], [[[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]]], "atol": 0}
{"task_id": 404, "prompt": "'''\nWrite a python function to find the minimum of two numbers.\n'''", "test_imports": [], "test_list": ["assert minimum(1,2) == 1", "assert minimum(-5,-4) == -5", "assert minimum(0,0) == 0"], "entry_point": "minimum", "canonical_solution": "\ndef minimum(a,b):   \n    return min(a,b)\n", "contract": "\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0\n", "base_input": [[1, 2], [-5, -4], [0, 0]], "atol": 0}
{"task_id": 405, "prompt": "'''\nWrite a function to check whether an element exists within a tuple.\n'''", "test_imports": [], "test_list": ["assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False", "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"], "entry_point": "check_tuplex", "canonical_solution": "\ndef check_tuplex(tuplex, element): \n  return element in tuplex\n", "contract": "\n  assert isinstance(tuplex, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True\n", "base_input": [[["w", 3, "r", "e", "s", "o", "u", "r", "c", "e"], "r"], [["w", 3, "r", "e", "s", "o", "u", "r", "c", "e"], "5"], [["w", 3, "r", "e", "s", "o", "u", "r", "c", "e"], 3]], "atol": 0}
{"task_id": 406, "prompt": "'''\nWrite a python function to find whether the parity of a given number is odd.\n'''", "test_imports": [], "test_list": ["assert find_Parity(12) == False", "assert find_Parity(7) == True", "assert find_Parity(10) == False"], "entry_point": "find_Parity", "canonical_solution": "\ndef find_Parity(x): \n    return x % 2 != 0\n", "contract": "\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Parity(12) == False\nassert find_Parity(7) == True\nassert find_Parity(10) == False\n", "base_input": [[12], [7], [10]], "atol": 0}
{"task_id": 407, "prompt": "'''\nWrite a function to create the next bigger number by rearranging the digits of a given number.\n'''", "test_imports": [], "test_list": ["assert rearrange_bigger(12)==21", "assert rearrange_bigger(10)==False", "assert rearrange_bigger(102)==120"], "entry_point": "rearrange_bigger", "canonical_solution": "\ndef rearrange_bigger(n):\n    digits = list(str(n))\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i-1]:\n            digits[i], digits[i-1] = digits[i-1], digits[i]\n            return int(\"\".join(digits))\n    return None\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==None\nassert rearrange_bigger(102)==120\n", "base_input": [[12], [10], [102]], "atol": 0}
{"task_id": 408, "prompt": "'''\nWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n'''", "test_imports": [], "test_list": ["assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]", "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]", "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"], "entry_point": "k_smallest_pairs", "canonical_solution": "\nimport heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    nums1.sort()\n    nums2.sort()\n    return [(nums1[i], nums2[j]) for i in range(min(k, len(nums1))) for j in range(min(k, len(nums2)))][:k]\n", "contract": "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(el, (int, float)) for el in nums1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(el, (int, float)) for el in nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= k <= len(nums1) * len(nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert set(k_smallest_pairs([1,3,7],[2,4,6],2))==set([(1, 2), (1, 4)])\nassert set(k_smallest_pairs([1,3,7],[2,4,6],1))==set([(1, 2)])\nassert set(k_smallest_pairs([1,3,7],[2,4,6],7))==set([(1, 2), (1, 4), (3, 2), (1, 6), (3, 4), (3, 6), (7, 2)])\n", "base_input": [[[1, 3, 7], [2, 4, 6], 2], [[1, 3, 7], [2, 4, 6], 1], [[1, 3, 7], [2, 4, 6], 7]], "atol": 0}
{"task_id": 409, "prompt": "'''\nWrite a function to find the minimum product from the pairs of tuples within a given list.\n'''", "test_imports": [], "test_list": ["assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8", "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30", "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"], "entry_point": "min_product_tuple", "canonical_solution": "\ndef min_product_tuple(list1):\n    return min(x * y for x, y in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, tuple) for ele in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for sub in list1 for ele in sub), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100\n", "base_input": [[[[2, 7], [2, 6], [1, 8], [4, 9]]], [[[10, 20], [15, 2], [5, 10]]], [[[11, 44], [10, 15], [20, 5], [12, 9]]]], "atol": 0}
{"task_id": 410, "prompt": "'''\nWrite a function to find the minimum value in a given heterogeneous list.\n'''", "test_imports": [], "test_list": ["assert min_val(['Python', 3, 2, 4, 5, 'version'])==2", "assert min_val(['Python', 15, 20, 25])==15", "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"], "entry_point": "min_val", "canonical_solution": "\ndef min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val\n", "contract": "\n     assert isinstance(listval, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(listval) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert any(isinstance(i, int) for i in listval), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20\n", "base_input": [[["Python", 3, 2, 4, 5, "version"]], [["Python", 15, 20, 25]], [["Python", 30, 20, 40, 50, "version"]]], "atol": 0}
{"task_id": 411, "prompt": "'''\nWrite a function to convert the given snake case string to camel case string.\n'''", "test_imports": [], "test_list": ["assert snake_to_camel('android_tv') == 'AndroidTv'", "assert snake_to_camel('google_pixel') == 'GooglePixel'", "assert snake_to_camel('apple_watch') == 'AppleWatch'"], "entry_point": "snake_to_camel", "canonical_solution": "\nimport re\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "contract": "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'\n", "base_input": [["android_tv"], ["google_pixel"], ["apple_watch"]], "atol": 0}
{"task_id": 412, "prompt": "'''\nWrite a python function to remove odd numbers from a given list.\n'''", "test_imports": [], "test_list": ["assert remove_odd([1,2,3]) == [2]", "assert remove_odd([2,4,6]) == [2,4,6]", "assert remove_odd([10,20,3]) == [10,20]"], "entry_point": "remove_odd", "canonical_solution": "\ndef remove_odd(l):\n    return [i for i in l if i % 2 == 0]\n", "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]\n", "base_input": [[[1, 2, 3]], [[2, 4, 6]], [[10, 20, 3]]], "atol": 0}
{"task_id": 413, "prompt": "'''\nWrite a function to extract the nth element from a given list of tuples.\n'''", "test_imports": [], "test_list": ["assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]", "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"], "entry_point": "extract_nth_element", "canonical_solution": "\ndef extract_nth_element(list1, n):\n    return [x[n] for x in list1]\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(tup, tuple) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert all(n < len(tup) for tup in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]\n", "base_input": [[[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 0], [[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 2], [[["Greyson Fulton", 98, 99], ["Brady Kent", 97, 96], ["Wyatt Knott", 91, 94], ["Beau Turnbull", 94, 98]], 1]], "atol": 0}
{"task_id": 414, "prompt": "'''\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\n'''", "test_imports": [], "test_list": ["assert overlapping([1,2,3,4,5],[6,7,8,9]) == False", "assert overlapping([1,2,3],[4,5,6]) == False", "assert overlapping([1,4,5],[1,4,5]) == True"], "entry_point": "overlapping", "canonical_solution": "\ndef overlapping(list1,list2):  \n    return any(v in list2 for v in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True\n", "base_input": [[[1, 2, 3, 4, 5], [6, 7, 8, 9]], [[1, 2, 3], [4, 5, 6]], [[1, 4, 5], [1, 4, 5]]], "atol": 0}
{"task_id": 415, "prompt": "'''\nWrite a python function to find a pair with highest product from a given array of integers.\n'''", "test_imports": [], "test_list": ["assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)", "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)", "assert max_Product([1,2,3]) == (2,3)"], "entry_point": "max_Product", "canonical_solution": "\ndef max_Product(arr): \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) >= 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)\n", "base_input": [[[1, 2, 3, 4, 7, 0, 8, 4]], [[0, -1, -2, -4, 5, 0, -6]], [[1, 2, 3]]], "atol": 0}
{"task_id": 417, "prompt": "'''\nWrite a function to find common first element in given list of tuple.\n'''", "test_imports": [], "test_list": ["assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]", "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]", "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"], "entry_point": "group_tuples", "canonical_solution": "\ndef group_tuples(Input): \n\tout = {} \n\tfor elem in Input: \n\t\ttry: \n\t\t\tout[elem[0]].extend(elem[1:]) \n\t\texcept KeyError: \n\t\t\tout[elem[0]] = list(elem) \n\treturn [tuple(values) for values in out.values()] \n", "contract": "\n\tassert isinstance(Input, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, tuple) for x in Input), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n", "base_input": [[[["x", "y"], ["x", "z"], ["w", "t"]]], [[["a", "b"], ["a", "c"], ["d", "e"]]], [[["f", "g"], ["f", "g"], ["h", "i"]]]], "atol": 0}
{"task_id": 418, "prompt": "'''\nWrite a python function to find the element of a list having maximum length.\n'''", "test_imports": [], "test_list": ["assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']", "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]", "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"], "entry_point": "Find_Max", "canonical_solution": "\ndef Find_Max(lst): \n    return max(lst, key = len)\n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n", "base_input": [[[["A"], ["A", "B"], ["A", "B", "C"]]], [[[1], [1, 2], [1, 2, 3]]], [[[1, 1], [1, 2, 3], [1, 5, 6, 1]]]], "atol": 0}
{"task_id": 419, "prompt": "'''\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n'''", "test_imports": [], "test_list": ["assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243", "assert round_and_sum([5,2,9,24.3,29])==345", "assert round_and_sum([25.0,56.7,89.2])==513"], "entry_point": "round_and_sum", "canonical_solution": "\ndef round_and_sum(list1):\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l\n", "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513\n", "base_input": [[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[5, 2, 9, 24.3, 29]], [[25.0, 56.7, 89.2]]], "atol": 0}
{"task_id": 420, "prompt": "'''\nWrite a python function to find the cube sum of first n even natural numbers.\n'''", "test_imports": [], "test_list": ["assert cube_Sum(2) == 72", "assert cube_Sum(3) == 288", "assert cube_Sum(4) == 800"], "entry_point": "cube_Sum", "canonical_solution": "\ndef cube_Sum(n): \n    return 2 * (n ** 2) * ((n + 1) ** 2)\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800\n", "base_input": [[2], [3], [4]], "atol": 0}
{"task_id": 421, "prompt": "'''\nWrite a function to concatenate each element of tuple by the delimiter.\n'''", "test_imports": [], "test_list": ["assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'", "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'", "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"], "entry_point": "concatenate_tuple", "canonical_solution": "\ndef concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res)) \n", "contract": "\n    assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'\n", "base_input": [[["ID", "is", 4, "UTS"]], [["QWE", "is", 4, "RTY"]], [["ZEN", "is", 4, "OP"]]], "atol": 0}
{"task_id": 422, "prompt": "'''\nWrite a python function to find the average of cubes of first n natural numbers.\n'''", "test_imports": [], "test_list": ["assert find_Average_Of_Cube(2) == 4.5", "assert find_Average_Of_Cube(3) == 12", "assert find_Average_Of_Cube(1) == 1"], "entry_point": "find_Average_Of_Cube", "canonical_solution": "\ndef find_Average_Of_Cube(n):  \n    return sum([(i ** 3) for i in range(1, n + 1)]) / n\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1\n", "base_input": [[2], [3], [1]], "atol": 0}
{"task_id": 424, "prompt": "'''\nWrite a function to extract only the rear index element of each string in the given tuple.\n'''", "test_imports": [], "test_list": ["assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']", "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']", "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"], "entry_point": "extract_rear", "canonical_solution": "\ndef extract_rear(test_tuple):\n  return [ele[-1] for ele in test_tuple]\n", "contract": "\n  assert isinstance(test_tuple, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, str) for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) > 0 for ele in test_tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']\n", "base_input": [[["Mers", "for", "Vers"]], [["Avenge", "for", "People"]], [["Gotta", "get", "go"]]], "atol": 0}
{"task_id": 425, "prompt": "'''\nWrite a function to count the number of sublists containing a particular element.\n'''", "test_imports": [], "test_list": ["assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3", "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"], "entry_point": "count_element_in_list", "canonical_solution": "\ndef count_element_in_list(list1, x): \n    return sum(x in sublist for sublist in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, list) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1\n", "base_input": [[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1], [[["A", "B"], ["A", "C"], ["A", "D", "E"], ["B", "C", "D"]], "A"], [[["A", "B"], ["A", "C"], ["A", "D", "E"], ["B", "C", "D"]], "E"]], "atol": 0}
{"task_id": 426, "prompt": "'''\nWrite a function to filter odd numbers.\n'''", "test_imports": [], "test_list": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]", "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]", "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"], "entry_point": "filter_oddnumbers", "canonical_solution": "\ndef filter_oddnumbers(nums):\n    return [n for n in nums if n % 2 == 1]\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 45, 67, 84, 93]], [[5, 7, 9, 8, 6, 4, 3]]], "atol": 0}
{"task_id": 427, "prompt": "'''\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n'''", "test_imports": [], "test_list": ["assert change_date_format(\"2026-01-02\") == '02-01-2026'", "assert change_date_format(\"2020-11-13\") == '13-11-2020'", "assert change_date_format(\"2021-04-26\") == '26-04-2021'"], "entry_point": "change_date_format", "canonical_solution": "\nimport re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\n", "contract": "\n    assert isinstance(dt, str), \"invalid inputs\" # $_CONTRACT_$\n    assert re.match(r'\\d{4}-\\d{1,2}-\\d{1,2}', dt), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'\n", "base_input": [["2026-01-02"], ["2020-11-13"], ["2021-04-26"]], "atol": 0}
{"task_id": 428, "prompt": "'''\nWrite a function to sort the given array by using shell sort.\n'''", "test_imports": [], "test_list": ["assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]", "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]", "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"], "entry_point": "shell_sort", "canonical_solution": "\ndef shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list\n", "contract": "\n    assert isinstance(my_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, (int, float)) for ele in my_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n", "base_input": [[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[24, 22, 39, 34, 87, 73, 68]], [[32, 30, 16, 96, 82, 83, 74]]], "atol": 0}
{"task_id": 429, "prompt": "'''\nWrite a function to extract the elementwise and tuples from the given two tuples.\n'''", "test_imports": [], "test_list": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)", "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)", "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"], "entry_point": "and_tuples", "canonical_solution": "\ndef and_tuples(test_tup1, test_tup2):\n  return tuple(x & y for x, y in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n", "base_input": [[[10, 4, 6, 9], [5, 2, 3, 3]], [[1, 2, 3, 4], [5, 6, 7, 8]], [[8, 9, 11, 12], [7, 13, 14, 17]]], "atol": 0}
{"task_id": 430, "prompt": "'''\nWrite a function to find the directrix of a parabola.\n'''", "test_imports": [], "test_list": ["assert parabola_directrix(5,3,2)==-198", "assert parabola_directrix(9,8,4)==-2336", "assert parabola_directrix(2,4,6)==-130"], "entry_point": "parabola_directrix", "canonical_solution": "\ndef parabola_directrix(a, b, c): \n  return ((int)(c - ((b * b) + 1) * 4 * a ))\n", "contract": "\n  assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(c, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130\n", "base_input": [[5, 3, 2], [9, 8, 4], [2, 4, 6]], "atol": 0}
{"task_id": 431, "prompt": "'''\nWrite a function that takes two lists and returns true if they have at least one common element.\n'''", "test_imports": [], "test_list": ["assert common_element([1,2,3,4,5], [5,6,7,8,9])==True", "assert common_element([1,2,3,4,5], [6,7,8,9])==None", "assert common_element(['a','b','c'], ['d','b','e'])==True"], "entry_point": "common_element", "canonical_solution": "\ndef common_element(list1, list2):\n    return any(item in list2 for item in list1)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==False\nassert common_element(['a','b','c'], ['d','b','e'])==True\n", "base_input": [[[1, 2, 3, 4, 5], [5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5], [6, 7, 8, 9]], [["a", "b", "c"], ["d", "b", "e"]]], "atol": 0}
{"task_id": 432, "prompt": "'''\nWrite a function to find the median length of a trapezium.\n'''", "test_imports": [], "test_list": ["assert median_trapezium(15,25,35)==20", "assert median_trapezium(10,20,30)==15", "assert median_trapezium(6,9,4)==7.5"], "entry_point": "median_trapezium", "canonical_solution": "\ndef median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2\n", "contract": "\n    assert isinstance(base1, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(base2, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5\n", "base_input": [[15, 25, 35], [10, 20, 30], [6, 9, 4]], "atol": 0}
{"task_id": 433, "prompt": "'''\nWrite a function to check whether the entered number is greater than the elements of the given array.\n'''", "test_imports": [], "test_list": ["assert check_greater([1, 2, 3, 4, 5], 4) == False", "assert check_greater([2, 3, 4, 5, 6], 8) == True", "assert check_greater([9, 7, 4, 8, 6, 1], 11) == True"], "entry_point": "check_greater", "canonical_solution": "\ndef check_greater(arr, number):\n  return all(number > el for el in arr)\n", "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(number, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([2, 3, 4, 5, 6], 8) == True\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == True\n", "base_input": [[[1, 2, 3, 4, 5], 4], [[2, 3, 4, 5, 6], 8], [[9, 7, 4, 8, 6, 1], 11]], "atol": 0}
{"task_id": 434, "prompt": "'''\nWrite a function that matches a string that has an a followed by one or more b's.\n'''", "test_imports": [], "test_list": ["assert text_match_one(\"ac\")==False", "assert text_match_one(\"dc\")==False", "assert text_match_one(\"abba\")==True"], "entry_point": "text_match_one", "canonical_solution": "\nimport re\ndef text_match_one(text):\n    patterns = 'ab+?'\n    return re.search(patterns,  text) is not None\n", "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_one(\"ac\")==False\nassert text_match_one(\"dc\")==False\nassert text_match_one(\"abba\")==True\n", "base_input": [["ac"], ["dc"], ["abba"]], "atol": 0}
{"task_id": 435, "prompt": "'''\nWrite a python function to find the last digit of a given number.\n'''", "test_imports": [], "test_list": ["assert last_Digit(123) == 3", "assert last_Digit(25) == 5", "assert last_Digit(30) == 0"], "entry_point": "last_Digit", "canonical_solution": "\ndef last_Digit(n) :\n    if n < 0: \n        n = -n\n    return n % 10\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0\n", "base_input": [[123], [25], [30]], "atol": 0}
{"task_id": 436, "prompt": "'''\nWrite a python function to return the negative numbers in a list.\n'''", "test_imports": [], "test_list": ["assert neg_nos([-1,4,5,-6]) == [-1,-6]", "assert neg_nos([-1,-2,3,4]) == [-1,-2]", "assert neg_nos([-7,-6,8,9]) == [-7,-6]"], "entry_point": "neg_nos", "canonical_solution": "\ndef neg_nos(list1):\n  return [i for i in list1 if i < 0]\n", "contract": "\n  assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\nassert neg_nos([-1,-2,3,4]) == [-1,-2]\nassert neg_nos([-7,-6,8,9]) == [-7,-6]\n", "base_input": [[[-1, 4, 5, -6]], [[-1, -2, 3, 4]], [[-7, -6, 8, 9]]], "atol": 0}
{"task_id": 437, "prompt": "'''\nWrite a function to remove odd characters in a string.\n'''", "test_imports": [], "test_list": ["assert remove_odd(\"python\")==(\"yhn\")", "assert remove_odd(\"program\")==(\"rga\")", "assert remove_odd(\"language\")==(\"agae\")"], "entry_point": "remove_odd", "canonical_solution": "\ndef remove_odd(str1):\n    return str1[1::2]\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")\n", "base_input": [["python"], ["program"], ["language"]], "atol": 0}
{"task_id": 438, "prompt": "'''\nWrite a function to count bidirectional tuple pairs.\n'''", "test_imports": [], "test_list": ["assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3", "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2", "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4"], "entry_point": "count_bidirectional", "canonical_solution": "\ndef count_bidirectional(test_list):\n  return sum(test_list.count(l[::-1]) for l in test_list) / 2\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele[0], int) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele[1], int) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 3\n", "base_input": [[[[5, 6], [1, 2], [6, 5], [9, 1], [6, 5], [2, 1]]], [[[5, 6], [1, 3], [6, 5], [9, 1], [6, 5], [2, 1]]], [[[5, 6], [1, 2], [6, 5], [9, 2], [6, 5], [2, 1]]]], "atol": 0}
{"task_id": 439, "prompt": "'''\nWrite a function to join a list of multiple integers into a single integer.\n'''", "test_imports": [], "test_list": ["assert multiple_to_single([11, 33, 50])==113350", "assert multiple_to_single([-1,2,3,4,5,6])==-123456", "assert multiple_to_single([10,15,20,25])==10152025"], "entry_point": "multiple_to_single", "canonical_solution": "\ndef multiple_to_single(L):\n  return int(''.join(map(str,L)))\n", "contract": "\n  assert isinstance(L, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(L) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, int) for item in L), \"invalid inputs\" # $_CONTRACT_$\n  assert all(item > 0 for item in L[1:]), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025\n", "base_input": [[[11, 33, 50]], [[-1, 2, 3, 4, 5, 6]], [[10, 15, 20, 25]]], "atol": 0}
{"task_id": 440, "prompt": "'''\nWrite a function to find the first adverb and their positions in a given sentence.\n'''", "test_imports": [], "test_list": ["assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')", "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')", "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"], "entry_point": "find_adverb_position", "canonical_solution": "\nimport re\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))\n", "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')\n", "base_input": [["clearly!! we can see the sky"], ["seriously!! there are many roses"], ["unfortunately!! sita is going to home"]], "atol": 0}
{"task_id": 441, "prompt": "'''\nWrite a function to find the surface area of a cube of a given size.\n'''", "test_imports": [], "test_list": ["assert surfacearea_cube(5)==150", "assert surfacearea_cube(3)==54", "assert surfacearea_cube(10)==600"], "entry_point": "surfacearea_cube", "canonical_solution": "\ndef surfacearea_cube(l):\n  return 6 * l * l\n", "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600\n", "base_input": [[5], [3], [10]], "atol": 0}
{"task_id": 442, "prompt": "'''\nWrite a function to find the ration of positive numbers in an array of integers.\n'''", "test_imports": [], "test_list": ["assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54", "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69", "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"], "entry_point": "positive_count", "canonical_solution": "\ndef positive_count(nums):\n    return sum(x > 0 for x in nums) / len(nums)\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, int) for ele in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.538, rel_tol=0.001)\nassert math.isclose(positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.692, rel_tol=0.001)\nassert math.isclose(positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.555, rel_tol=0.001)\n", "base_input": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17]]], "atol": 0.0001}
{"task_id": 443, "prompt": "'''\nWrite a python function to find the largest negative number from the given list.\n'''", "test_imports": [], "test_list": ["assert largest_neg([1,2,3,-4,-6]) == -6", "assert largest_neg([1,2,3,-8,-9]) == -9", "assert largest_neg([1,2,3,4,-1]) == -1"], "entry_point": "largest_neg", "canonical_solution": "\ndef largest_neg(list1): \n    max = list1[0] \n    for x in list1: \n        if x < max : \n             max = x  \n    return max\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, float)) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1\n", "base_input": [[[1, 2, 3, -4, -6]], [[1, 2, 3, -8, -9]], [[1, 2, 3, 4, -1]]], "atol": 0}
{"task_id": 444, "prompt": "'''\nWrite a function to trim each tuple by k in the given tuple list.\n'''", "test_imports": [], "test_list": ["assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'", "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'", "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"], "entry_point": "trim_tuple", "canonical_solution": "\ndef trim_tuple(test_list, K):\n  return [tuple(l[K:-K]) for l in test_list]\n  \n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n  assert K >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == [(2,), (9,), (2,), (2,)]\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == [(8, 4), (8, 12), (1, 7), (6, 9)]\n", "base_input": [[[[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2], [[[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1], [[[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1]], "atol": 0}
{"task_id": 445, "prompt": "'''\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\n'''", "test_imports": [], "test_list": ["assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))", "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))", "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"], "entry_point": "index_multiplication", "canonical_solution": "\ndef index_multiplication(test_tup1, test_tup2):\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(ele) == 2 for ele in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup1 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, (int, float)) for tup in test_tup2 for ele in tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))\n", "base_input": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]], [[[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]]], [[[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]]]], "atol": 0}
{"task_id": 446, "prompt": "'''\nWrite a python function to count the occurence of all elements of list in a tuple.\n'''", "test_imports": [], "test_list": ["assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3", "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6", "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"], "entry_point": "count_Occurrence", "canonical_solution": "\nfrom collections import Counter \ndef count_Occurrence(tup, lst): \n    return sum(tup.count(ele) for ele in lst)\n", "contract": "\n    assert isinstance(tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2\n", "base_input": [[["a", "a", "c", "b", "d"], ["a", "b"]], [[1, 2, 3, 1, 4, 6, 7, 1, 4], [1, 4, 7]], [[1, 2, 3, 4, 5, 6], [1, 2]]], "atol": 0}
{"task_id": 447, "prompt": "'''\nWrite a function to find cubes of individual elements in a list.\n'''", "test_imports": [], "test_list": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]", "assert cube_nums([10,20,30])==([1000, 8000, 27000])", "assert cube_nums([12,15])==([1728, 3375])"], "entry_point": "cube_nums", "canonical_solution": "\ndef cube_nums(nums):\n    return [n**3 for n in nums]\n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 30]], [[12, 15]]], "atol": 0}
{"task_id": 448, "prompt": "'''\nWrite a function to calculate the sum of perrin numbers.\n'''", "test_imports": [], "test_list": ["assert cal_sum(9) == 49", "assert cal_sum(10) == 66", "assert cal_sum(11) == 88"], "entry_point": "cal_sum", "canonical_solution": "\ndef cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88\n", "base_input": [[9], [10], [11]], "atol": 0}
{"task_id": 450, "prompt": "'''\nWrite a function to extract specified size of strings from a given list of string values.\n'''", "test_imports": [], "test_list": ["assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']", "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"], "entry_point": "extract_string", "canonical_solution": "\ndef extract_string(str1, l):\n    return [e for e in str1 if len(e) == l] \n", "contract": "\n    assert isinstance(str1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(ele, str) for ele in str1), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']\n", "base_input": [[["Python", "list", "exercises", "practice", "solution"], 8], [["Python", "list", "exercises", "practice", "solution"], 6], [["Python", "list", "exercises", "practice", "solution"], 9]], "atol": 0}
{"task_id": 451, "prompt": "'''\nWrite a function to remove all whitespaces from the given string.\n'''", "test_imports": [], "test_list": ["assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'", "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'", "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"], "entry_point": "remove_whitespaces", "canonical_solution": "\nimport re\ndef remove_whitespaces(text1):\n  return text1.replace(' ', '')\n", "contract": "\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'\n", "base_input": [[" Google    Flutter "], [" Google    Dart "], [" iOS    Swift "]], "atol": 0}
{"task_id": 452, "prompt": "'''\nWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n'''", "test_imports": [], "test_list": ["assert loss_amount(1500,1200)==0", "assert loss_amount(100,200)==100", "assert loss_amount(2000,5000)==3000"], "entry_point": "loss_amount", "canonical_solution": "\ndef loss_amount(actual_cost, sale_amount): \n  return max(0, sale_amount - actual_cost)\n", "contract": "\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert actual_cost > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert sale_amount > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert loss_amount(1500,1200)==0\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000\n", "base_input": [[1500, 1200], [100, 200], [2000, 5000]], "atol": 0}
{"task_id": 453, "prompt": "'''\nWrite a python function to find the sum of even factors of a number.\n'''", "test_imports": [], "test_list": ["assert sumofFactors(18) == 26", "assert sumofFactors(30) == 48", "assert sumofFactors(6) == 8"], "entry_point": "sumofFactors", "canonical_solution": "\nimport math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8\n", "base_input": [[18], [30], [6]], "atol": 0}
{"task_id": 454, "prompt": "'''\nWrite a function that matches a word containing 'z'.\n'''", "test_imports": [], "test_list": ["assert text_match_wordz(\"pythonz.\")==True", "assert text_match_wordz(\"xyz.\")==True", "assert text_match_wordz(\"  lang  .\")==False"], "entry_point": "text_match_wordz", "canonical_solution": "\nimport re\ndef text_match_wordz(text):\n        return 'z' in text\n", "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_wordz(\"pythonz.\")==True\nassert text_match_wordz(\"xyz.\")==True\nassert text_match_wordz(\"  lang  .\")==False\n", "base_input": [["pythonz."], ["xyz."], ["  lang  ."]], "atol": 0}
{"task_id": 455, "prompt": "'''\nWrite a function to check whether the given month number contains 31 days or not.\n'''", "test_imports": [], "test_list": ["assert check_monthnumb_number(5)==True", "assert check_monthnumb_number(2)==False", "assert check_monthnumb_number(6)==False"], "entry_point": "check_monthnumb_number", "canonical_solution": "\ndef check_monthnumb_number(monthnum2):\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]\n", "contract": "\n  assert isinstance(monthnum2, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum2 <= 12, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False\n", "base_input": [[5], [2], [6]], "atol": 0}
{"task_id": 456, "prompt": "'''\nWrite a function to reverse each string in a given list of string values.\n'''", "test_imports": [], "test_list": ["assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']", "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']", "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"], "entry_point": "reverse_string_list", "canonical_solution": "\ndef reverse_string_list(stringlist):\n    return [x[::-1] for x in stringlist]\n", "contract": "\n    assert isinstance(stringlist, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in stringlist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']\n", "base_input": [[["Red", "Green", "Blue", "White", "Black"]], [["john", "amal", "joel", "george"]], [["jack", "john", "mary"]]], "atol": 0}
{"task_id": 457, "prompt": "'''\nWrite a python function to find the sublist having minimum length.\n'''", "test_imports": [], "test_list": ["assert Find_Min([[1],[1,2],[1,2,3]]) == [1]", "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]", "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"], "entry_point": "Find_Min", "canonical_solution": "\ndef Find_Min(lst): \n    return min(lst, key=len) \n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']\n", "base_input": [[[[1], [1, 2], [1, 2, 3]]], [[[1, 1], [1, 1, 1], [1, 2, 7, 8]]], [[["x"], ["x", "y"], ["x", "y", "z"]]]], "atol": 0}
{"task_id": 458, "prompt": "'''\nWrite a function to find the area of a rectangle.\n'''", "test_imports": [], "test_list": ["assert rectangle_area(10,20)==200", "assert rectangle_area(10,5)==50", "assert rectangle_area(4,2)==8"], "entry_point": "rectangle_area", "canonical_solution": "\ndef rectangle_area(l,b):\n  return l * b\n", "contract": "\n  assert isinstance(l, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert l > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8\n", "base_input": [[10, 20], [10, 5], [4, 2]], "atol": 0}
{"task_id": 459, "prompt": "'''\nWrite a function to remove uppercase substrings from a given string.\n'''", "test_imports": [], "test_list": ["assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'", "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'", "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"], "entry_point": "remove_uppercase", "canonical_solution": "\ndef remove_uppercase(str1):\n  return ''.join(c for c in str1 if c.islower())\n", "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n", "base_input": [["cAstyoUrFavoRitETVshoWs"], ["wAtchTheinTernEtrAdIo"], ["VoicESeaRchAndreComMendaTionS"]], "atol": 0}
{"task_id": 460, "prompt": "'''\nWrite a python function to get the first element of each sublist.\n'''", "test_imports": [], "test_list": ["assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]", "assert Extract([[1,2,3],[4, 5]]) == [1,4]", "assert Extract([[9,8,1],[1,2]]) == [9,1]"], "entry_point": "Extract", "canonical_solution": "\ndef Extract(lst): \n    return [item[0] for item in lst] \n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(l, list) for l in lst), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(l) > 0 for l in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]\n", "base_input": [[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [4, 5]]], [[[9, 8, 1], [1, 2]]]], "atol": 0}
{"task_id": 461, "prompt": "'''\nWrite a python function to count the upper case characters in a given string.\n'''", "test_imports": [], "test_list": ["assert upper_ctr('PYthon') == 1", "assert upper_ctr('BigData') == 1", "assert upper_ctr('program') == 0"], "entry_point": "upper_ctr", "canonical_solution": "\ndef upper_ctr(str1):\n    return sum(1 for c in str1 if c.isupper())\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert upper_ctr('PYthon') == 2\nassert upper_ctr('BigData') == 2\nassert upper_ctr('program') == 0\n", "base_input": [["PYthon"], ["BigData"], ["program"]], "atol": 0}
{"task_id": 462, "prompt": "'''\nWrite a function to find all possible combinations of the elements of a given list.\n'''", "test_imports": [], "test_list": ["assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]", "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]", "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"], "entry_point": "combinations_list", "canonical_solution": "\ndef combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n", "base_input": [[["orange", "red", "green", "blue"]], [["red", "green", "blue", "white", "black", "orange"]], [["red", "green", "black", "orange"]]], "atol": 0}
{"task_id": 463, "prompt": "'''\nWrite a function to find the maximum product subarray of the given array.\n'''", "test_imports": [], "test_list": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_subarray_product([6, -3, -10, 0, 2]) == 180", "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"], "entry_point": "max_subarray_product", "canonical_solution": "\ndef max_subarray_product(arr):\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far\n", "contract": "\n\tassert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180\nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80\n", "base_input": [[[1, -2, -3, 0, 7, -8, -2]], [[6, -3, -10, 0, 2]], [[-2, -40, 0, -2, -3]]], "atol": 0}
{"task_id": 464, "prompt": "'''\nWrite a function to check if all values are same in a dictionary.\n'''", "test_imports": [], "test_list": ["assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True", "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"], "entry_point": "check_value", "canonical_solution": "\ndef check_value(dict1, n):\n    return all(x == n for x in dict1.values()) \n", "contract": "\n    assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False\n", "base_input": [[{"Cierra Vega": 12, "Alden Cantrell": 12, "Kierra Gentry": 12, "Pierre Cox": 12}, 10], [{"Cierra Vega": 12, "Alden Cantrell": 12, "Kierra Gentry": 12, "Pierre Cox": 12}, 12], [{"Cierra Vega": 12, "Alden Cantrell": 12, "Kierra Gentry": 12, "Pierre Cox": 12}, 5]], "atol": 0}
{"task_id": 465, "prompt": "'''\nWrite a function to drop empty items from a given dictionary.\n'''", "test_imports": [], "test_list": ["assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}", "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}", "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"], "entry_point": "drop_empty", "canonical_solution": "\ndef drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1\n", "contract": "\n  assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}\n", "base_input": [[{"c1": "Red", "c2": "Green", "c3": null}], [{"c1": "Red", "c2": null, "c3": null}], [{"c1": null, "c2": "Green", "c3": null}]], "atol": 0}
{"task_id": 468, "prompt": "'''\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n'''", "test_imports": [], "test_list": ["assert max_product([3, 100, 4, 5, 150, 6]) == 3000", "assert max_product([4, 42, 55, 68, 80]) == 50265600", "assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460"], "entry_point": "max_product", "canonical_solution": "\ndef max_product(arr):   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]\n", "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n  assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([4, 42, 55, 68, 80]) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460\n", "base_input": [[[3, 100, 4, 5, 150, 6]], [[4, 42, 55, 68, 80]], [[10, 22, 9, 33, 21, 50, 41, 60]]], "atol": 0}
{"task_id": 470, "prompt": "'''\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n'''", "test_imports": [], "test_list": ["assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)", "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)", "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"], "entry_point": "add_pairwise", "canonical_solution": "\ndef add_pairwise(test_tup):\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n", "base_input": [[[1, 5, 7, 8, 10]], [[2, 6, 8, 9, 11]], [[3, 7, 9, 10, 12]]], "atol": 0}
{"task_id": 471, "prompt": "'''\nWrite a python function to find the product of the array multiplication modulo n.\n'''", "test_imports": [], "test_list": ["assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9", "assert find_remainder([1,1,1],1) == 0", "assert find_remainder([1,2,1],2) == 0"], "entry_point": "find_remainder", "canonical_solution": "\ndef find_remainder(arr, n): \n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\nassert find_remainder([1,1,1],1) == 0\nassert find_remainder([1,2,1],2) == 0\n", "base_input": [[[100, 10, 5, 25, 35, 14], 11], [[1, 1, 1], 1], [[1, 2, 1], 2]], "atol": 0}
{"task_id": 472, "prompt": "'''\nWrite a python function to check whether the given list contains consecutive numbers or not.\n'''", "test_imports": [], "test_list": ["assert check_Consecutive([1,2,3,4,5]) == True", "assert check_Consecutive([1,2,3,5,6]) == False", "assert check_Consecutive([1,2,1]) == False"], "entry_point": "check_Consecutive", "canonical_solution": "\ndef check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1)) \n", "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False\n", "base_input": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 5, 6]], [[1, 2, 1]]], "atol": 0}
{"task_id": 473, "prompt": "'''\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n'''", "test_imports": [], "test_list": ["assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}", "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}", "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"], "entry_point": "tuple_intersection", "canonical_solution": "\ndef tuple_intersection(test_list1, test_list2):\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\n", "contract": "\n  assert isinstance(test_list1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_list2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(ele, tuple) for ele in test_list2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n", "base_input": [[[[3, 4], [5, 6], [9, 10], [4, 5]], [[5, 4], [3, 4], [6, 5], [9, 11]]], [[[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]], [[[2, 1], [3, 2], [1, 3], [1, 4]], [[11, 2], [2, 3], [6, 2], [1, 3]]]], "atol": 0}
{"task_id": 474, "prompt": "'''\nWrite a function to replace characters in a string.\n'''", "test_imports": [], "test_list": ["assert replace_char(\"polygon\",'y','l')==(\"pollgon\")", "assert replace_char(\"character\",'c','a')==(\"aharaater\")", "assert replace_char(\"python\",'l','a')==(\"python\")"], "entry_point": "replace_char", "canonical_solution": "\ndef replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(ch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(ch) == 1, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(newch, str), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newch) == 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")\n", "base_input": [["polygon", "y", "l"], ["character", "c", "a"], ["python", "l", "a"]], "atol": 0}
{"task_id": 475, "prompt": "'''\nWrite a function to sort a dictionary by value.\n'''", "test_imports": [], "test_list": ["assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]", "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]", "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"], "entry_point": "sort_counter", "canonical_solution": "\ndef sort_counter(dict1):\n return sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n", "contract": "\n assert isinstance(dict1, dict), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, (int, float)) for x in dict1.values()), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n", "base_input": [[{"Math": 81, "Physics": 83, "Chemistry": 87}], [{"Math": 400, "Physics": 300, "Chemistry": 250}], [{"Math": 900, "Physics": 1000, "Chemistry": 1250}]], "atol": 0}
{"task_id": 476, "prompt": "'''\nWrite a python function to find the sum of the largest and smallest value in a given array.\n'''", "test_imports": [], "test_list": ["assert big_sum([1,2,3]) == 4", "assert big_sum([-1,2,3,4]) == 3", "assert big_sum([2,3,6]) == 8"], "entry_point": "big_sum", "canonical_solution": "\ndef big_sum(nums):\n      return max(nums) + min(nums)\n", "contract": "\n      assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n      assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n      assert all(isinstance(n, (int, float)) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8\n", "base_input": [[[1, 2, 3]], [[-1, 2, 3, 4]], [[2, 3, 6]]], "atol": 0}
{"task_id": 477, "prompt": "'''\nWrite a python function to convert the given string to lower case.\n'''", "test_imports": [], "test_list": ["assert is_lower(\"InValid\") == \"invalid\"", "assert is_lower(\"TruE\") == \"true\"", "assert is_lower(\"SenTenCE\") == \"sentence\""], "entry_point": "is_lower", "canonical_solution": "\ndef is_lower(string):\n    return string.lower()\n", "contract": "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"\n", "base_input": [["InValid"], ["TruE"], ["SenTenCE"]], "atol": 0}
{"task_id": 478, "prompt": "'''\nWrite a function to remove lowercase substrings from a given string.\n'''", "test_imports": [], "test_list": ["assert remove_lowercase(\"PYTHon\")==('PYTH')", "assert remove_lowercase(\"FInD\")==('FID')", "assert remove_lowercase(\"STRinG\")==('STRG')"], "entry_point": "remove_lowercase", "canonical_solution": "\nimport re\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')\n", "base_input": [["PYTHon"], ["FInD"], ["STRinG"]], "atol": 0}
{"task_id": 479, "prompt": "'''\nWrite a python function to find the first digit of a given number.\n'''", "test_imports": [], "test_list": ["assert first_Digit(123) == 1", "assert first_Digit(456) == 4", "assert first_Digit(12) == 1"], "entry_point": "first_Digit", "canonical_solution": "\ndef first_Digit(n) :  \n    return int(str(n)[0])\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1\n", "base_input": [[123], [456], [12]], "atol": 0}
{"task_id": 554, "prompt": "'''\nWrite a python function which takes a list of integers and only returns the odd ones.\n'''", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5,6]) == [1,3,5]", "assert Split([10,11,12,13]) == [11,13]", "assert Split([7,8,9,1]) == [7,9,1]"], "entry_point": "Split", "canonical_solution": "\ndef Split(l): \n    return list(filter(lambda x: x % 2 == 1, l))\n", "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(l) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]\n", "base_input": [[[1, 2, 3, 4, 5, 6]], [[10, 11, 12, 13]], [[7, 8, 9, 1]]], "atol": 0}
{"task_id": 555, "prompt": "'''\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n'''", "test_imports": [], "test_list": ["assert difference(3) == 30", "assert difference(5) == 210", "assert difference(2) == 6"], "entry_point": "difference", "canonical_solution": "\ndef difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;  \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6\n", "base_input": [[3], [5], [2]], "atol": 0}
{"task_id": 556, "prompt": "'''\nWrite a python function to count the number of pairs whose xor value is odd.\n'''", "test_imports": [], "test_list": ["assert find_Odd_Pair([5,4,7,2,1],5) == 6", "assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12", "assert find_Odd_Pair([1,2,3],3) == 2"], "entry_point": "find_Odd_Pair", "canonical_solution": "\ndef find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair  \n", "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in A), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(N, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2\n", "base_input": [[[5, 4, 7, 2, 1], 5], [[7, 2, 8, 1, 0, 5, 11], 7], [[1, 2, 3], 3]], "atol": 0}
{"task_id": 557, "prompt": "'''\nWrite a function to toggle the case of all characters in a string.\n'''", "test_imports": [], "test_list": ["assert toggle_string(\"Python\")==(\"pYTHON\")", "assert toggle_string(\"Pangram\")==(\"pANGRAM\")", "assert toggle_string(\"LIttLE\")==(\"liTTle\")"], "entry_point": "toggle_string", "canonical_solution": "\ndef toggle_string(string):\n return string.swapcase()\n", "contract": "\n assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")\n", "base_input": [["Python"], ["Pangram"], ["LIttLE"]], "atol": 0}
{"task_id": 558, "prompt": "'''\nWrite a python function to find the sum of the per-digit difference between two integers.\n'''", "test_imports": [], "test_list": ["assert digit_distance_nums(1,2) == 1", "assert digit_distance_nums(23,56) == 6", "assert digit_distance_nums(123,256) == 7"], "entry_point": "digit_distance_nums", "canonical_solution": "\ndef digit_distance_nums(n1, n2):\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])\n", "contract": "\n    assert isinstance(n1, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n2, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n1 >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert n2 >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7\n", "base_input": [[1, 2], [23, 56], [123, 256]], "atol": 0}
{"task_id": 559, "prompt": "'''\nWrite a function to find the sum of the largest contiguous sublist in the given list.\n'''", "test_imports": [], "test_list": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7", "assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8", "assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"], "entry_point": "max_sub_array_sum", "canonical_solution": "\ndef max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far\n", "contract": "\n  assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(size, int), \"invalid inputs\" # $_CONTRACT_$\n  assert size <= len(a), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n", "base_input": [[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[-3, -4, 5, -2, -3, 2, 6, -4], 8], [[-4, -5, 6, -3, -4, 3, 7, -5], 8]], "atol": 0}
{"task_id": 560, "prompt": "'''\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\n'''", "test_imports": [], "test_list": ["assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)", "assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)", "assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"], "entry_point": "union_elements", "canonical_solution": "\ndef union_elements(test_tup1, test_tup2):\n  return tuple(sorted(set(test_tup1 + test_tup2)))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [3, 4, 5, 6]], [[11, 12, 13, 14], [13, 15, 16, 17]]], "atol": 0}
{"task_id": 562, "prompt": "'''\nWrite a python function to find the length of the longest sublists.\n'''", "test_imports": [], "test_list": ["assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4", "assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3", "assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"], "entry_point": "Find_Max_Length", "canonical_solution": "\ndef Find_Max_Length(lst):  \n    return len(max(lst, key = len))\n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n", "base_input": [[[[1], [1, 4], [5, 6, 7, 8]]], [[[0, 1], [2, 2], [3, 2, 1]]], [[[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]]], "atol": 0}
{"task_id": 563, "prompt": "'''\nWrite a function to extract values between quotation marks from a string.\n'''", "test_imports": [], "test_list": ["assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']", "assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']", "assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"], "entry_point": "extract_values", "canonical_solution": "\nimport re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))\n", "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n", "base_input": [["\"Python\", \"PHP\", \"Java\""], ["\"python\",\"program\",\"language\""], ["\"red\",\"blue\",\"green\",\"yellow\""]], "atol": 0}
{"task_id": 564, "prompt": "'''\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n'''", "test_imports": [], "test_list": ["assert count_Pairs([1,2,1],3) == 2", "assert count_Pairs([1,1,1,1],4) == 0", "assert count_Pairs([1,2,3,4,5],5) == 10"], "entry_point": "count_Pairs", "canonical_solution": "\ndef count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt; \n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10\n", "base_input": [[[1, 2, 1], 3], [[1, 1, 1, 1], 4], [[1, 2, 3, 4, 5], 5]], "atol": 0}
{"task_id": 565, "prompt": "'''\nWrite a python function to split a string into characters.\n'''", "test_imports": [], "test_list": ["assert split('python') == ['p','y','t','h','o','n']", "assert split('Name') == ['N','a','m','e']", "assert split('program') == ['p','r','o','g','r','a','m']"], "entry_point": "split", "canonical_solution": "\ndef split(word): \n    return list(word)\n", "contract": "\n    assert isinstance(word, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']\n", "base_input": [["python"], ["Name"], ["program"]], "atol": 0}
{"task_id": 566, "prompt": "'''\nWrite a function to get the sum of the digits of a non-negative integer.\n'''", "test_imports": [], "test_list": ["assert sum_digits(345)==12", "assert sum_digits(12)==3", "assert sum_digits(97)==16"], "entry_point": "sum_digits", "canonical_solution": "\ndef sum_digits(n):\n  return sum(map(int, str(n)))\n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16\n", "base_input": [[345], [12], [97]], "atol": 0}
{"task_id": 567, "prompt": "'''\nWrite a function to check whether a specified list is sorted or not.\n'''", "test_imports": [], "test_list": ["assert issort_list([1,2,4,6,8,10,12,14,16,17])==True", "assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False", "assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"], "entry_point": "issort_list", "canonical_solution": "\ndef issort_list(list1):\n    return all(a <= b for a, b in zip(list1, list1[1:]))\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False\n", "base_input": [[[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]], [[1, 2, 4, 6, 8, 10, 12, 14, 20, 17]], [[1, 2, 4, 6, 8, 10, 15, 14, 20]]], "atol": 0}
{"task_id": 568, "prompt": "'''\nWrite a function to create a list of N empty dictionaries.\n'''", "test_imports": [], "test_list": ["assert empty_list(5)==[{},{},{},{},{}]", "assert empty_list(6)==[{},{},{},{},{},{}]", "assert empty_list(7)==[{},{},{},{},{},{},{}]"], "entry_point": "empty_list", "canonical_solution": "\ndef empty_list(length):\n return [{} for _ in range(length)]\n", "contract": "\n assert isinstance(length, int), \"invalid inputs\" # $_CONTRACT_$\n assert length >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]\n", "base_input": [[5], [6], [7]], "atol": 0}
{"task_id": 569, "prompt": "'''\nWrite a function to sort each sublist of strings in a given list of lists.\n'''", "test_imports": [], "test_list": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]", "assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]", "assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"], "entry_point": "sort_sublists", "canonical_solution": "\ndef sort_sublists(list1):\n    return list(map(sorted,list1)) \n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for sublist in list1 for x in sublist), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n", "base_input": [[[["green", "orange"], ["black", "white"], ["white", "black", "orange"]]], [[["green", "orange"], ["black"], ["green", "orange"], ["white"]]], [[["a", "b"], ["d", "c"], ["g", "h"], ["f", "e"]]]], "atol": 0}
{"task_id": 572, "prompt": "'''\nWrite a python function to remove duplicate numbers from a given number of lists.\n'''", "test_imports": [], "test_list": ["assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]", "assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]", "assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"], "entry_point": "two_unique_nums", "canonical_solution": "\ndef two_unique_nums(nums):\n  return [n for n in nums if nums.count(n)==1]\n", "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n", "base_input": [[[1, 2, 3, 2, 3, 4, 5]], [[1, 2, 3, 2, 4, 5]], [[1, 2, 3, 4, 5]]], "atol": 0}
{"task_id": 573, "prompt": "'''\nWrite a python function to calculate the product of the unique numbers in a given list.\n'''", "test_imports": [], "test_list": ["assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000", "assert unique_product([1, 2, 3, 1,]) == 6", "assert unique_product([7, 8, 9, 0, 1, 1]) == 0"], "entry_point": "unique_product", "canonical_solution": "\ndef unique_product(list_data):\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))\n", "contract": "\n    assert isinstance(list_data, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list_data), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0\n", "base_input": [[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 1]], [[7, 8, 9, 0, 1, 1]]], "atol": 0}
{"task_id": 574, "prompt": "'''\nWrite a function to find the surface area of a cylinder.\n'''", "test_imports": [], "test_list": ["assert surfacearea_cylinder(10,5)==942.45", "assert surfacearea_cylinder(4,5)==226.18800000000002", "assert surfacearea_cylinder(4,10)==351.848"], "entry_point": "surfacearea_cylinder", "canonical_solution": "\nfrom math import pi\ndef surfacearea_cylinder(r,h):\n  return (2*pi*r*r) + (2*pi*r*h)\n", "contract": "\n  assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, int), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(surfacearea_cylinder(10,5), 942.45, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4,5), 226.18800000000002, rel_tol=0.001)\nassert math.isclose(surfacearea_cylinder(4,10), 351.848, rel_tol=0.001)\n", "base_input": [[10, 5], [4, 5], [4, 10]], "atol": 0.0001}
{"task_id": 576, "prompt": "'''\nWrite a python function to check whether a list is sublist of another or not.\n'''", "test_imports": [], "test_list": ["assert is_Sub_Array([1,4,3,5],[1,2]) == False", "assert is_Sub_Array([1,2,1],[1,2,1]) == True", "assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False"], "entry_point": "is_Sub_Array", "canonical_solution": "\ndef is_Sub_Array(A,B): \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)\n", "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(B, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,1],[1,2,1]) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0]) ==False\n", "base_input": [[[1, 4, 3, 5], [1, 2]], [[1, 2, 1], [1, 2, 1]], [[1, 0, 2, 2], [2, 2, 0]]], "atol": 0}
{"task_id": 577, "prompt": "'''\nWrite a python function to find the last digit in factorial of a given number.\n'''", "test_imports": [], "test_list": ["assert last_Digit_Factorial(4) == 4", "assert last_Digit_Factorial(21) == 0", "assert last_Digit_Factorial(30) == 0"], "entry_point": "last_Digit_Factorial", "canonical_solution": "\ndef last_Digit_Factorial(n): \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0\n", "contract": "\n    assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0\n", "base_input": [[4], [21], [30]], "atol": 0}
{"task_id": 578, "prompt": "'''\nWrite a function to interleave 3 lists of the same length into a single flat list.\n'''", "test_imports": [], "test_list": ["assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]", "assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]", "assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"], "entry_point": "interleave_lists", "canonical_solution": "\ndef interleave_lists(list1, list2, list3):\n    return [el for pair in zip(list1, list2, list3) for el in pair]\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(list3, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(list1) == len(list2) == len(list3), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]], [[10, 20], [15, 2], [5, 10]], [[11, 44], [10, 15], [20, 5]]], "atol": 0}
{"task_id": 579, "prompt": "'''\nWrite a function to find the dissimilar elements in the given two tuples.\n'''", "test_imports": [], "test_list": ["assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)", "assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)", "assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"], "entry_point": "find_dissimilar", "canonical_solution": "\ndef find_dissimilar(test_tup1, test_tup2):\n  return tuple(set(test_tup1) ^ set(test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [7, 2, 3, 9]], [[21, 11, 25, 26], [26, 34, 21, 36]]], "atol": 0}
{"task_id": 580, "prompt": "'''\nWrite a function to remove uneven elements in the nested mixed tuple.\n'''", "test_imports": [], "test_list": ["assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)", "assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))", "assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"], "entry_point": "extract_even", "canonical_solution": "\ndef even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\treturn even_ele(test_tuple)\n", "contract": "\n\tdef tuple_check(t): # $_CONTRACT_$\n\t\tif not isinstance(t, tuple): # $_CONTRACT_$\n\t\t\treturn isinstance(t, (int, float)) # $_CONTRACT_$\n\t\telse: # $_CONTRACT_$\n\t\t\treturn all(tuple_check(item) for item in t) # $_CONTRACT_$\n\tassert isinstance(test_tuple, tuple) # $_CONTRACT_$\n\tassert tuple_check(test_tuple) # $_CONTRACT_$\n", "assertion": "\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n", "base_input": [[[4, 5, [7, 6, [2, 4]], 6, 8]], [[5, 6, [8, 7, [4, 8]], 7, 9]], [[5, 6, [9, 8, [4, 6]], 8, 10]]], "atol": 0}
{"task_id": 581, "prompt": "'''\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n'''", "test_imports": [], "test_list": ["assert surface_Area(3,4) == 33", "assert surface_Area(4,5) == 56", "assert surface_Area(1,2) == 5"], "entry_point": "surface_Area", "canonical_solution": "\ndef surface_Area(b,s): \n    return 2 * b * s + pow(b,2) \n", "contract": "\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(s, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert b > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert s > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5\n", "base_input": [[3, 4], [4, 5], [1, 2]], "atol": 0}
{"task_id": 582, "prompt": "'''\nWrite a function to check if a dictionary is empty\n'''", "test_imports": [], "test_list": ["assert my_dict({10})==False", "assert my_dict({11})==False", "assert my_dict({})==True"], "entry_point": "my_dict", "canonical_solution": "\ndef my_dict(dict1):\n   assert isinstance(dict1, dict)\n   return dict1 == {}\n", "contract": "\n", "assertion": "\nassert my_dict({10: 0})==False\nassert my_dict({11: 0})==False\nassert my_dict({})==True\n", "base_input": [[{"10": 0}], [{"11": 0}], [{}]], "atol": 0}
{"task_id": 583, "prompt": "'''\nWrite a function which returns nth catalan number.\n'''", "test_imports": [], "test_list": ["assert catalan_number(10)==16796", "assert catalan_number(9)==4862", "assert catalan_number(7)==429"], "entry_point": "catalan_number", "canonical_solution": "\ndef catalan_number(num):\n    if num <= 1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num\n", "contract": "\n    assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n    assert num >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429\n", "base_input": [[10], [9], [7]], "atol": 0}
{"task_id": 584, "prompt": "'''\nWrite a function to find the first adverb ending with ly and its positions in a given string.\n'''", "test_imports": [], "test_list": ["assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'", "assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'", "assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"], "entry_point": "find_adverbs", "canonical_solution": "\nimport re\ndef find_adverbs(text):\n  for m in re.finditer(r\"\\w+ly\", text):\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))\n", "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'\n", "base_input": [["Clearly, he has no excuse for such behavior."], ["Please handle the situation carefuly"], ["Complete the task quickly"]], "atol": 0}
{"task_id": 585, "prompt": "'''\nWrite a function to find the n most expensive items in a given dataset.\n'''", "test_imports": [], "test_list": ["assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]", "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]", "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"], "entry_point": "expensive_items", "canonical_solution": "\nimport heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items\n", "contract": "\n  assert isinstance(items, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, dict) for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('name' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all('price' in x.keys() for x in items), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x['price'], (int, float)) for x in items), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]\n", "base_input": [[[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}], 1], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 45.09}], 2], [[{"name": "Item-1", "price": 101.1}, {"name": "Item-2", "price": 555.22}, {"name": "Item-3", "price": 45.09}, {"name": "Item-4", "price": 22.75}], 1]], "atol": 0}
{"task_id": 586, "prompt": "'''\nWrite a python function to split a list at the nth eelment and add the first part to the end.\n'''", "test_imports": [], "test_list": ["assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]", "assert split_Arr([1,2,3,4],1) == [2,3,4,1]", "assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]"], "entry_point": "split_Arr", "canonical_solution": "\ndef split_Arr(l, n):\n  return l[n:] + l[:n]\n", "contract": "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= len(l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]\n", "base_input": [[[12, 10, 5, 6, 52, 36], 2], [[1, 2, 3, 4], 1], [[0, 1, 2, 3, 4, 5, 6, 7], 3]], "atol": 0}
{"task_id": 587, "prompt": "'''\nWrite a function to convert a list to a tuple.\n'''", "test_imports": [], "test_list": ["assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)", "assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)", "assert list_tuple([58,44,56])==(58,44,56)"], "entry_point": "list_tuple", "canonical_solution": "\ndef list_tuple(listx):\n  return tuple(listx)\n", "contract": "\n  assert isinstance(listx, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)\n", "base_input": [[[5, 10, 7, 4, 15, 3]], [[2, 4, 5, 6, 2, 3, 4, 4, 7]], [[58, 44, 56]]], "atol": 0}
{"task_id": 588, "prompt": "'''\nWrite a python function to find the difference between largest and smallest value in a given list.\n'''", "test_imports": [], "test_list": ["assert big_diff([1,2,3,4]) == 3", "assert big_diff([4,5,12]) == 8", "assert big_diff([9,2,3]) == 7"], "entry_point": "big_diff", "canonical_solution": "\ndef big_diff(nums):\n     return max(nums) - min(nums)\n", "contract": "\n     assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n     assert len(nums) > 0, \"invalid inputs\" # $_CONTRACT_$\n     assert all(isinstance(x, (int, float)) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7\n", "base_input": [[[1, 2, 3, 4]], [[4, 5, 12]], [[9, 2, 3]]], "atol": 0}
{"task_id": 589, "prompt": "'''\nWrite a function to find perfect squares between two given numbers.\n'''", "test_imports": [], "test_list": ["assert perfect_squares(1,30)==[1, 4, 9, 16, 25]", "assert perfect_squares(50,100)==[64, 81, 100]", "assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"], "entry_point": "perfect_squares", "canonical_solution": "\nimport math\ndef perfect_squares(a, b):\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))\n", "contract": "\n    assert isinstance(a, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]\n", "base_input": [[1, 30], [50, 100], [100, 200]], "atol": 0}
{"task_id": 590, "prompt": "'''\nWrite a function to convert polar coordinates to rectangular coordinates.\n'''", "test_imports": [], "test_list": ["assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))", "assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))", "assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"], "entry_point": "polar_rect", "canonical_solution": "\nimport cmath\ndef polar_rect(x,y):\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)\n", "contract": "\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(y, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert polar_rect(3, 4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4, 7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15, 17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n", "base_input": [[3, 4], [4, 7], [15, 17]], "atol": 0}
{"task_id": 591, "prompt": "'''\nWrite a python function to interchange the first and last elements in a list.\n'''", "test_imports": [], "test_list": ["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "assert swap_List([1, 2, 3]) == [3, 2, 1]", "assert swap_List([4, 5, 6]) == [6, 5, 4]"], "entry_point": "swap_List", "canonical_solution": "\ndef swap_List(newList): \n    return newList[-1:] + newList[1:-1] + newList[:1]\n", "contract": "\n    assert isinstance(newList, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newList) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]\n", "base_input": [[[12, 35, 9, 56, 24]], [[1, 2, 3]], [[4, 5, 6]]], "atol": 0}
{"task_id": 592, "prompt": "'''\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n'''", "test_imports": [], "test_list": ["assert sum_Of_product(3) == 15", "assert sum_Of_product(4) == 56", "assert sum_Of_product(1) == 1"], "entry_point": "sum_Of_product", "canonical_solution": "\ndef binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n, n - 1); \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1\n", "base_input": [[3], [4], [1]], "atol": 0}
{"task_id": 593, "prompt": "'''\nWrite a function to remove leading zeroes from an ip address.\n'''", "test_imports": [], "test_list": ["assert removezero_ip(\"216.08.094.196\")==('216.8.94.196')", "assert removezero_ip(\"12.01.024\")==('12.1.24')", "assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')"], "entry_point": "removezero_ip", "canonical_solution": "\nimport re\ndef removezero_ip(ip):\n return re.sub('\\.[0]*', '.', ip)\n", "contract": "\n assert isinstance(ip, str), \"invalid inputs\" # $_CONTRACT_$\n assert len(ip) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\nassert removezero_ip(\"12.01.024\")==('12.1.24')\nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196')\n", "base_input": [["216.08.094.196"], ["12.01.024"], ["216.08.094.0196"]], "atol": 0}
{"task_id": 594, "prompt": "'''\nWrite a function to find the difference of the first even and first odd number of a given list.\n'''", "test_imports": [], "test_list": ["assert diff_even_odd([1,3,5,7,4,1,6,8])==3", "assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1", "assert diff_even_odd([1,5,7,9,10])==9"], "entry_point": "diff_even_odd", "canonical_solution": "\ndef diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), -1)\n    first_odd = next((el for el in list1 if el%2!=0), -1)\n    return (first_even - first_odd)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, int) for i in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2==0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(el%2!=0 for el in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9\n", "base_input": [[[1, 3, 5, 7, 4, 1, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 5, 7, 9, 10]]], "atol": 0}
{"task_id": 595, "prompt": "'''\nWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n'''", "test_imports": [], "test_list": ["assert min_Swaps(\"1101\",\"1110\") == 1", "assert min_Swaps(\"111\",\"000\") == \"Not Possible\"", "assert min_Swaps(\"111\",\"110\") == \"Not Possible\""], "entry_point": "min_Swaps", "canonical_solution": "\ndef min_Swaps(str1,str2) : \n    diff_bit = sum(str1[i] != str2[i] for i in range(len(str1)))\n    if diff_bit % 2 == 0 : \n        return diff_bit // 2\n    else : \n        return None\n", "contract": "\n    assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(str2, str), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in str1]), \"invalid inputs\" # $_CONTRACT_$\n    assert all([c in '01' for c in str2]), \"invalid inputs\" # $_CONTRACT_$\n    assert len(str1) == len(str2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == None\nassert min_Swaps(\"111\",\"110\") == None\n", "base_input": [["1101", "1110"], ["111", "000"], ["111", "110"]], "atol": 0}
{"task_id": 596, "prompt": "'''\nWrite a function to find the size in bytes of the given tuple.\n'''", "test_imports": [], "test_list": ["assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))", "assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))", "assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"], "entry_point": "tuple_size", "canonical_solution": "\nimport sys \ndef tuple_size(tuple_list):\n  return sys.getsizeof(tuple_list)\n", "contract": "\n  assert isinstance(tuple_list, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n", "base_input": [[["A", 1, "B", 2, "C", 3]], [[1, "Raju", 2, "Nikhil", 3, "Deepanshu"]], [[[1, "Lion"], [2, "Tiger"], [3, "Fox"], [4, "Wolf"]]]], "atol": 0}
{"task_id": 597, "prompt": "'''\nWrite a function to find kth element from the given two sorted arrays.\n'''", "test_imports": [], "test_list": ["assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6", "assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256", "assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8"], "entry_point": "find_kth", "canonical_solution": "\ndef find_kth(arr1, arr2, k):\n\treturn sorted(arr1 + arr2)[k - 1]\n", "contract": "\n\tassert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert 0 < k <= len(arr1) + len(arr2), \"invalid inputs\" # $_CONTRACT_$j\n", "assertion": "\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8\n", "base_input": [[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5], [[100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7], [[3, 4, 7, 8, 10], [2, 5, 9, 11], 6]], "atol": 0}
{"task_id": 598, "prompt": "'''\nWrite a function to check whether the given number is armstrong or not.\n'''", "test_imports": [], "test_list": ["assert armstrong_number(153)==True", "assert armstrong_number(259)==False", "assert armstrong_number(4458)==False"], "entry_point": "armstrong_number", "canonical_solution": "\ndef armstrong_number(number):\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number\n", "contract": "\n    assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n    assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False\n", "base_input": [[153], [259], [4458]], "atol": 0}
{"task_id": 599, "prompt": "'''\nWrite a function to find sum and average of first n natural numbers.\n'''", "test_imports": [], "test_list": ["assert sum_average(10)==(55, 5.5)", "assert sum_average(15)==(120, 8.0)", "assert sum_average(20)==(210, 10.5)"], "entry_point": "sum_average", "canonical_solution": "\ndef sum_average(number):\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average\n", "contract": "\n   assert isinstance(number, int), \"invalid inputs\" # $_CONTRACT_$\n   assert number > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)\n", "base_input": [[10], [15], [20]], "atol": 0}
{"task_id": 600, "prompt": "'''\nWrite a python function to check whether the given number is even or not.\n'''", "test_imports": [], "test_list": ["assert is_Even(1) == False", "assert is_Even(2) == True", "assert is_Even(3) == False"], "entry_point": "is_Even", "canonical_solution": "\ndef is_Even(n) : \n    return n % 2 == 0\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\n", "base_input": [[1], [2], [3]], "atol": 0}
{"task_id": 602, "prompt": "'''\nWrite a python function to find the first repeated character in a given string.\n'''", "test_imports": [], "test_list": ["assert first_repeated_char(\"abcabc\") == \"a\"", "assert first_repeated_char(\"abc\") == None", "assert first_repeated_char(\"123123\") == \"1\""], "entry_point": "first_repeated_char", "canonical_solution": "\ndef first_repeated_char(str1):\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None\n", "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$I\n", "assertion": "\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == None\nassert first_repeated_char(\"123123\") == \"1\"\n", "base_input": [["abcabc"], ["abc"], ["123123"]], "atol": 0}
{"task_id": 603, "prompt": "'''\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\n'''", "test_imports": [], "test_list": ["assert get_ludic(10) == [1, 2, 3, 5, 7]", "assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]", "assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"], "entry_point": "get_ludic", "canonical_solution": "\ndef get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n", "base_input": [[10], [25], [45]], "atol": 0}
{"task_id": 604, "prompt": "'''\nWrite a function to reverse words seperated by spaces in a given string.\n'''", "test_imports": [], "test_list": ["assert reverse_words(\"python program\")==(\"program python\")", "assert reverse_words(\"java language\")==(\"language java\")", "assert reverse_words(\"indian man\")==(\"man indian\")"], "entry_point": "reverse_words", "canonical_solution": "\ndef reverse_words(s):\n\treturn ' '.join(reversed(s.split()))\n", "contract": "\n\tassert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")\n", "base_input": [["python program"], ["java language"], ["indian man"]], "atol": 0}
{"task_id": 605, "prompt": "'''\nWrite a function to check if the given integer is a prime number.\n'''", "test_imports": [], "test_list": ["assert prime_num(13)==True", "assert prime_num(7)==True", "assert prime_num(-1010)==False"], "entry_point": "prime_num", "canonical_solution": "\nimport math\ndef prime_num(num):\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True\n", "contract": "\n  assert isinstance(num, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False\n", "base_input": [[13], [7], [-1010]], "atol": 0}
{"task_id": 606, "prompt": "'''\nWrite a function to convert degrees to radians.\n'''", "test_imports": [], "test_list": ["assert radian_degree(90)==1.5707963267948966", "assert radian_degree(60)==1.0471975511965976", "assert radian_degree(120)==2.0943951023931953"], "entry_point": "radian_degree", "canonical_solution": "\nimport math\ndef radian_degree(degree):\n    return degree * math.pi / 180\n", "contract": "\n    assert isinstance(degree, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953\n", "base_input": [[90], [60], [120]], "atol": 0}
{"task_id": 607, "prompt": "'''\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n'''", "test_imports": [], "test_list": ["assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)", "assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)", "assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"], "entry_point": "find_literals", "canonical_solution": "\nimport re\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)\n", "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n", "base_input": [["The quick brown fox jumps over the lazy dog.", "fox"], ["Its been a very crazy procedure right", "crazy"], ["Hardest choices required strongest will", "will"]], "atol": 0}
{"task_id": 608, "prompt": "'''\nWrite a python function to find nth bell number.\n'''", "test_imports": [], "test_list": ["assert bell_Number(2) == 2", "assert bell_Number(3) == 5", "assert bell_Number(4) == 15"], "entry_point": "bell_Number", "canonical_solution": "\ndef bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0] \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\n", "base_input": [[2], [3], [4]], "atol": 0}
{"task_id": 610, "prompt": "'''\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n'''", "test_imports": [], "test_list": ["assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]", "assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]", "assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"], "entry_point": "remove_kth_element", "canonical_solution": "\ndef remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(k, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 < k <= len(list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]\n", "base_input": [[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5]], "atol": 0}
{"task_id": 611, "prompt": "'''\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n'''", "test_imports": [], "test_list": ["assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19", "assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10", "assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11"], "entry_point": "max_of_nth", "canonical_solution": "\ndef max_of_nth(test_list, N):\n  return max([sub[N] for sub in test_list])\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(row, list) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list[0]) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(row) == len(test_list[0]) for row in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(item, (int, float)) for row in test_list for item in row), \"invalid inputs\" # $_CONTRACT_$\n  assert N < len(test_list[0]), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10\nassert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11\n", "base_input": [[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1], [[[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1]], "atol": 0}
{"task_id": 612, "prompt": "'''\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n'''", "test_imports": [], "test_list": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]", "assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]", "assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"], "entry_point": "merge", "canonical_solution": "\ndef merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))] \n", "contract": "\n    assert isinstance(lst, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(lst) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(sublist) == 2 for sublist in lst), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]) == [[[1], [3], [5], [7]], [[2], [4], [6], [8]]]\n", "base_input": [[[["x", "y"], ["a", "b"], ["m", "n"]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[[1], [2]], [[3], [4]], [[5], [6]], [[7], [8]]]]], "atol": 0}
{"task_id": 614, "prompt": "'''\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\n'''", "test_imports": [], "test_list": ["assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30", "assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37", "assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44"], "entry_point": "cummulative_sum", "canonical_solution": "\ndef cummulative_sum(test_list):\n  return sum(map(sum, test_list))\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, tuple) for el in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in sum(test_list, ())), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44\n", "base_input": [[[[1, 3], [5, 6, 7], [2, 6]]], [[[2, 4], [6, 7, 8], [3, 7]]], [[[3, 5], [7, 8, 9], [4, 8]]]], "atol": 0}
{"task_id": 615, "prompt": "'''\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n'''", "test_imports": [], "test_list": ["assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]", "assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]", "assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]"], "entry_point": "average_tuple", "canonical_solution": "\ndef average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result\n", "contract": "\n    assert isinstance(nums, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in nums), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in sum(nums, ())), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]\n", "base_input": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]], [[[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]]], [[[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]]]], "atol": 0}
{"task_id": 616, "prompt": "'''\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\n'''", "test_imports": [], "test_list": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)", "assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)", "assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"], "entry_point": "tuple_modulo", "canonical_solution": "\ndef tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res) \n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1 + test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x > 0 for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n", "base_input": [[[10, 4, 5, 6], [5, 6, 7, 5]], [[11, 5, 6, 7], [6, 7, 8, 6]], [[12, 6, 7, 8], [7, 8, 9, 7]]], "atol": 0}
{"task_id": 617, "prompt": "'''\nWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n'''", "test_imports": [], "test_list": ["assert min_Jumps((3,4),11)==3.5", "assert min_Jumps((3,4),0)==0", "assert min_Jumps((11,14),11)==1"], "entry_point": "min_Jumps", "canonical_solution": "\ndef min_Jumps(steps, d): \n    (a, b) = steps\n    temp = a \n    a = min(a, b) \n    b = max(temp, b) \n    if (d >= b): \n        return (d + b - 1) / b \n    if (d == 0): \n        return 0\n    if (d == a): \n        return 1\n    else:\n        return 2\n", "contract": "\n    assert isinstance(steps, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert len(steps) == 2, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in steps), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(d, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_Jumps((3,4),11)==3.5\nassert min_Jumps((3,4),0)==0\nassert min_Jumps((11,14),11)==1\n", "base_input": [[[3, 4], 11], [[3, 4], 0], [[11, 14], 11]], "atol": 0}
{"task_id": 618, "prompt": "'''\nWrite a function to divide two lists element wise.\n'''", "test_imports": [], "test_list": ["assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]", "assert div_list([3,2],[1,4])==[3.0, 0.5]", "assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"], "entry_point": "div_list", "canonical_solution": "\ndef div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)\n", "contract": "\n  assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums2) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in nums1 + nums2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x != 0 for x in nums2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]\n", "base_input": [[[4, 5, 6], [1, 2, 3]], [[3, 2], [1, 4]], [[90, 120], [50, 70]]], "atol": 0}
{"task_id": 619, "prompt": "'''\nWrite a function to move all the numbers to the end of the given string.\n'''", "test_imports": [], "test_list": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'", "assert move_num('Avengers124Assemble') == 'AvengersAssemble124'", "assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"], "entry_point": "move_num", "canonical_solution": "\ndef move_num(test_str):\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str\n", "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n", "base_input": [["I1love143you55three3000thousand"], ["Avengers124Assemble"], ["Its11our12path13to14see15things16do17things"]], "atol": 0}
{"task_id": 620, "prompt": "'''\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n'''", "test_imports": [], "test_list": ["assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4", "assert largest_subset([10, 5, 3, 15, 20]) == 3", "assert largest_subset([18, 1, 3, 6, 13, 17]) == 4"], "entry_point": "largest_subset", "canonical_solution": "\ndef largest_subset(a):\n\tn = len(a)\n\tdp = [0 for _ in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)\n", "contract": "\n\tassert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert len(a) >= 2, \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(el, (int, float)) for el in a), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\nassert largest_subset([10, 5, 3, 15, 20]) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17]) == 4\n", "base_input": [[[1, 3, 6, 13, 17, 18]], [[10, 5, 3, 15, 20]], [[18, 1, 3, 6, 13, 17]]], "atol": 0}
{"task_id": 622, "prompt": "'''\nWrite a function to find the median of two sorted lists of same size.\n'''", "test_imports": [], "test_list": ["assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0", "assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5", "assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"], "entry_point": "get_median", "canonical_solution": "\ndef get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2\n", "contract": "\n  assert isinstance(arr1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(arr2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= n <= min(len(arr1), len(arr2)), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, (int, float)) for el in arr1 + arr2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr1[0:n], arr1[1:n])), \"invalid inputs\" # $_CONTRACT_$\n  assert all(x <= y for x, y in zip(arr2[0:n], arr2[1:n])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n", "base_input": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[2, 4, 8, 9], [7, 13, 19, 28], 4], [[3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6]], "atol": 0}
{"task_id": 623, "prompt": "'''\nWrite a function to compute the n-th power of each number in a list.\n'''", "test_imports": [], "test_list": ["assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]", "assert nth_nums([10,20,30],3)==([1000, 8000, 27000])", "assert nth_nums([12,15],5)==([248832, 759375])"], "entry_point": "nth_nums", "canonical_solution": "\ndef nth_nums(nums, n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums\n", "contract": "\n assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(el, (int, float)) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(n, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[10, 20, 30], 3], [[12, 15], 5]], "atol": 0}
{"task_id": 624, "prompt": "'''\nWrite a python function to convert a given string to uppercase.\n'''", "test_imports": [], "test_list": ["assert is_upper(\"person\") ==\"PERSON\"", "assert is_upper(\"final\") == \"FINAL\"", "assert is_upper(\"Valid\") == \"VALID\""], "entry_point": "is_upper", "canonical_solution": "\ndef is_upper(string):\n  return string.upper()\n", "contract": "\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"\n", "base_input": [["person"], ["final"], ["Valid"]], "atol": 0}
{"task_id": 625, "prompt": "'''\nWrite a python function to interchange the first and last element in a given list.\n'''", "test_imports": [], "test_list": ["assert swap_List([1,2,3]) == [3,2,1]", "assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]", "assert swap_List([4,5,6]) == [6,5,4]"], "entry_point": "swap_List", "canonical_solution": "\ndef swap_List(newList): \n    size = len(newList) \n    temp = newList[0] \n    newList[0] = newList[size - 1] \n    newList[size - 1] = temp   \n    return newList \n", "contract": "\n    assert isinstance(newList, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(newList) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]\n", "base_input": [[[1, 2, 3]], [[1, 2, 3, 4, 4]], [[4, 5, 6]]], "atol": 0}
{"task_id": 626, "prompt": "'''\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n'''", "test_imports": [], "test_list": ["assert triangle_area(-1) == None", "assert triangle_area(0) == 0", "assert triangle_area(2) == 4"], "entry_point": "triangle_area", "canonical_solution": "\ndef triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r \n", "contract": "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(2) == 4\n", "base_input": [[-1], [0], [2]], "atol": 0}
{"task_id": 627, "prompt": "'''\nWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n'''", "test_imports": [], "test_list": ["assert find_First_Missing([0,1,2,3]) == 4", "assert find_First_Missing([0,1,2,6,9]) == 3", "assert find_First_Missing([2,3,5,8,9]) == 0"], "entry_point": "find_First_Missing", "canonical_solution": "\ndef find_First_Missing(array,start=0,end=None):\n    if end is None:\n      end = len(array) - 1   \n    if (start > end): \n        return end + 1\n    if (start != array[start]): \n        return start; \n    mid = int((start + end) / 2) \n    if (array[mid] == mid): \n        return find_First_Missing(array,mid+1,end) \n    return find_First_Missing(array,start,mid) \n", "contract": "\n    assert isinstance(array, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in array), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x >= 0 for x in array), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a < b for a, b in zip(array, array[1:])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_First_Missing([0,1,2,3]) == 4\nassert find_First_Missing([0,1,2,6,9]) == 3\nassert find_First_Missing([2,3,5,8,9]) == 0\n", "base_input": [[[0, 1, 2, 3]], [[0, 1, 2, 6, 9]], [[2, 3, 5, 8, 9]]], "atol": 0}
{"task_id": 628, "prompt": "'''\nWrite a function to replace all spaces in the given string with '%20'.\n'''", "test_imports": [], "test_list": ["assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'", "assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'", "assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"], "entry_point": "replace_spaces", "canonical_solution": "\ndef replace_spaces(string):\n  return string.replace(\" \", \"%20\")\n", "contract": "\n  assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'\n", "base_input": [["My Name is Dawood"], ["I am a Programmer"], ["I love Coding"]], "atol": 0}
{"task_id": 629, "prompt": "'''\nWrite a python function to find even numbers from a list of numbers.\n'''", "test_imports": [], "test_list": ["assert Split([1,2,3,4,5]) == [2,4]", "assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]", "assert Split ([8,12,15,19]) == [8,12]"], "entry_point": "Split", "canonical_solution": "\ndef Split(l): \n    return [num for num in l if num % 2 == 0]\n", "contract": "\n    assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]\n", "base_input": [[[1, 2, 3, 4, 5]], [[4, 5, 6, 7, 8, 0, 1]], [[8, 12, 15, 19]]], "atol": 0}
{"task_id": 630, "prompt": "'''\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n'''", "test_imports": [], "test_list": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]", "assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]", "assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"], "entry_point": "get_coordinates", "canonical_solution": "\ndef adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n", "base_input": [[[3, 4]], [[4, 5]], [[5, 6]]], "atol": 0}
{"task_id": 631, "prompt": "'''\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n'''", "test_imports": [], "test_list": ["assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'", "assert replace_spaces('The_Avengers') == 'The Avengers'", "assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"], "entry_point": "replace_spaces", "canonical_solution": "\ndef replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)\n", "contract": "\n  assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The_Avengers') == 'The Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'\n", "base_input": [["Jumanji The Jungle"], ["The_Avengers"], ["Fast and Furious"]], "atol": 0}
{"task_id": 632, "prompt": "'''\nWrite a python function to move all zeroes to the end of the given list.\n'''", "test_imports": [], "test_list": ["assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]", "assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]", "assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"], "entry_point": "move_zero", "canonical_solution": "\ndef move_zero(num_list):\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros\n", "contract": "\n    assert isinstance(num_list, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in num_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]\n", "base_input": [[[1, 0, 2, 0, 3, 4]], [[2, 3, 2, 0, 0, 4, 0, 5, 0]], [[0, 1, 0, 1, 1]]], "atol": 0}
{"task_id": 633, "prompt": "'''\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n'''", "test_imports": [], "test_list": ["assert pair_xor_Sum([5,9,7,6],4) == 47", "assert pair_xor_Sum([7,3,5],3) == 12", "assert pair_xor_Sum([7,3],2) == 4"], "entry_point": "pair_xor_Sum", "canonical_solution": "\ndef pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans \n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert n <= len(arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([7,3,5],3) == 12\nassert pair_xor_Sum([7,3],2) == 4\n", "base_input": [[[5, 9, 7, 6], 4], [[7, 3, 5], 3], [[7, 3], 2]], "atol": 0}
{"task_id": 635, "prompt": "'''\nWrite a function to sort the given list.\n'''", "test_imports": [], "test_list": ["assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]", "assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"], "entry_point": "heap_sort", "canonical_solution": "\nimport heapq as hq\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]\n", "contract": "\n    assert isinstance(iterable, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in iterable), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]\n", "base_input": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[25, 35, 22, 85, 14, 65, 75, 25, 58]], [[7, 1, 9, 5]]], "atol": 0}
{"task_id": 637, "prompt": "'''\nWrite a function to check whether the given amount has no profit and no loss\n'''", "test_imports": [], "test_list": ["assert noprofit_noloss(1500,1200)==False", "assert noprofit_noloss(100,100)==True", "assert noprofit_noloss(2000,5000)==False"], "entry_point": "noprofit_noloss", "canonical_solution": "\ndef noprofit_noloss(actual_cost, sale_amount): \n  return actual_cost == sale_amount\n", "contract": "\n  assert isinstance(actual_cost, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(sale_amount, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False\n", "base_input": [[1500, 1200], [100, 100], [2000, 5000]], "atol": 0}
{"task_id": 638, "prompt": "'''\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n'''", "test_imports": [], "test_list": ["assert wind_chill(120,35)==40", "assert wind_chill(40,20)==19", "assert wind_chill(10,8)==6"], "entry_point": "wind_chill", "canonical_solution": "\nimport math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))\n", "contract": "\n assert isinstance(v, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(t, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert wind_chill(120,35)==40\nassert wind_chill(40,20)==19\nassert wind_chill(10,8)==6\n", "base_input": [[120, 35], [40, 20], [10, 8]], "atol": 0}
{"task_id": 639, "prompt": "'''\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n'''", "test_imports": [], "test_list": ["assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16", "assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10", "assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"], "entry_point": "sample_nam", "canonical_solution": "\ndef sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))\n", "contract": "\n  assert isinstance(sample_names, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in sample_names), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6\n", "base_input": [[["sally", "Dylan", "rebecca", "Diana", "Joanne", "keith"]], [["php", "res", "Python", "abcd", "Java", "aaa"]], [["abcd", "Python", "abba", "aba"]]], "atol": 0}
{"task_id": 640, "prompt": "'''\nWrite a function to remove the parenthesis and what is inbetween them from a string.\n'''", "test_imports": [], "test_list": ["assert remove_parenthesis([\"python (chrome)\"])==(\"python\")", "assert remove_parenthesis([\"string(.abc)\"])==(\"string\")", "assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"], "entry_point": "remove_parenthesis", "canonical_solution": "\nimport re\ndef remove_parenthesis(string):\n    return re.sub(r\"\\([^)]+\\)\", \"\", string)\n", "contract": "\n    assert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_parenthesis(\"python (chrome)\")==\"python \"\nassert remove_parenthesis(\"string(.abc)\")==\"string\"\nassert remove_parenthesis(\"alpha(num)\")==\"alpha\"\n", "base_input": [["python (chrome)"], ["string(.abc)"], ["alpha(num)"]], "atol": 0}
{"task_id": 641, "prompt": "'''\nWrite a function to find the nth nonagonal number.\n'''", "test_imports": [], "test_list": ["assert is_nonagonal(10) == 325", "assert is_nonagonal(15) == 750", "assert is_nonagonal(18) == 1089"], "entry_point": "is_nonagonal", "canonical_solution": "\ndef is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2) \n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089\n", "base_input": [[10], [15], [18]], "atol": 0}
{"task_id": 643, "prompt": "'''\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n'''", "test_imports": [], "test_list": ["assert text_match_wordz_middle(\"pythonzabc.\")==True", "assert text_match_wordz_middle(\"zxyabc.\")==False", "assert text_match_wordz_middle(\"  lang  .\")==False"], "entry_point": "text_match_wordz_middle", "canonical_solution": "\nimport re\ndef text_match_wordz_middle(text):\n\treturn re.search(r'\\Bz\\B',  text) is not None\n", "contract": "\n\tassert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"zxyabc.\")==False\nassert text_match_wordz_middle(\"  lang  .\")==False\n", "base_input": [["pythonzabc."], ["zxyabc."], ["  lang  ."]], "atol": 0}
{"task_id": 644, "prompt": "'''\nWrite a python function to reverse an array upto a given position.\n'''", "test_imports": [], "test_list": ["assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]", "assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]", "assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"], "entry_point": "reverse_Array_Upto_K", "canonical_solution": "\ndef reverse_Array_Upto_K(input, k): \n  return input[k-1::-1] + input[k:]\n", "contract": "\n  assert isinstance(input, list), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 < k <= len(input), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]\n", "base_input": [[[1, 2, 3, 4, 5, 6], 4], [[4, 5, 6, 7], 2], [[9, 8, 7, 6, 5], 3]], "atol": 0}
{"task_id": 720, "prompt": "'''\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\n'''", "test_imports": [], "test_list": ["assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})", "assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})", "assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"], "entry_point": "add_dict_to_tuple", "canonical_solution": "\ndef add_dict_to_tuple(test_tup, test_dict):\n  return test_tup + (test_dict, )\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_dict, dict), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n", "base_input": [[[4, 5, 6], {"MSAM": 1, "is": 2, "best": 3}], [[1, 2, 3], {"UTS": 2, "is": 3, "Worst": 4}], [[8, 9, 10], {"POS": 3, "is": 4, "Okay": 5}]], "atol": 0}
{"task_id": 721, "prompt": "'''\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n'''", "test_imports": [], "test_list": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2", "assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2", "assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2", "assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8"], "entry_point": "maxAverageOfPath", "canonical_solution": "\ndef maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n  # all paths are of length 2 * N - 1, so just divide by that\n  return dp[N - 1][N - 1] / (2 * N - 1)\n", "contract": "\n  assert isinstance(cost, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(cost) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, list) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(x) == len(cost) == len(cost[0]) for x in cost), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in sum(cost, [])), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n", "base_input": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]], [[[2, 3, 4], [7, 6, 5], [8, 4, 10]]], [[[3, 4, 5], [8, 7, 6], [9, 5, 11]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]], "atol": 0}
{"task_id": 722, "prompt": "'''\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n'''", "test_imports": [], "test_list": ["assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}", "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"], "entry_point": "filter_data", "canonical_solution": "\ndef filter_data(students,h,w):\n    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}\n", "contract": "\n    assert isinstance(students, dict), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in students.keys()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, tuple) for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(len(x) == 2 for x in students.values()), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(height, (int, float)) and isinstance(weight, (int, float)) for height, weight in students.values()) # $_CONTRACT_$\n    assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(w, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert h >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert w >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}\n", "base_input": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70], [{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 5.9, 67], [{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 5.7, 64]], "atol": 0}
{"task_id": 723, "prompt": "'''\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n'''", "test_imports": [], "test_list": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4", "assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11", "assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1", "assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3"], "entry_point": "count_same_pair", "canonical_solution": "\nfrom operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result\n", "contract": "\n    assert isinstance(nums1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(nums2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(nums1) == len(nums2), \"invalid inputs\" # $_CONTRACT_$\n    assert all(hasattr(a, '__eq__') and isinstance(a, type(b)) for a, b in zip(nums1, nums2)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2])==1\nassert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]], [[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2]], [[0, 1, 1, 2], [0, 1, 2, 2]]], "atol": 0}
{"task_id": 724, "prompt": "'''\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n'''", "test_imports": [], "test_list": ["assert power_base_sum(2,100)==115", "assert power_base_sum(8,10)==37", "assert power_base_sum(8,15)==62", "assert power_base_sum(3,3)==9"], "entry_point": "power_base_sum", "canonical_solution": "\ndef power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])\n", "contract": "\n    assert isinstance(base, int), \"invalid inputs\" # $_CONTRACT_$\n    assert base >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(power, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62\nassert power_base_sum(3,3)==9\n", "base_input": [[2, 100], [8, 10], [8, 15], [3, 3]], "atol": 0}
{"task_id": 725, "prompt": "'''\nWrite a function to extract values between quotation marks \" \" of the given string.\n'''", "test_imports": [], "test_list": ["assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']", "assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']", "assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']", "assert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []"], "entry_point": "extract_quotation", "canonical_solution": "\nimport re\ndef extract_quotation(text1):\n  return re.findall(r'\"(.*?)\"', text1)\n", "contract": "\n  assert isinstance(text1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\nassert extract_quotation(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\") == []\n", "base_input": [["Cortex \"A53\" Based \"multi\" tasking \"Processor\""], ["Cast your \"favorite\" entertainment \"apps\""], ["Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support"], ["Watch content '4k Ultra HD' resolution with 'HDR 10' Support"]], "atol": 0}
{"task_id": 726, "prompt": "'''\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n'''", "test_imports": [], "test_list": ["assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)", "assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)", "assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)", "assert multiply_elements((12,)) == ()"], "entry_point": "multiply_elements", "canonical_solution": "\ndef multiply_elements(test_tup):\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in test_tup), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\nassert multiply_elements((12,)) == ()\n", "base_input": [[[1, 5, 7, 8, 10]], [[2, 4, 5, 6, 7]], [[12, 13, 14, 9, 15]], [[12]]], "atol": 0}
{"task_id": 728, "prompt": "'''\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n'''", "test_imports": [], "test_list": ["assert sum_list([10,20,30],[15,25,35])==[25,45,65]", "assert sum_list([1,2,3],[5,6,7])==[6,8,10]", "assert sum_list([15,20,30],[15,45,75])==[30,65,105]"], "entry_point": "sum_list", "canonical_solution": "\ndef sum_list(lst1,lst2):\n  return [a + b for a, b in zip(lst1, lst2)] \n", "contract": "\n  assert isinstance(lst1, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(lst2, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(lst1) == len(lst2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]\n", "base_input": [[[10, 20, 30], [15, 25, 35]], [[1, 2, 3], [5, 6, 7]], [[15, 20, 30], [15, 45, 75]]], "atol": 0}
{"task_id": 730, "prompt": "'''\nWrite a function to remove consecutive duplicates of a given list.\n'''", "test_imports": [], "test_list": ["assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]", "assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']", "assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']"], "entry_point": "consecutive_duplicates", "canonical_solution": "\nfrom itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, _ in groupby(nums)] \n", "contract": "\n    assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n", "base_input": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]], [["a", "a", "b", "c", "d", "d"]], [["a", "a", "b", "c", "d", "d", "a", "a"]]], "atol": 0}
{"task_id": 731, "prompt": "'''\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\n'''", "test_imports": [], "test_list": ["assert lateralsurface_cone(5,12)==204.20352248333654", "assert lateralsurface_cone(10,15)==566.3586699569488", "assert lateralsurface_cone(19,17)==1521.8090132193388"], "entry_point": "lateralsurface_cone", "canonical_solution": "\nimport math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l\n", "contract": "\n  assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(h, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert r > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert h > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388\n", "base_input": [[5, 12], [10, 15], [19, 17]], "atol": 0}
{"task_id": 732, "prompt": "'''\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n'''", "test_imports": [], "test_list": ["assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')", "assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')", "assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"], "entry_point": "replace_specialchar", "canonical_solution": "\nimport re\ndef replace_specialchar(text):\n return re.sub(\"[ ,.]\", \":\", text)\n", "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')\n", "base_input": [["Python language, Programming language."], ["a b c,d e f"], ["ram reshma,ram rahim"]], "atol": 0}
{"task_id": 733, "prompt": "'''\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\n'''", "test_imports": [], "test_list": ["assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1", "assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2", "assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"], "entry_point": "find_first_occurrence", "canonical_solution": "\ndef find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result\n", "contract": "\n    assert isinstance(A, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(a, (int, float)) for a in A), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(A, A[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert x in A, \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n", "base_input": [[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 2, 4, 5, 6, 6, 8, 9, 9, 9], 6]], "atol": 0}
{"task_id": 734, "prompt": "'''\nWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n'''", "test_imports": [], "test_list": ["assert sum_Of_Subarray_Prod([1,2,3]) == 20", "assert sum_Of_Subarray_Prod([1,2]) == 5", "assert sum_Of_Subarray_Prod([1,2,3,4]) == 84"], "entry_point": "sum_Of_Subarray_Prod", "canonical_solution": "\ndef sum_Of_Subarray_Prod(arr):\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2]) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 84\n", "base_input": [[[1, 2, 3]], [[1, 2]], [[1, 2, 3, 4]]], "atol": 0}
{"task_id": 735, "prompt": "'''\nWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n'''", "test_imports": [], "test_list": ["assert toggle_middle_bits(9) == 15", "assert toggle_middle_bits(10) == 12", "assert toggle_middle_bits(11) == 13", "assert toggle_middle_bits(0b1000001) == 0b1111111", "assert toggle_middle_bits(0b1001101) == 0b1110011"], "entry_point": "toggle_middle_bits", "canonical_solution": "\ndef toggle_middle_bits(n): \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13\nassert toggle_middle_bits(0b1000001) == 0b1111111\nassert toggle_middle_bits(0b1001101) == 0b1110011\n", "base_input": [[9], [10], [11], [65], [77]], "atol": 0}
{"task_id": 736, "prompt": "'''\nWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n'''", "test_imports": [], "test_list": ["assert left_insertion([1,2,4,5],6)==4", "assert left_insertion([1,2,4,5],3)==2", "assert left_insertion([1,2,4,5],7)==4"], "entry_point": "left_insertion", "canonical_solution": "\nimport bisect\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)\n", "contract": "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(x <= y for x, y in zip(a, a[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in a), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4\n", "base_input": [[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 7]], "atol": 0}
{"task_id": 737, "prompt": "'''\nWrite a function to check whether the given string is starting with a vowel or not using regex.\n'''", "test_imports": [], "test_list": ["assert check_str(\"annie\")", "assert not check_str(\"dawood\")", "assert check_str(\"Else\")"], "entry_point": "check_str", "canonical_solution": "\nimport re \ndef check_str(string): \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)\n", "contract": "\n\tassert isinstance(string, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_str(\"annie\")\nassert not check_str(\"dawood\")\nassert check_str(\"Else\")\n", "base_input": [["annie"], ["dawood"], ["Else"]], "atol": 0}
{"task_id": 738, "prompt": "'''\nWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n'''", "test_imports": [], "test_list": ["assert geometric_sum(7) == 1.9921875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(8) == 1.99609375"], "entry_point": "geometric_sum", "canonical_solution": "\ndef geometric_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)\n", "contract": "\n  assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375\n", "base_input": [[7], [4], [8]], "atol": 0}
{"task_id": 739, "prompt": "'''\nWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n'''", "test_imports": [], "test_list": ["assert find_Index(2) == 4", "assert find_Index(3) == 14", "assert find_Index(4) == 45"], "entry_point": "find_Index", "canonical_solution": "\nimport math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45\n", "base_input": [[2], [3], [4]], "atol": 0}
{"task_id": 740, "prompt": "'''\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n'''", "test_imports": [], "test_list": ["assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}", "assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}", "assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"], "entry_point": "tuple_to_dict", "canonical_solution": "\ndef tuple_to_dict(test_tup):\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup) % 2 == 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n", "base_input": [[[1, 5, 7, 10, 13, 5]], [[1, 2, 3, 4, 5, 6]], [[7, 8, 9, 10, 11, 12]]], "atol": 0}
{"task_id": 741, "prompt": "'''\nWrite a python function to check whether all the characters are same or not.\n'''", "test_imports": [], "test_list": ["assert all_Characters_Same(\"python\") == False", "assert all_Characters_Same(\"aaa\") == True", "assert all_Characters_Same(\"data\") == False"], "entry_point": "all_Characters_Same", "canonical_solution": "\ndef all_Characters_Same(s) :\n    return all(ch == s[0] for ch in s[1:])\n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False\n", "base_input": [["python"], ["aaa"], ["data"]], "atol": 0}
{"task_id": 742, "prompt": "'''\nWrite a function to caluclate the area of a tetrahedron.\n'''", "test_imports": [], "test_list": ["assert area_tetrahedron(3)==15.588457268119894", "assert area_tetrahedron(20)==692.8203230275509", "assert area_tetrahedron(10)==173.20508075688772"], "entry_point": "area_tetrahedron", "canonical_solution": "\nimport math\ndef area_tetrahedron(side):\n  return math.sqrt(3)*(side*side)\n", "contract": "\n  assert isinstance(side, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n  assert side > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(area_tetrahedron(3), 15.588457268119894, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(20), 692.8203230275509, rel_tol=0.001)\nassert math.isclose(area_tetrahedron(10), 173.20508075688772, rel_tol=0.001)\n", "base_input": [[3], [20], [10]], "atol": 0.0001}
{"task_id": 743, "prompt": "'''\nWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n'''", "test_imports": [], "test_list": ["assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]", "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"], "entry_point": "rotate_right", "canonical_solution": "\ndef rotate_right(l, m):\n  return l[-m:] + l[:-m]\n", "contract": "\n  assert isinstance(l, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(m, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 0 <= m <= len(l), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5]], "atol": 0}
{"task_id": 744, "prompt": "'''\nWrite a function to check if the given tuple has any none value or not.\n'''", "test_imports": [], "test_list": ["assert check_none((10, 4, 5, 6, None)) == True", "assert check_none((7, 8, 9, 11, 14)) == False", "assert check_none((1, 2, 3, 4, None)) == True"], "entry_point": "check_none", "canonical_solution": "\ndef check_none(test_tup):\n  return any(ele is None for ele in test_tup)\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True\n", "base_input": [[[10, 4, 5, 6, null]], [[7, 8, 9, 11, 14]], [[1, 2, 3, 4, null]]], "atol": 0}
{"task_id": 745, "prompt": "'''\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n'''", "test_imports": [], "test_list": ["assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]", "assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]", "assert divisible_by_digits(20,25)==[22, 24]"], "entry_point": "divisible_by_digits", "canonical_solution": "\ndef divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]\n", "contract": "\n    assert isinstance(startnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(endnum, int), \"invalid inputs\" # $_CONTRACT_$\n    assert startnum <= endnum, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]\n", "base_input": [[1, 22], [1, 15], [20, 25]], "atol": 0}
{"task_id": 746, "prompt": "'''\nWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n'''", "test_imports": [], "test_list": ["assert sector_area(4,45)==6.283185307179586", "assert sector_area(9,45)==31.808625617596654", "assert sector_area(9,361)==None"], "entry_point": "sector_area", "canonical_solution": "\nimport math\ndef sector_area(r,a):\n    return (math.pi*r**2) * (a/360)\n", "contract": "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(a, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert r >= 0, \"invalid inputs\" # $_CONTRACT_$\n    assert 360 >= a >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert math.isclose(sector_area(4,45), 6.283185307179586, rel_tol=0.001)\nassert math.isclose(sector_area(9,45), 31.808625617596654, rel_tol=0.001)\n", "base_input": [[4, 45], [9, 45]], "atol": 0.0001}
{"task_id": 747, "prompt": "'''\nWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n'''", "test_imports": [], "test_list": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2", "assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5", "assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3"], "entry_point": "lcs_of_three", "canonical_solution": "\ndef lcs_of_three(X, Y, Z): \n  m = len(X)\n  n = len(Y)\n  o = len(Z)\n  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n  for i in range(m+1): \n\t  for j in range(n+1): \n\t\t  for k in range(o+1): \n\t\t\t  if (i == 0 or j == 0 or k == 0): \n\t\t\t\t  L[i][j][k] = 0\n\t\t\t  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): \n\t\t\t\t  L[i][j][k] = L[i-1][j-1][k-1] + 1\n\t\t\t  else: \n\t\t\t\t  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) \n  return L[m][n][o]\n", "contract": "\n  assert isinstance(X, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(Y, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(Z, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5\nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3\n", "base_input": [["AGGT12", "12TXAYB", "12XBA"], ["Reels", "Reelsfor", "ReelsforReels"], ["abcd1e2", "bc12ea", "bd1ea"]], "atol": 0}
{"task_id": 748, "prompt": "'''\nWrite a function to put spaces between words starting with capital letters in a given string.\n'''", "test_imports": [], "test_list": ["assert capital_words_spaces(\"Python\") == 'Python'", "assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'", "assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"], "entry_point": "capital_words_spaces", "canonical_solution": "\nimport re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)\n", "contract": "\n  assert isinstance(str1, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n", "base_input": [["Python"], ["PythonProgrammingExamples"], ["GetReadyToBeCodingFreak"]], "atol": 0}
{"task_id": 749, "prompt": "'''\nWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n'''", "test_imports": [], "test_list": ["assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]", "assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]", "assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"], "entry_point": "sort_numeric_strings", "canonical_solution": "\ndef sort_numeric_strings(nums_str):\n    return sorted([int(x) for x in nums_str])\n", "contract": "\n    def check_numeric(num: str): # $_CONTRACT_$\n        return num.lstrip('-').rstrip(' ').isdigit() # $_CONTRACT_$\n    assert isinstance(nums_str, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, str) for x in nums_str), \"invalid inputs\" # $_CONTRACT_$\n    assert all(check_numeric(num) for num in nums_str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n", "base_input": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]], [["2", "3", "8", "4", "7", "9", "8", "2", "6", "5", "1", "6", "1", "2", "3", "4", "6", "9", "1", "2"]], [["1", "3", "5", "7", "1", "3", "13", "15", "17", "5", "7 ", "9", "1", "11"]]], "atol": 0}
{"task_id": 750, "prompt": "'''\nWrite a function to add the given tuple to the given list.\n'''", "test_imports": [], "test_list": ["assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]", "assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]", "assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"], "entry_point": "add_tuple", "canonical_solution": "\ndef add_tuple(test_list, test_tup):\n  return test_list + list(test_tup)\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n", "base_input": [[[5, 6, 7], [9, 10]], [[6, 7, 8], [10, 11]], [[7, 8, 9], [11, 12]]], "atol": 0}
{"task_id": 751, "prompt": "'''\nWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n'''", "test_imports": [], "test_list": ["assert check_min_heap([1, 2, 3, 4, 5, 6]) == True", "assert check_min_heap([2, 3, 4, 5, 10, 15]) == True", "assert check_min_heap([2, 10, 4, 5, 3, 15]) == False"], "entry_point": "check_min_heap", "canonical_solution": "\ndef check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)\n", "contract": "\n  assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15]) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15]) == False\n", "base_input": [[[1, 2, 3, 4, 5, 6]], [[2, 3, 4, 5, 10, 15]], [[2, 10, 4, 5, 3, 15]]], "atol": 0}
{"task_id": 752, "prompt": "'''\nWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n'''", "test_imports": [], "test_list": ["assert jacobsthal_num(5) == 11", "assert jacobsthal_num(2) == 1", "assert jacobsthal_num(4) == 5", "assert jacobsthal_num(13) == 2731"], "entry_point": "jacobsthal_num", "canonical_solution": "\ndef jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]\n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(13) == 2731\n", "base_input": [[5], [2], [4], [13]], "atol": 0}
{"task_id": 753, "prompt": "'''\nWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n'''", "test_imports": [], "test_list": ["assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]", "assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]", "assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"], "entry_point": "min_k", "canonical_solution": "\ndef min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res) \n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, tuple) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x[1], (int, float)) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert K <= len(test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n", "base_input": [[[["Manjeet", 10], ["Akshat", 4], ["Akash", 2], ["Nikhil", 8]], 2], [[["Sanjeev", 11], ["Angat", 5], ["Akash", 3], ["Nepin", 9]], 3], [[["tanmay", 14], ["Amer", 11], ["Ayesha", 9], ["SKD", 16]], 1]], "atol": 0}
{"task_id": 754, "prompt": "'''\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n'''", "test_imports": [], "test_list": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]", "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]", "assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]", "assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]"], "entry_point": "extract_index_list", "canonical_solution": "\ndef extract_index_list(l1, l2, l3):\n    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]\n", "contract": "\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l2, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(l3, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]\nassert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]\n", "base_input": [[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]], [[1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], "atol": 0}
{"task_id": 755, "prompt": "'''\nWrite a function to find the second smallest number in a list.\n'''", "test_imports": [], "test_list": ["assert second_smallest([1, 2, -8, -2, 0, -2])==-2", "assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5", "assert second_smallest([2,2])==None", "assert second_smallest([2,2,2])==None"], "entry_point": "second_smallest", "canonical_solution": "\ndef second_smallest(numbers):\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]\n", "contract": "\n  assert isinstance(numbers, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(i, (int, float)) for i in numbers), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None\nassert second_smallest([2,2,2])==None\n", "base_input": [[[1, 2, -8, -2, 0, -2]], [[1, 1, -0.5, 0, 2, -2, -2]], [[2, 2]], [[2, 2, 2]]], "atol": 0}
{"task_id": 756, "prompt": "'''\nWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n'''", "test_imports": [], "test_list": ["assert text_match_zero_one(\"ac\")==False", "assert text_match_zero_one(\"dc\")==False", "assert text_match_zero_one(\"abbbba\")==True", "assert text_match_zero_one(\"dsabbbba\")==True", "assert text_match_zero_one(\"asbbbba\")==False", "assert text_match_zero_one(\"abaaa\")==True"], "entry_point": "text_match_zero_one", "canonical_solution": "\nimport re\ndef text_match_zero_one(text):\n        patterns = 'ab+?'\n        if re.search(patterns,  text):\n                return True\n        else:\n                return False\n", "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_match_zero_one(\"ac\")==False\nassert text_match_zero_one(\"dc\")==False\nassert text_match_zero_one(\"abbbba\")==True\nassert text_match_zero_one(\"dsabbbba\")==True\nassert text_match_zero_one(\"asbbbba\")==False\nassert text_match_zero_one(\"abaaa\")==True\n", "base_input": [["ac"], ["dc"], ["abbbba"], ["dsabbbba"], ["asbbbba"], ["abaaa"]], "atol": 0}
{"task_id": 757, "prompt": "'''\nWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n'''", "test_imports": [], "test_list": ["assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2", "assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1", "assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2"], "entry_point": "count_reverse_pairs", "canonical_solution": "\ndef count_reverse_pairs(test_list):\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, str) for x in test_list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n", "base_input": [[["julia", "best", "tseb", "for", "ailuj"]], [["geeks", "best", "for", "skeeg"]], [["makes", "best", "sekam", "for", "rof"]]], "atol": 0}
{"task_id": 758, "prompt": "'''\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n'''", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}", "assert unique_sublists([['john']])=={('john',): 1}"], "entry_point": "unique_sublists", "canonical_solution": "\ndef unique_sublists(list1):\n    return {tuple(x): list1.count(x) for x in list1}\n", "contract": "\n    def is_hashable(obj): # $_CONTRACT_$\n        try: # $_CONTRACT_$\n            hash(obj) # $_CONTRACT_$\n            return True # $_CONTRACT_$\n        except TypeError: # $_CONTRACT_$\n            return False # $_CONTRACT_$\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(is_hashable(tuple(x)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\nassert unique_sublists([['john']])=={('john',): 1}\n", "base_input": [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[["green", "orange"], ["black"], ["green", "orange"], ["white"]]], [[[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]], [[["john"]]]], "atol": 0}
{"task_id": 759, "prompt": "'''\nWrite a function to check whether a given string is a decimal number with a precision of 2.\n'''", "test_imports": [], "test_list": ["assert is_decimal('123.11')==True", "assert is_decimal('e666.86')==False", "assert is_decimal('3.124587')==False", "assert is_decimal('1.11')==True", "assert is_decimal('1.1.11')==False"], "entry_point": "is_decimal", "canonical_solution": "\ndef is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None\n", "contract": "\n    assert isinstance(num, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False\nassert is_decimal('1.11')==True\nassert is_decimal('1.1.11')==False\n", "base_input": [["123.11"], ["e666.86"], ["3.124587"], ["1.11"], ["1.1.11"]], "atol": 0}
{"task_id": 760, "prompt": "'''\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\n'''", "test_imports": [], "test_list": ["assert unique_Element([1,1,1]) == True", "assert unique_Element([1,2,1,2]) == False", "assert unique_Element([1,2,3,4,5]) == False"], "entry_point": "unique_Element", "canonical_solution": "\ndef unique_Element(arr):\n    return arr.count(arr[0]) == len(arr)\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,1,2]) == False\nassert unique_Element([1,2,3,4,5]) == False\n", "base_input": [[[1, 1, 1]], [[1, 2, 1, 2]], [[1, 2, 3, 4, 5]]], "atol": 0}
{"task_id": 762, "prompt": "'''\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n'''", "test_imports": [], "test_list": ["assert check_monthnumber_number(6)==True", "assert check_monthnumber_number(2)==False", "assert check_monthnumber_number(12)==False"], "entry_point": "check_monthnumber_number", "canonical_solution": "\ndef check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11\n", "contract": "\n  assert isinstance(monthnum3, int), \"invalid inputs\" # $_CONTRACT_$\n  assert 1 <= monthnum3 <= 12, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False\n", "base_input": [[6], [2], [12]], "atol": 0}
{"task_id": 763, "prompt": "'''\nWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n'''", "test_imports": [], "test_list": ["assert find_min_diff((1,5,3,19,18,25),6) == 1", "assert find_min_diff((4,3,2,6),4) == 1", "assert find_min_diff((30,5,20,9),4) == 4"], "entry_point": "find_min_diff", "canonical_solution": "\ndef find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff \n", "contract": "\n    assert isinstance(arr, tuple), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n == len(arr), \"invalid inputs\" # $_CONTRACT_$ \n", "assertion": "\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((4,3,2,6),4) == 1\nassert find_min_diff((30,5,20,9),4) == 4\n", "base_input": [[[1, 5, 3, 19, 18, 25], 6], [[4, 3, 2, 6], 4], [[30, 5, 20, 9], 4]], "atol": 0}
{"task_id": 764, "prompt": "'''\nWrite a python function to count number of digits in a given string.\n'''", "test_imports": [], "test_list": ["assert number_ctr('program2bedone') == 1", "assert number_ctr('3wonders') == 1", "assert number_ctr('123') == 3", "assert number_ctr('3wond-1ers2') == 3"], "entry_point": "number_ctr", "canonical_solution": "\ndef number_ctr(s):\n    return sum(c.isdigit() for c in s)\n", "contract": "\n    assert isinstance(s, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') == 1\nassert number_ctr('123') == 3\nassert number_ctr('3wond-1ers2') == 3\n", "base_input": [["program2bedone"], ["3wonders"], ["123"], ["3wond-1ers2"]], "atol": 0}
{"task_id": 765, "prompt": "'''\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n'''", "test_imports": [], "test_list": ["assert is_polite(7) == 11", "assert is_polite(4) == 7", "assert is_polite(9) == 13"], "entry_point": "is_polite", "canonical_solution": "\nimport math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) \n", "contract": "\n\tassert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n\tassert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13\n", "base_input": [[7], [4], [9]], "atol": 0}
{"task_id": 766, "prompt": "'''\nWrite a function to return a list of all pairs of consecutive items in a given list.\n'''", "test_imports": [], "test_list": ["assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]", "assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]", "assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]", "assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"], "entry_point": "pair_wise", "canonical_solution": "\ndef pair_wise(l1):\n    return list(zip(l1, l1[1:]))\n", "contract": "\n    assert isinstance(l1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n", "base_input": [[[1, 1, 2, 3, 3, 4, 4, 5]], [[1, 5, 7, 9, 10]], [[5, 1, 9, 7, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "atol": 0}
{"task_id": 767, "prompt": "'''\nWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n'''", "test_imports": [], "test_list": ["assert get_pairs_count([1,1,1,1],2) == 6", "assert get_pairs_count([1,5,7,-1,5],6) == 3", "assert get_pairs_count([1,-2,3],1) == 1", "assert get_pairs_count([-1,-2,3],-3) == 1"], "entry_point": "get_pairs_count", "canonical_solution": "\ndef get_pairs_count(arr, sum_):\n    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(sum_, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert get_pairs_count([1,1,1,1],2) == 6\nassert get_pairs_count([1,5,7,-1,5],6) == 3\nassert get_pairs_count([1,-2,3],1) == 1\nassert get_pairs_count([-1,-2,3],-3) == 1\n", "base_input": [[[1, 1, 1, 1], 2], [[1, 5, 7, -1, 5], 6], [[1, -2, 3], 1], [[-1, -2, 3], -3]], "atol": 0}
{"task_id": 769, "prompt": "'''\nWrite a python function to get the difference between two lists.\n'''", "test_imports": [], "test_list": ["assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]", "assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]", "assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"], "entry_point": "Diff", "canonical_solution": "\ndef Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))\n \n", "contract": "\n    assert isinstance(li1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(li2, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]\n", "base_input": [[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[1, 2, 3, 4, 5], [6, 7, 1]], [[1, 2, 3], [6, 7, 1]]], "atol": 0}
{"task_id": 770, "prompt": "'''\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\n'''", "test_imports": [], "test_list": ["assert odd_num_sum(2) == 82", "assert odd_num_sum(3) == 707", "assert odd_num_sum(4) == 3108"], "entry_point": "odd_num_sum", "canonical_solution": "\ndef odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n >= 1, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 707\nassert odd_num_sum(4) == 3108\n", "base_input": [[2], [3], [4]], "atol": 0}
{"task_id": 771, "prompt": "'''\nWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n'''", "test_imports": [], "test_list": ["assert check_expression(\"{()}[{}]\") == True", "assert check_expression(\"{()}[{]\") == False", "assert check_expression(\"{()}[{}][]({})\") == True"], "entry_point": "check_expression", "canonical_solution": "\nfrom collections import deque\ndef check_expression(exp):\n    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack\n", "contract": "\n    assert isinstance(exp, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True\n", "base_input": [["{()}[{}]"], ["{()}[{]"], ["{()}[{}][]({})"]], "atol": 0}
{"task_id": 772, "prompt": "'''\nWrite a function to remove all the words with k length in the given string.\n'''", "test_imports": [], "test_list": ["assert remove_length('The person is most value tet', 3) == 'person is most value'", "assert remove_length('If you told me about this ok', 4) == 'If you me about ok'", "assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"], "entry_point": "remove_length", "canonical_solution": "\ndef remove_length(test_str, K):\n  return ' '.join([i for i in test_str.split() if len(i) != K])\n", "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(K, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n", "base_input": [["The person is most value tet", 3], ["If you told me about this ok", 4], ["Forces of darkeness is come into the play", 4]], "atol": 0}
{"task_id": 773, "prompt": "'''\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n'''", "test_imports": [], "test_list": ["assert occurance_substring('python programming, python language','python')==('python', 0, 6)", "assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)", "assert occurance_substring('python programming,programming language','language')==('language', 31, 39)", "assert occurance_substring('c++ programming, c++ language','python')==None"], "entry_point": "occurance_substring", "canonical_solution": "\nimport re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None\n", "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n assert isinstance(pattern, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)\nassert occurance_substring('c++ programming, c++ language','python')==None\n", "base_input": [["python programming, python language", "python"], ["python programming,programming language", "programming"], ["python programming,programming language", "language"], ["c++ programming, c++ language", "python"]], "atol": 0}
{"task_id": 775, "prompt": "'''\nWrite a python function to check whether every odd index contains odd numbers of a given list.\n'''", "test_imports": [], "test_list": ["assert odd_position([2,1,4,3,6,7,6,3]) == True", "assert odd_position([4,1,2]) == True", "assert odd_position([1,2,3]) == False"], "entry_point": "odd_position", "canonical_solution": "\ndef odd_position(nums):\n\treturn all(n % 2 == 1 for n in nums[1::2])\n", "contract": "\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(n, int) for n in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False\n", "base_input": [[[2, 1, 4, 3, 6, 7, 6, 3]], [[4, 1, 2]], [[1, 2, 3]]], "atol": 0}
{"task_id": 776, "prompt": "'''\nWrite a function to count those characters which have vowels as their neighbors in the given string.\n'''", "test_imports": [], "test_list": ["assert count_vowels('bestinstareels') == 7", "assert count_vowels('partofthejourneyistheend') == 12", "assert count_vowels('amazonprime') == 5"], "entry_point": "count_vowels", "canonical_solution": "\ndef count_vowels(test_str):\n  cnt = 0\n  vowels = 'aeiou'\n  if test_str[0] not in vowels and test_str[1] in vowels:\n    cnt += 1\n  if test_str[-1] not in vowels and test_str[-2] in vowels:\n    cnt += 1\n  for i in range(1, len(test_str) - 1):\n    if test_str[i] not in vowels and (test_str[i - 1] in vowels or test_str[i + 1] in vowels):\n      cnt += 1\n  return cnt \n", "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5\n", "base_input": [["bestinstareels"], ["partofthejourneyistheend"], ["amazonprime"]], "atol": 0}
{"task_id": 777, "prompt": "'''\nWrite a python function to find the sum of non-repeated elements in a given list.\n'''", "test_imports": [], "test_list": ["assert find_sum([1,2,3,1,1,4,5,6]) == 21", "assert find_sum([1,10,9,4,2,10,10,45,4]) == 71", "assert find_sum([12,10,9,45,2,10,10,45,10]) == 78"], "entry_point": "find_sum", "canonical_solution": "\ndef find_sum(arr): \n    return sum(set(arr))\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,10,9,4,2,10,10,45,4]) == 71\nassert find_sum([12,10,9,45,2,10,10,45,10]) == 78\n", "base_input": [[[1, 2, 3, 1, 1, 4, 5, 6]], [[1, 10, 9, 4, 2, 10, 10, 45, 4]], [[12, 10, 9, 45, 2, 10, 10, 45, 10]]], "atol": 0}
{"task_id": 778, "prompt": "'''\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\n'''", "test_imports": [], "test_list": ["assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]", "assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]", "assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"], "entry_point": "pack_consecutive_duplicates", "canonical_solution": "\nfrom itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n", "base_input": [[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10]], [["a", "a", "b", "c", "d", "d"]]], "atol": 0}
{"task_id": 779, "prompt": "'''\nWrite a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n'''", "test_imports": [], "test_list": ["assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}", "assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}", "assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}"], "entry_point": "unique_sublists", "canonical_solution": "\ndef unique_sublists(list1):\n    result ={}\n    for l in list1: \n        result.setdefault(tuple(l), list()).append(1) \n    for a, b in result.items(): \n        result[a] = sum(b)\n    return result\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, list) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n", "base_input": [[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[["green", "orange"], ["black"], ["green", "orange"], ["white"]]], [[[1, 2], [3, 4], [4, 5], [6, 7]]]], "atol": 0}
{"task_id": 780, "prompt": "'''\nWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n'''", "test_imports": [], "test_list": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]", "assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]", "assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"], "entry_point": "find_combinations", "canonical_solution": "\nfrom itertools import combinations \ndef find_combinations(test_list):\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_list) > 0, \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(t, tuple) for t in test_list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(len(t) == len(test_list[0]) for t in test_list), \"invalid inputs\" # $_CONTRACT_$))\n  assert all(isinstance(x, (int, float)) for t in test_list for x in t), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert find_combinations([(1, 2, 3), (3, 4, 5)]) == [(4, 6, 8)]\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n", "base_input": [[[[1, 2, 3], [3, 4, 5]]], [[[2, 4], [6, 7], [5, 1], [6, 10]]], [[[3, 5], [7, 8], [6, 2], [7, 11]]], [[[4, 6], [8, 9], [7, 3], [8, 12]]]], "atol": 0}
{"task_id": 781, "prompt": "'''\nWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n'''", "test_imports": [], "test_list": ["assert count_divisors(10)", "assert not count_divisors(100)", "assert count_divisors(125)"], "entry_point": "count_divisors", "canonical_solution": "\nimport math \ndef count_divisors(n) : \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert n > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_divisors(10)\nassert not count_divisors(100)\nassert count_divisors(125)\n", "base_input": [[10], [100], [125]], "atol": 0}
{"task_id": 782, "prompt": "'''\nWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n'''", "test_imports": [], "test_list": ["assert odd_length_sum([1,2,4]) == 14", "assert odd_length_sum([1,2,1,2]) == 15", "assert odd_length_sum([1,7]) == 8"], "entry_point": "odd_length_sum", "canonical_solution": "\ndef odd_length_sum(arr):\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,1,2]) == 15\nassert odd_length_sum([1,7]) == 8\n", "base_input": [[[1, 2, 4]], [[1, 2, 1, 2]], [[1, 7]]], "atol": 0}
{"task_id": 783, "prompt": "'''\nWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n'''", "test_imports": [], "test_list": ["assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)", "assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)", "assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"], "entry_point": "rgb_to_hsv", "canonical_solution": "\ndef rgb_to_hsv(r, g, b):\n    import colorsys\n    h, s, v = colorsys.rgb_to_hsv(r/255, g/255, b/255)\n    return (h * 360, s * 100, v * 100)\n", "contract": "\n    assert isinstance(r, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(g, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(b, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= r <= 255, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= g <= 255, \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= b <= 255, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.2682926829268, 95.34883720930233, 84.31372549019608)\n", "base_input": [[255, 255, 255], [0, 215, 0], [10, 215, 110]], "atol": 0}
{"task_id": 784, "prompt": "'''\nWrite a function to find the product of first even and odd number of a given list.\n'''", "test_imports": [], "test_list": ["assert mul_even_odd([1,3,5,7,4,1,6,8])==4", "assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2", "assert mul_even_odd([1,5,7,9,10])==10"], "entry_point": "mul_even_odd", "canonical_solution": "\ndef mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)\n", "contract": "\n    assert isinstance(list1, list), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 == 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert any(x % 2 != 0 for x in list1), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in list1), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10\n", "base_input": [[[1, 3, 5, 7, 4, 1, 6, 8]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 5, 7, 9, 10]]], "atol": 0}
{"task_id": 785, "prompt": "'''\nWrite a function to convert tuple string to integer tuple.\n'''", "test_imports": [], "test_list": ["assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)", "assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)", "assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)", "assert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)"], "entry_point": "tuple_str_int", "canonical_solution": "\ndef tuple_str_int(test_str):\n  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\n", "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.startswith('('), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.endswith(')'), \"invalid inputs\" # $_CONTRACT_$\n  assert test_str.lstrip('(').rstrip(')').replace('...', '').replace(',', '').replace(' ', '').isdigit(), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)\nassert tuple_str_int(\"(7, 81, 19)\") == (7, 81, 19)\n", "base_input": [["(7, 8, 9)"], ["(1, 2, 3)"], ["(4, 5, 6)"], ["(7, 81, 19)"]], "atol": 0}
{"task_id": 786, "prompt": "'''\nWrite a function to locate the right insertion point for a specified value in sorted order.\n'''", "test_imports": [], "test_list": ["assert right_insertion([1,2,4,5],6)==4", "assert right_insertion([1,2,4,5],3)==2", "assert right_insertion([1,2,4,5],7)==4"], "entry_point": "right_insertion", "canonical_solution": "\nimport bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)\n", "contract": "\n    assert isinstance(a, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(item, (int, float)) for item in a), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4\n", "base_input": [[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 7]], "atol": 0}
{"task_id": 787, "prompt": "'''\nWrite a function that matches a string that has an a followed by three 'b'.\n'''", "test_imports": [], "test_list": ["assert not text_match_three(\"ac\")", "assert not text_match_three(\"dc\")", "assert text_match_three(\"abbbba\")", "assert text_match_three(\"caacabbbba\")"], "entry_point": "text_match_three", "canonical_solution": "\nimport re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)\n", "contract": "\n        assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert not text_match_three(\"ac\")\nassert not text_match_three(\"dc\")\nassert text_match_three(\"abbbba\")\nassert text_match_three(\"caacabbbba\")\n", "base_input": [["ac"], ["dc"], ["abbbba"], ["caacabbbba"]], "atol": 0}
{"task_id": 788, "prompt": "'''\nWrite a function to create a new tuple from the given string and list.\n'''", "test_imports": [], "test_list": ["assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')", "assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')", "assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"], "entry_point": "new_tuple", "canonical_solution": "\ndef new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])\n", "contract": "\n  assert isinstance(test_list, list), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n", "base_input": [[["WEB", "is"], "best"], [["We", "are"], "Developers"], [["Part", "is"], "Wrong"]], "atol": 0}
{"task_id": 790, "prompt": "'''\nWrite a python function to check whether every even index contains even numbers of a given list.\n'''", "test_imports": [], "test_list": ["assert even_position([3,2,1]) == False", "assert even_position([1,2,3]) == False", "assert even_position([2,1,4]) == True"], "entry_point": "even_position", "canonical_solution": "\ndef even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))\n", "contract": "\n\tassert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n\tassert all(isinstance(i, int) for i in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True\n", "base_input": [[[3, 2, 1]], [[1, 2, 3]], [[2, 1, 4]]], "atol": 0}
{"task_id": 791, "prompt": "'''\nWrite a function to remove tuples from the given tuple.\n'''", "test_imports": [], "test_list": ["assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)", "assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)", "assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)", "assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)"], "entry_point": "remove_nested", "canonical_solution": "\ndef remove_nested(test_tup):\n  return tuple(e for e in test_tup if not isinstance(e, tuple))\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\nassert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)\n", "base_input": [[[1, 5, 7, [4, 6], 10]], [[2, 6, 8, [5, 7], 11]], [[3, 7, 9, [6, 8], 12]], [[3, 7, 9, [6, 8], [5, 12], 12]]], "atol": 0}
{"task_id": 792, "prompt": "'''\nWrite a python function to count the number of lists in a given number of lists.\n'''", "test_imports": [], "test_list": ["assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4", "assert count_list([[1,2],[2,3],[4,5]]) == 3", "assert count_list([[1,0],[2,0]]) == 2"], "entry_point": "count_list", "canonical_solution": "\ndef count_list(input_list): \n    return sum(isinstance(e, list) for e in input_list)\n", "contract": "\n    assert isinstance(input_list, list), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2\n", "base_input": [[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1, 2], [2, 3], [4, 5]]], [[[1, 0], [2, 0]]]], "atol": 0}
{"task_id": 793, "prompt": "'''\nWrite a python function to find the last position of an element in a sorted array.\n'''", "test_imports": [], "test_list": ["assert last([1,2,3],1) == 0", "assert last([1,1,1,2,3,4],1) == 2", "assert last([2,3,2,3,6,8,9],3) == 3"], "entry_point": "last", "canonical_solution": "\ndef last(arr,x):\n    return len(arr)-arr[::-1].index(x) - 1\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(i, (int, arr)) for i in arr), \"invalid inputs\" # $_CONTRACT_$\n    assert all(a <= b for a, b in zip(arr, arr[1:])), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(x, (int, float)), \"invalid inputs\" # $_CONTRACT_$\n    assert x in arr, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert last([1,2,3],1) == 0\nassert last([1,1,1,2,3,4],1) == 2\nassert last([2,2,3,3,6,8,9],3) == 3\n", "base_input": [[[1, 2, 3], 1], [[1, 1, 1, 2, 3, 4], 1], [[2, 2, 3, 3, 6, 8, 9], 3]], "atol": 0}
{"task_id": 794, "prompt": "'''\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n'''", "test_imports": [], "test_list": ["assert text_starta_endb(\"aabbbb\")", "assert not text_starta_endb(\"aabAbbbc\")", "assert not text_starta_endb(\"accddbbjjj\")"], "entry_point": "text_starta_endb", "canonical_solution": "\nimport re\ndef text_starta_endb(text):\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)\n", "contract": "\n    assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aabAbbbc\")\nassert not text_starta_endb(\"accddbbjjj\")\n", "base_input": [["aabbbb"], ["aabAbbbc"], ["accddbbjjj"]], "atol": 0}
{"task_id": 796, "prompt": "'''\nWrite function to find the sum of all items in the given dictionary.\n'''", "test_imports": [], "test_list": ["assert return_sum({'a': 100, 'b':200, 'c':300}) == 600", "assert return_sum({'a': 25, 'b':18, 'c':45}) == 88", "assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"], "entry_point": "return_sum", "canonical_solution": "\ndef return_sum(d):\n  return sum(d.values())\n", "contract": "\n  assert isinstance(d, dict), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, (int, float)) for x in d.values()), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124\n", "base_input": [[{"a": 100, "b": 200, "c": 300}], [{"a": 25, "b": 18, "c": 45}], [{"a": 36, "b": 39, "c": 49}]], "atol": 0}
{"task_id": 797, "prompt": "'''\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\n'''", "test_imports": [], "test_list": ["assert sum_in_range(2,5) == 8", "assert sum_in_range(5,7) == 12", "assert sum_in_range(7,13) == 40"], "entry_point": "sum_in_range", "canonical_solution": "\ndef sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)\n", "contract": "\n    assert isinstance(l, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(r, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= l <= r, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert sum_in_range(2,5) == 8\nassert sum_in_range(5,7) == 12\nassert sum_in_range(7,13) == 40\n", "base_input": [[2, 5], [5, 7], [7, 13]], "atol": 0}
{"task_id": 798, "prompt": "'''\nWrite a python function to find the sum of an array.\n'''", "test_imports": [], "test_list": ["assert _sum([1, 2, 3]) == 6", "assert _sum([15, 12, 13, 10]) == 50", "assert _sum([0, 1, 2]) == 3"], "entry_point": "_sum", "canonical_solution": "\ndef _sum(arr):  \n    return sum(arr)\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(n, (int, float)) for n in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3\n", "base_input": [[[1, 2, 3]], [[15, 12, 13, 10]], [[0, 1, 2]]], "atol": 0}
{"task_id": 799, "prompt": "'''\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n'''", "test_imports": [], "test_list": ["assert left_rotate(16,2) == 64", "assert left_rotate(10,2) == 40", "assert left_rotate(99,3) == 792", "assert left_rotate(99,3) == 792", "assert left_rotate(0b0001,3) == 0b1000", "assert left_rotate(0b0101,3) == 0b101000", "assert left_rotate(0b11101,3) == 0b11101000"], "entry_point": "left_rotate", "canonical_solution": "\ndef left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))  \n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n    assert isinstance(d, int), \"invalid inputs\" # $_CONTRACT_$\n    assert 0 <= n <= 0xffffffff, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert left_rotate(16,2) == 64\nassert left_rotate(10,2) == 40\nassert left_rotate(99,3) == 792\nassert left_rotate(99,3) == 792\nassert left_rotate(0b0001,3) == 0b1000\nassert left_rotate(0b0101,3) == 0b101000\nassert left_rotate(0b11101,3) == 0b11101000\n", "base_input": [[16, 2], [10, 2], [99, 3], [99, 3], [1, 3], [5, 3], [29, 3]], "atol": 0}
{"task_id": 800, "prompt": "'''\nWrite a function to remove all whitespaces from a string.\n'''", "test_imports": [], "test_list": ["assert remove_all_spaces('python  program')==('pythonprogram')", "assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')", "assert remove_all_spaces('python                     program')==('pythonprogram')", "assert remove_all_spaces('   python                     program')=='pythonprogram'"], "entry_point": "remove_all_spaces", "canonical_solution": "\ndef remove_all_spaces(text):\n return text.replace(' ', '')\n", "contract": "\n assert isinstance(text, str), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')\nassert remove_all_spaces('   python                     program')=='pythonprogram'\n", "base_input": [["python  program"], ["python   programming    language"], ["python                     program"], ["   python                     program"]], "atol": 0}
{"task_id": 801, "prompt": "'''\nWrite a python function to count the number of equal numbers from three given integers.\n'''", "test_imports": [], "test_list": ["assert test_three_equal(1,1,1) == 3", "assert test_three_equal(-1,-2,-3) == 0", "assert test_three_equal(1,2,2) == 2"], "entry_point": "test_three_equal", "canonical_solution": "\ndef test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3\n", "contract": "\n  assert isinstance(x, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(y, int), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(z, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2\n", "base_input": [[1, 1, 1], [-1, -2, -3], [1, 2, 2]], "atol": 0}
{"task_id": 802, "prompt": "'''\nWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n'''", "test_imports": [], "test_list": ["assert count_rotation([3,2,1]) == 1", "assert count_rotation([4,5,1,2,3]) == 2", "assert count_rotation([7,8,9,1,2,3]) == 3", "assert count_rotation([1,2,3]) == 0", "assert count_rotation([1,3,2]) == 2"], "entry_point": "count_rotation", "canonical_solution": "\ndef count_rotation(arr):   \n    for i in range (1,len(arr)): \n        if (arr[i] < arr[i - 1]): \n            return i  \n    return 0\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, (int, float)) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert count_rotation([3,2,1]) == 1\nassert count_rotation([4,5,1,2,3]) == 2\nassert count_rotation([7,8,9,1,2,3]) == 3\nassert count_rotation([1,2,3]) == 0\nassert count_rotation([1,3,2]) == 2\n", "base_input": [[[3, 2, 1]], [[4, 5, 1, 2, 3]], [[7, 8, 9, 1, 2, 3]], [[1, 2, 3]], [[1, 3, 2]]], "atol": 0}
{"task_id": 803, "prompt": "'''\nWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n'''", "test_imports": [], "test_list": ["assert not is_perfect_square(10)", "assert is_perfect_square(36)", "assert not is_perfect_square(14)", "assert is_perfect_square(14*14)", "assert not is_perfect_square(125)", "assert is_perfect_square(125*125)"], "entry_point": "is_perfect_square", "canonical_solution": "\ndef is_perfect_square(n) :\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))\n", "contract": "\n    assert isinstance(n, int), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert not is_perfect_square(10)\nassert is_perfect_square(36)\nassert not is_perfect_square(14)\nassert is_perfect_square(14*14)\nassert not is_perfect_square(125)\nassert is_perfect_square(125*125)\n", "base_input": [[10], [36], [14], [196], [125], [15625]], "atol": 0}
{"task_id": 804, "prompt": "'''\nWrite a function to check whether the product of numbers in a list is even or not.\n'''", "test_imports": [], "test_list": ["assert is_product_even([1,2,3])", "assert is_product_even([1,2,1,4])", "assert not is_product_even([1,1])"], "entry_point": "is_product_even", "canonical_solution": "\ndef is_product_even(arr): \n    return any(x % 2 == 0 for x in arr)\n", "contract": "\n    assert isinstance(arr, list), \"invalid inputs\" # $_CONTRACT_$\n    assert len(arr) > 0, \"invalid inputs\" # $_CONTRACT_$\n    assert all(isinstance(x, int) for x in arr), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert is_product_even([1,2,3])\nassert is_product_even([1,2,1,4])\nassert not is_product_even([1,1])\n", "base_input": [[[1, 2, 3]], [[1, 2, 1, 4]], [[1, 1]]], "atol": 0}
{"task_id": 805, "prompt": "'''\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n'''", "test_imports": [], "test_list": ["assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]", "assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]", "assert max_sum_list([[2,3,1]])==[2,3,1]"], "entry_point": "max_sum_list", "canonical_solution": "\ndef max_sum_list(lists):\n return max(lists, key=sum)\n", "contract": "\n assert isinstance(lists, list), \"invalid inputs\" # $_CONTRACT_$\n assert all(isinstance(x, list) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n assert all(all(isinstance(y, (int, float)) for y in x) for x in lists), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]\nassert max_sum_list([[2,3,1]])==[2,3,1]\n", "base_input": [[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[3, 2, 1], [6, 5, 4], [12, 11, 10]]], [[[2, 3, 1]]]], "atol": 0}
{"task_id": 806, "prompt": "'''\nWrite a function to find maximum run of uppercase characters in the given string.\n'''", "test_imports": [], "test_list": ["assert max_run_uppercase('GeMKSForGERksISBESt') == 5", "assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6", "assert max_run_uppercase('GooGLEFluTTER') == 4"], "entry_point": "max_run_uppercase", "canonical_solution": "\ndef max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res\n", "contract": "\n  assert isinstance(test_str, str), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_str) > 0, \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4\n", "base_input": [["GeMKSForGERksISBESt"], ["PrECIOusMOVemENTSYT"], ["GooGLEFluTTER"]], "atol": 0}
{"task_id": 807, "prompt": "'''\nWrite a python function to find the first odd number in a given list of numbers.\n'''", "test_imports": [], "test_list": ["assert first_odd([1,3,5]) == 1", "assert first_odd([2,4,1,3]) == 1", "assert first_odd ([8,9,1]) == 9"], "entry_point": "first_odd", "canonical_solution": "\ndef first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd\n", "contract": "\n  assert isinstance(nums, list), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(el, int) for el in nums), \"invalid inputs\" # $_CONTRACT_$\n  assert any(el % 2 != 0 for el in nums), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9\n", "base_input": [[[1, 3, 5]], [[2, 4, 1, 3]], [[8, 9, 1]]], "atol": 0}
{"task_id": 808, "prompt": "'''\nWrite a function to check if the given tuples contain the k or not.\n'''", "test_imports": [], "test_list": ["assert check_K((10, 4, 5, 6, 8), 6) == True", "assert check_K((1, 2, 3, 4, 5, 6), 7) == False", "assert check_K((7, 8, 9, 44, 11, 12), 11) == True"], "entry_point": "check_K", "canonical_solution": "\ndef check_K(test_tup, K):\n  return K in test_tup\n", "contract": "\n  assert isinstance(test_tup, tuple), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True\n", "base_input": [[[10, 4, 5, 6, 8], 6], [[1, 2, 3, 4, 5, 6], 7], [[7, 8, 9, 44, 11, 12], 11]], "atol": 0}
{"task_id": 809, "prompt": "'''\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n'''", "test_imports": [], "test_list": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False", "assert check_smaller((4, 5, 6), (3, 4, 5)) == True", "assert check_smaller((11, 12, 13), (10, 11, 12)) == True"], "entry_point": "check_smaller", "canonical_solution": "\ndef check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))\n", "contract": "\n  assert isinstance(test_tup1, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert isinstance(test_tup2, tuple), \"invalid inputs\" # $_CONTRACT_$\n  assert len(test_tup1) == len(test_tup2), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup1), \"invalid inputs\" # $_CONTRACT_$\n  assert all(isinstance(x, int) for x in test_tup2), \"invalid inputs\" # $_CONTRACT_$\n", "assertion": "\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True\n", "base_input": [[[1, 2, 3], [2, 3, 4]], [[4, 5, 6], [3, 4, 5]], [[11, 12, 13], [10, 11, 12]]], "atol": 0}
